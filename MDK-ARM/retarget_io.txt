; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otft_lcd\retarget_io.o --asm_dir=./ --list_dir=--list --depend=tft_lcd\retarget_io.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I../Drivers/BSP/Components -I../Drivers/BSP\Components/Common -I..\Middlewares\Third_Party\FatFs\src -I..\Drivers\BSP\Adafruit_Shield -I..\Drivers\BSP\STM32F1xx_Nucleo -I..\Middlewares\Third_Party\FatFs\src\drivers -I..\Drivers\BSP\Components\st7789 -I.\RTE\_TFT_LCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=tft_lcd\retarget_io.crf C:\Keil_v5\ARM\PACK\Keil\ARM_Compiler\1.6.3\Source\retarget_io.c]
                          THUMB

                          AREA ||i.ITM_ReceiveChar||, CODE, READONLY, ALIGN=2

                  ITM_ReceiveChar PROC
;;;112    int32_t ITM_ReceiveChar (void);
;;;113    int32_t ITM_ReceiveChar (void) {
000000  f04f30ff          MOV      r0,#0xffffffff
;;;114      int32_t ch = -1;                      /* no character available */
;;;115     
;;;116      if (ITM_RxBuffer != ITM_RXBUFFER_EMPTY) {
000004  4903              LDR      r1,|L1.20|
000006  680b              LDR      r3,[r1,#0]  ; ITM_RxBuffer
000008  4a03              LDR      r2,|L1.24|
00000a  4293              CMP      r3,r2
00000c  d001              BEQ      |L1.18|
;;;117        ch = ITM_RxBuffer;
00000e  6808              LDR      r0,[r1,#0]  ; ITM_RxBuffer
;;;118        ITM_RxBuffer = ITM_RXBUFFER_EMPTY;  /* ready for next character */
000010  600a              STR      r2,[r1,#0]  ; ITM_RxBuffer
                  |L1.18|
;;;119      }
;;;120     
;;;121      return (ch);
;;;122    }
000012  4770              BX       lr
;;;123     
                          ENDP

                  |L1.20|
                          DCD      ||.data||
                  |L1.24|
                          DCD      0x5aa55aa5

                          AREA ||i.ITM_SendChar||, CODE, READONLY, ALIGN=2

                  ITM_SendChar PROC
;;;94     int32_t ITM_SendChar (int32_t ch);
;;;95     int32_t ITM_SendChar (int32_t ch) {
000000  4908              LDR      r1,|L2.36|
;;;96       if ((ITM_TCR & ITM_TCR_ITMENA_Msk) && /* ITM enabled */
000002  6809              LDR      r1,[r1,#0]
000004  07c9              LSLS     r1,r1,#31
000006  d00c              BEQ      |L2.34|
;;;97           (ITM_TER & (1UL << 0)        )) { /* ITM Port #0 enabled */
000008  4906              LDR      r1,|L2.36|
00000a  3980              SUBS     r1,r1,#0x80
00000c  6809              LDR      r1,[r1,#0]
00000e  07c9              LSLS     r1,r1,#31
000010  d007              BEQ      |L2.34|
;;;98     		while (ITM_PORT0_U32 == 0)
;;;99         ITM_PORT0_U8 = (uint8_t)ch;
000012  f04f4160          MOV      r1,#0xe0000000
000016  b2c2              UXTB     r2,r0
000018  e000              B        |L2.28|
                  |L2.26|
00001a  700a              STRB     r2,[r1,#0]
                  |L2.28|
00001c  680b              LDR      r3,[r1,#0]            ;98
00001e  2b00              CMP      r3,#0                 ;98
000020  d0fb              BEQ      |L2.26|
                  |L2.34|
;;;100      }
;;;101      return (ch);
;;;102    }
000022  4770              BX       lr
;;;103     
                          ENDP

                  |L2.36|
                          DCD      0xe0000e80

                          AREA ||i.__aeabi_assert||, CODE, READONLY, ALIGN=2

                  __aeabi_assert PROC
;;;343    __attribute__((weak,noreturn))
;;;344    void __aeabi_assert (const char *expr, const char *file, int line) {
000000  b50e              PUSH     {r1-r3,lr}
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;345      char str[12], *p;
;;;346     
;;;347      fputs("*** assertion failed: ", stderr);
000008  4916              LDR      r1,|L3.100|
00000a  a017              ADR      r0,|L3.104|
00000c  f7fffffe          BL       fputs
;;;348      fputs(expr, stderr);
000010  4914              LDR      r1,|L3.100|
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       fputs
;;;349      fputs(", file ", stderr);
000018  4912              LDR      r1,|L3.100|
00001a  a019              ADR      r0,|L3.128|
00001c  f7fffffe          BL       fputs
;;;350      fputs(file, stderr);
000020  4910              LDR      r1,|L3.100|
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       fputs
;;;351      fputs(", line ", stderr);
000028  490e              LDR      r1,|L3.100|
00002a  a017              ADR      r0,|L3.136|
00002c  f7fffffe          BL       fputs
;;;352     
;;;353      p = str + sizeof(str);
000030  a803              ADD      r0,sp,#0xc
;;;354      *--p = '\0';
000032  2100              MOVS     r1,#0
000034  f88d100b          STRB     r1,[sp,#0xb]
;;;355      *--p = '\n';
000038  210a              MOVS     r1,#0xa
00003a  1e80              SUBS     r0,r0,#2
00003c  f88d100a          STRB     r1,[sp,#0xa]
;;;356      while (line > 0) {
000040  e008              B        |L3.84|
                  |L3.66|
;;;357        *--p = '0' + (line % 10);
000042  fb94f2f1          SDIV     r2,r4,r1
000046  fb014212          MLS      r2,r1,r2,r4
00004a  3230              ADDS     r2,r2,#0x30
00004c  f8002d01          STRB     r2,[r0,#-1]!
;;;358        line /= 10;
000050  fb94f4f1          SDIV     r4,r4,r1
                  |L3.84|
000054  2c00              CMP      r4,#0                 ;356
000056  dcf4              BGT      |L3.66|
;;;359      }
;;;360      fputs(p, stderr);
000058  4902              LDR      r1,|L3.100|
00005a  f7fffffe          BL       fputs
;;;361     
;;;362      abort();
00005e  f7fffffe          BL       abort
;;;363    }
;;;364     
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      __stderr
                  |L3.104|
000068  2a2a2a20          DCB      "*** assertion failed: ",0
00006c  61737365
000070  7274696f
000074  6e206661
000078  696c6564
00007c  3a2000  
00007f  00                DCB      0
                  |L3.128|
000080  2c206669          DCB      ", file ",0
000084  6c652000
                  |L3.136|
000088  2c206c69          DCB      ", line ",0
00008c  6e652000

                          AREA ||i.__backspace||, CODE, READONLY, ALIGN=2

                  __backspace PROC
;;;317    int __backspace(FILE *stream);
;;;318    int __backspace(FILE *stream) {
000000  4908              LDR      r1,|L4.36|
;;;319     
;;;320    #ifdef RTE_Compiler_IO_STDIN
;;;321      if (stream == &__stdin) {
;;;322        if (getchar_ch != -1) {
000002  f04f32ff          MOV      r2,#0xffffffff
000006  4288              CMP      r0,r1                 ;321
000008  d109              BNE      |L4.30|
00000a  4807              LDR      r0,|L4.40|
00000c  6881              LDR      r1,[r0,#8]  ; getchar_ch
00000e  1c49              ADDS     r1,r1,#1
000010  d003              BEQ      |L4.26|
;;;323          getchar_undo = 1;
000012  2101              MOVS     r1,#1
000014  6041              STR      r1,[r0,#4]  ; getchar_undo
;;;324          return (0);
000016  2000              MOVS     r0,#0
;;;325        }
;;;326        return (-1);
;;;327      }
;;;328    #else
;;;329      (void)stream;
;;;330    #endif
;;;331     
;;;332      return (-1);
;;;333    }
000018  4770              BX       lr
                  |L4.26|
00001a  4610              MOV      r0,r2                 ;326
00001c  4770              BX       lr
                  |L4.30|
00001e  4610              MOV      r0,r2                 ;332
000020  4770              BX       lr
;;;334     
                          ENDP

000022  0000              DCW      0x0000
                  |L4.36|
                          DCD      __stdin
                  |L4.40|
                          DCD      ||.data||

                          AREA ||i.abort||, CODE, READONLY, ALIGN=1

                  abort PROC
                  |L5.0|
;;;366    __attribute__((weak))
;;;367    void abort(void) {
000000  e7fe              B        |L5.0|
;;;368      for (;;);
;;;369    }
;;;370     
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;277    __attribute__((weak))
;;;278    int fgetc (FILE * stream) {
000000  b510              PUSH     {r4,lr}
;;;279    #ifdef RTE_Compiler_IO_STDIN
;;;280      int ch;
;;;281     
;;;282      if (stream == &__stdin) {
000002  4a09              LDR      r2,|L6.40|
;;;283        if (getchar_undo) {
;;;284          ch = getchar_ch;
;;;285          getchar_ch = -1;
000004  f04f31ff          MOV      r1,#0xffffffff
000008  4290              CMP      r0,r2                 ;282
00000a  d10b              BNE      |L6.36|
00000c  4c07              LDR      r4,|L6.44|
00000e  6860              LDR      r0,[r4,#4]            ;283  ; getchar_undo
000010  b120              CBZ      r0,|L6.28|
000012  68a0              LDR      r0,[r4,#8]            ;284  ; getchar_ch
000014  60a1              STR      r1,[r4,#8]  ; getchar_ch
;;;286          getchar_undo = 0;
000016  2100              MOVS     r1,#0
000018  6061              STR      r1,[r4,#4]  ; getchar_undo
;;;287          return (ch);
;;;288        }
;;;289        ch = stdin_getchar();
;;;290    #if (STDIN_ECHO != 0)
;;;291        stdout_putchar(ch);
;;;292    #endif
;;;293        getchar_ch = ch;
;;;294        return (ch);
;;;295      }
;;;296    #else
;;;297      (void)stream;
;;;298    #endif
;;;299     
;;;300      return (-1);
;;;301    }
00001a  bd10              POP      {r4,pc}
                  |L6.28|
00001c  f7fffffe          BL       stdin_getchar
000020  60a0              STR      r0,[r4,#8]            ;293  ; getchar_ch
000022  bd10              POP      {r4,pc}
                  |L6.36|
000024  4608              MOV      r0,r1                 ;300
000026  bd10              POP      {r4,pc}
;;;302     
                          ENDP

                  |L6.40|
                          DCD      __stdin
                  |L6.44|
                          DCD      ||.data||

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;236    __attribute__((weak))
;;;237    int fputc (int c, FILE * stream) {
000000  4a06              LDR      r2,|L7.28|
;;;238    #if (!defined(RTE_Compiler_IO_STDOUT) && !defined(RTE_Compiler_IO_STDERR))
;;;239      (void)c;
;;;240      (void)stream;
;;;241    #endif
;;;242     
;;;243    #ifdef RTE_Compiler_IO_STDOUT
;;;244      if (stream == &__stdout) {
000002  4291              CMP      r1,r2
000004  d101              BNE      |L7.10|
;;;245    #if (STDOUT_CR_LF != 0)
;;;246        if (c == '\n') stdout_putchar('\r');
;;;247    #endif
;;;248        return (stdout_putchar(c));
000006  f7ffbffe          B.W      stdout_putchar
                  |L7.10|
;;;249      }
;;;250    #endif
;;;251     
;;;252    #ifdef RTE_Compiler_IO_STDERR
;;;253      if (stream == &__stderr) {
00000a  4a05              LDR      r2,|L7.32|
00000c  4291              CMP      r1,r2
00000e  d101              BNE      |L7.20|
;;;254    #if (STDERR_CR_LF != 0)
;;;255        if (c == '\n') stderr_putchar('\r');
;;;256    #endif
;;;257        return (stderr_putchar(c));
000010  f7ffbffe          B.W      stderr_putchar
                  |L7.20|
;;;258      }
;;;259    #endif
;;;260     
;;;261      return (-1);
000014  f04f30ff          MOV      r0,#0xffffffff
;;;262    }
000018  4770              BX       lr
;;;263     
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      __stdout
                  |L7.32|
                          DCD      __stderr

                          AREA ||i.stderr_putchar||, CODE, READONLY, ALIGN=1

                  stderr_putchar PROC
;;;201    #elif defined(RTE_Compiler_IO_STDERR_ITM)
;;;202    static int stderr_putchar (int ch) {
000000  f7ffbffe          B.W      ITM_SendChar
;;;203      return (ITM_SendChar(ch));
;;;204    }
;;;205    #elif defined(RTE_Compiler_IO_STDERR_BKPT)
                          ENDP


                          AREA ||i.stdin_getchar||, CODE, READONLY, ALIGN=1

                  stdin_getchar PROC
;;;135    #elif defined(RTE_Compiler_IO_STDIN_ITM)
;;;136    static int stdin_getchar (void) {
000000  b500              PUSH     {lr}
                  |L9.2|
;;;137      int32_t ch;
;;;138     
;;;139      do {
;;;140        ch = ITM_ReceiveChar();
000002  f7fffffe          BL       ITM_ReceiveChar
;;;141      } while (ch == -1);
000006  1c41              ADDS     r1,r0,#1
000008  d0fb              BEQ      |L9.2|
;;;142      return (ch);
;;;143    }
00000a  bd00              POP      {pc}
;;;144    #elif defined(RTE_Compiler_IO_STDIN_BKPT)
                          ENDP


                          AREA ||i.stdout_putchar||, CODE, READONLY, ALIGN=1

                  stdout_putchar PROC
;;;164    #elif defined(RTE_Compiler_IO_STDOUT_ITM)
;;;165    static int stdout_putchar (int ch) {
000000  f7ffbffe          B.W      ITM_SendChar
;;;166      return (ITM_SendChar(ch));
;;;167    }
;;;168    #elif defined(RTE_Compiler_IO_STDOUT_EVR)
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  ITM_RxBuffer
                          DCD      0x5aa55aa5
                  getchar_undo
                          DCD      0x00000000
                  getchar_ch
                          DCD      0xffffffff
