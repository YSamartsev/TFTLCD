; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otft_lcd\st7789.o --asm_dir=./ --list_dir=--list --depend=tft_lcd\st7789.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I../Drivers/BSP/Components -I../Drivers/BSP\Components/Common -I..\Middlewares\Third_Party\FatFs\src -I..\Drivers\BSP\Adafruit_Shield -I..\Drivers\BSP\STM32F1xx_Nucleo -I..\Middlewares\Third_Party\FatFs\src\drivers -I..\Drivers\BSP\Components\st7789 -I.\RTE\_TFT_LCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=tft_lcd\st7789.crf ..\Drivers\BSP\Components\st7789\st7789.c]
                          THUMB

                          AREA ||i.ST7789_DrawCircle||, CODE, READONLY, ALIGN=2

                  ST7789_DrawCircle PROC
;;;372     */
;;;373    void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;374    {
000004  4607              MOV      r7,r0
;;;375    	int16_t f = 1 - r;
;;;376    	int16_t ddF_x = 1;
;;;377    	int16_t ddF_y = -2 * r;
000006  0050              LSLS     r0,r2,#1
000008  4614              MOV      r4,r2                 ;374
00000a  460e              MOV      r6,r1                 ;374
00000c  f1c20801          RSB      r8,r2,#1              ;375
000010  f1c00a00          RSB      r10,r0,#0
;;;378    	int16_t x = 0;
000014  2500              MOVS     r5,#0
000016  b083              SUB      sp,sp,#0xc            ;374
000018  f04f0901          MOV      r9,#1                 ;376
;;;379    	int16_t y = r;
;;;380    
;;;381    	ST7789_Select();
00001c  462a              MOV      r2,r5
00001e  f44f5180          MOV      r1,#0x1000
000022  4840              LDR      r0,|L1.292|
000024  f7fffffe          BL       HAL_GPIO_WritePin
;;;382    	ST7789_DrawPixel(x0, y0 + r, color);
000028  1930              ADDS     r0,r6,r4
00002a  b281              UXTH     r1,r0
00002c  4638              MOV      r0,r7
00002e  9a06              LDR      r2,[sp,#0x18]
000030  f7fffffe          BL       ST7789_DrawPixel
;;;383    	ST7789_DrawPixel(x0, y0 - r, color);
000034  1b30              SUBS     r0,r6,r4
000036  b281              UXTH     r1,r0
000038  4638              MOV      r0,r7
00003a  9a06              LDR      r2,[sp,#0x18]
00003c  f7fffffe          BL       ST7789_DrawPixel
;;;384    	ST7789_DrawPixel(x0 + r, y0, color);
000040  1938              ADDS     r0,r7,r4
000042  b280              UXTH     r0,r0
000044  4631              MOV      r1,r6
000046  9a06              LDR      r2,[sp,#0x18]
000048  f7fffffe          BL       ST7789_DrawPixel
;;;385    	ST7789_DrawPixel(x0 - r, y0, color);
00004c  1b38              SUBS     r0,r7,r4
00004e  b280              UXTH     r0,r0
000050  4631              MOV      r1,r6
;;;386    
;;;387    	while (x < y) {
000052  9a06              LDR      r2,[sp,#0x18]
000054  e059              B        |L1.266|
;;;388    		if (f >= 0) {
000056  bf00              NOP      
                  |L1.88|
000058  f1b80f00          CMP      r8,#0
00005c  db09              BLT      |L1.114|
;;;389    			y--;
;;;390    			ddF_y += 2;
00005e  f10a0002          ADD      r0,r10,#2
000062  fa0ffa80          SXTH     r10,r0
000066  1e64              SUBS     r4,r4,#1              ;388
;;;391    			f += ddF_y;
000068  eb08000a          ADD      r0,r8,r10
00006c  b224              SXTH     r4,r4                 ;389
00006e  fa0ff880          SXTH     r8,r0
                  |L1.114|
;;;392    		}
;;;393    		x++;
;;;394    		ddF_x += 2;
000072  f1090002          ADD      r0,r9,#2
000076  fa0ff980          SXTH     r9,r0
00007a  1c6d              ADDS     r5,r5,#1              ;391
;;;395    		f += ddF_x;
00007c  eb080009          ADD      r0,r8,r9
000080  b22d              SXTH     r5,r5                 ;393
000082  fa0ff880          SXTH     r8,r0
;;;396    
;;;397    		ST7789_DrawPixel(x0 + x, y0 + y, color);
000086  1978              ADDS     r0,r7,r5
000088  9001              STR      r0,[sp,#4]
00008a  eb060b04          ADD      r11,r6,r4
00008e  fa1ff18b          UXTH     r1,r11
000092  b280              UXTH     r0,r0
000094  9a06              LDR      r2,[sp,#0x18]
000096  f7fffffe          BL       ST7789_DrawPixel
;;;398    		ST7789_DrawPixel(x0 - x, y0 + y, color);
00009a  1b78              SUBS     r0,r7,r5
00009c  9000              STR      r0,[sp,#0]
00009e  fa1ff18b          UXTH     r1,r11
0000a2  b280              UXTH     r0,r0
0000a4  9a06              LDR      r2,[sp,#0x18]
0000a6  f7fffffe          BL       ST7789_DrawPixel
;;;399    		ST7789_DrawPixel(x0 + x, y0 - y, color);
0000aa  9801              LDR      r0,[sp,#4]
0000ac  eba60b04          SUB      r11,r6,r4
0000b0  fa1ff18b          UXTH     r1,r11
0000b4  b280              UXTH     r0,r0
0000b6  9a06              LDR      r2,[sp,#0x18]
0000b8  f7fffffe          BL       ST7789_DrawPixel
;;;400    		ST7789_DrawPixel(x0 - x, y0 - y, color);
0000bc  9800              LDR      r0,[sp,#0]
0000be  fa1ff18b          UXTH     r1,r11
0000c2  b280              UXTH     r0,r0
0000c4  9a06              LDR      r2,[sp,#0x18]
0000c6  f7fffffe          BL       ST7789_DrawPixel
;;;401    
;;;402    		ST7789_DrawPixel(x0 + y, y0 + x, color);
0000ca  1938              ADDS     r0,r7,r4
0000cc  9001              STR      r0,[sp,#4]
0000ce  eb060b05          ADD      r11,r6,r5
0000d2  fa1ff18b          UXTH     r1,r11
0000d6  b280              UXTH     r0,r0
0000d8  9a06              LDR      r2,[sp,#0x18]
0000da  f7fffffe          BL       ST7789_DrawPixel
;;;403    		ST7789_DrawPixel(x0 - y, y0 + x, color);
0000de  1b38              SUBS     r0,r7,r4
0000e0  9000              STR      r0,[sp,#0]
0000e2  fa1ff18b          UXTH     r1,r11
0000e6  b280              UXTH     r0,r0
0000e8  9a06              LDR      r2,[sp,#0x18]
0000ea  f7fffffe          BL       ST7789_DrawPixel
;;;404    		ST7789_DrawPixel(x0 + y, y0 - x, color);
0000ee  9801              LDR      r0,[sp,#4]
0000f0  eba60b05          SUB      r11,r6,r5
0000f4  fa1ff18b          UXTH     r1,r11
0000f8  b280              UXTH     r0,r0
0000fa  9a06              LDR      r2,[sp,#0x18]
0000fc  f7fffffe          BL       ST7789_DrawPixel
;;;405    		ST7789_DrawPixel(x0 - y, y0 - x, color);
000100  9800              LDR      r0,[sp,#0]
000102  fa1ff18b          UXTH     r1,r11
000106  b280              UXTH     r0,r0
000108  9a06              LDR      r2,[sp,#0x18]
                  |L1.266|
00010a  f7fffffe          BL       ST7789_DrawPixel
00010e  42a5              CMP      r5,r4                 ;387
000110  dba2              BLT      |L1.88|
;;;406    	}
;;;407    	ST7789_UnSelect();
000112  b007              ADD      sp,sp,#0x1c
000114  2201              MOVS     r2,#1
000116  e8bd4ff0          POP      {r4-r11,lr}
00011a  0311              LSLS     r1,r2,#12
00011c  4801              LDR      r0,|L1.292|
00011e  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;408    }
;;;409    
                          ENDP

000122  0000              DCW      0x0000
                  |L1.292|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawFilledCircle||, CODE, READONLY, ALIGN=2

                  ST7789_DrawFilledCircle PROC
;;;633     */
;;;634    void ST7789_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;635    {
000004  4614              MOV      r4,r2
000006  460d              MOV      r5,r1
000008  4607              MOV      r7,r0
00000a  4698              MOV      r8,r3
;;;636    	ST7789_Select();
00000c  2200              MOVS     r2,#0
00000e  f44f5180          MOV      r1,#0x1000
000012  4840              LDR      r0,|L2.276|
000014  f7fffffe          BL       HAL_GPIO_WritePin
;;;637    	int16_t f = 1 - r;
000018  f1c40001          RSB      r0,r4,#1
00001c  fa0ff980          SXTH     r9,r0
;;;638    	int16_t ddF_x = 1;
;;;639    	int16_t ddF_y = -2 * r;
000020  ebc430c4          RSB      r0,r4,r4,LSL #15
000024  0040              LSLS     r0,r0,#1
000026  fa0ffb80          SXTH     r11,r0
;;;640    	int16_t x = 0;
;;;641    	int16_t y = r;
;;;642    
;;;643    	ST7789_DrawPixel(x0, y0 + r, color);
00002a  1928              ADDS     r0,r5,r4
00002c  b281              UXTH     r1,r0
00002e  f04f0a01          MOV      r10,#1                ;638
000032  2600              MOVS     r6,#0                 ;640
000034  b2b8              UXTH     r0,r7
000036  4642              MOV      r2,r8
000038  f7fffffe          BL       ST7789_DrawPixel
;;;644    	ST7789_DrawPixel(x0, y0 - r, color);
00003c  1b28              SUBS     r0,r5,r4
00003e  b281              UXTH     r1,r0
000040  b2b8              UXTH     r0,r7
000042  4642              MOV      r2,r8
000044  f7fffffe          BL       ST7789_DrawPixel
;;;645    	ST7789_DrawPixel(x0 + r, y0, color);
000048  1938              ADDS     r0,r7,r4
00004a  9002              STR      r0,[sp,#8]
00004c  b2a9              UXTH     r1,r5
00004e  b280              UXTH     r0,r0
000050  4642              MOV      r2,r8
000052  f7fffffe          BL       ST7789_DrawPixel
;;;646    	ST7789_DrawPixel(x0 - r, y0, color);
000056  1b38              SUBS     r0,r7,r4
000058  9001              STR      r0,[sp,#4]
00005a  b2a9              UXTH     r1,r5
00005c  b280              UXTH     r0,r0
00005e  4642              MOV      r2,r8
000060  f7fffffe          BL       ST7789_DrawPixel
;;;647    	ST7789_DrawLine(x0 - r, y0, x0 + r, y0, color);
000064  9802              LDR      r0,[sp,#8]
000066  b2ab              UXTH     r3,r5
000068  f8cd8000          STR      r8,[sp,#0]
00006c  b282              UXTH     r2,r0
00006e  b2a9              UXTH     r1,r5
;;;648    
;;;649    	while (x < y) {
000070  e041              B        |L2.246|
;;;650    		if (f >= 0) {
000072  bf00              NOP      
                  |L2.116|
000074  f1b90f00          CMP      r9,#0
000078  db09              BLT      |L2.142|
;;;651    			y--;
;;;652    			ddF_y += 2;
00007a  f10b0002          ADD      r0,r11,#2
00007e  fa0ffb80          SXTH     r11,r0
000082  1e64              SUBS     r4,r4,#1              ;650
;;;653    			f += ddF_y;
000084  eb09000b          ADD      r0,r9,r11
000088  b224              SXTH     r4,r4                 ;651
00008a  fa0ff980          SXTH     r9,r0
                  |L2.142|
;;;654    		}
;;;655    		x++;
;;;656    		ddF_x += 2;
00008e  f10a0002          ADD      r0,r10,#2
000092  fa0ffa80          SXTH     r10,r0
000096  1c76              ADDS     r6,r6,#1              ;653
;;;657    		f += ddF_x;
000098  eb09000a          ADD      r0,r9,r10
00009c  b236              SXTH     r6,r6                 ;655
00009e  fa0ff980          SXTH     r9,r0
;;;658    
;;;659    		ST7789_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
0000a2  19b8              ADDS     r0,r7,r6
0000a4  b282              UXTH     r2,r0
0000a6  9002              STR      r0,[sp,#8]
0000a8  1bb8              SUBS     r0,r7,r6
0000aa  e9cd8000          STRD     r8,r0,[sp,#0]
0000ae  1929              ADDS     r1,r5,r4
0000b0  b28b              UXTH     r3,r1
0000b2  b289              UXTH     r1,r1
0000b4  b280              UXTH     r0,r0
0000b6  f7fffffe          BL       ST7789_DrawLine
;;;660    		ST7789_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
0000ba  9801              LDR      r0,[sp,#4]
0000bc  1b29              SUBS     r1,r5,r4
0000be  b282              UXTH     r2,r0
0000c0  9802              LDR      r0,[sp,#8]
0000c2  b28b              UXTH     r3,r1
0000c4  f8cd8000          STR      r8,[sp,#0]
0000c8  b289              UXTH     r1,r1
0000ca  b280              UXTH     r0,r0
0000cc  f7fffffe          BL       ST7789_DrawLine
;;;661    
;;;662    		ST7789_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
0000d0  1b39              SUBS     r1,r7,r4
0000d2  19a8              ADDS     r0,r5,r6
0000d4  b28a              UXTH     r2,r1
0000d6  9102              STR      r1,[sp,#8]
0000d8  b283              UXTH     r3,r0
0000da  b281              UXTH     r1,r0
0000dc  1938              ADDS     r0,r7,r4
0000de  e9cd8000          STRD     r8,r0,[sp,#0]
0000e2  b280              UXTH     r0,r0
0000e4  f7fffffe          BL       ST7789_DrawLine
;;;663    		ST7789_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
0000e8  9902              LDR      r1,[sp,#8]
0000ea  1ba8              SUBS     r0,r5,r6
0000ec  b28a              UXTH     r2,r1
0000ee  b283              UXTH     r3,r0
0000f0  f8cd8000          STR      r8,[sp,#0]
0000f4  b281              UXTH     r1,r0
                  |L2.246|
0000f6  9801              LDR      r0,[sp,#4]            ;647
0000f8  b280              UXTH     r0,r0                 ;647
0000fa  f7fffffe          BL       ST7789_DrawLine
0000fe  42a6              CMP      r6,r4                 ;649
000100  dbb8              BLT      |L2.116|
;;;664    	}
;;;665    	ST7789_UnSelect();
000102  b003              ADD      sp,sp,#0xc
000104  2201              MOVS     r2,#1
000106  e8bd4ff0          POP      {r4-r11,lr}
00010a  0311              LSLS     r1,r2,#12
00010c  4801              LDR      r0,|L2.276|
00010e  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;666    }
;;;667    
                          ENDP

000112  0000              DCW      0x0000
                  |L2.276|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawFilledRectangle||, CODE, READONLY, ALIGN=2

                  ST7789_DrawFilledRectangle PROC
;;;514     */
;;;515    void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;516    {
;;;517    	ST7789_Select();
000004  f8dfb074          LDR      r11,|L3.124|
000008  4690              MOV      r8,r2                 ;516
00000a  460d              MOV      r5,r1                 ;516
00000c  4606              MOV      r6,r0                 ;516
00000e  f44f5a80          MOV      r10,#0x1000
000012  461f              MOV      r7,r3                 ;516
000014  2200              MOVS     r2,#0
000016  4651              MOV      r1,r10
000018  4658              MOV      r0,r11
00001a  f8dd9028          LDR      r9,[sp,#0x28]
00001e  f7fffffe          BL       HAL_GPIO_WritePin
;;;518    	uint8_t i;
;;;519    
;;;520    	/* Check input parameters */
;;;521    	if (x >= ST7789_WIDTH ||
000022  2ef0              CMP      r6,#0xf0
000024  d227              BCS      |L3.118|
;;;522    		y >= ST7789_HEIGHT) {
000026  2df0              CMP      r5,#0xf0
000028  d225              BCS      |L3.118|
;;;523    		/* Return error */
;;;524    		return;
;;;525    	}
;;;526    
;;;527    	/* Check width and height */
;;;528    	if ((x + w) >= ST7789_WIDTH) {
00002a  eb060008          ADD      r0,r6,r8
00002e  28f0              CMP      r0,#0xf0
000030  d303              BCC      |L3.58|
;;;529    		w = ST7789_WIDTH - x;
000032  f1c600f0          RSB      r0,r6,#0xf0
000036  fa1ff880          UXTH     r8,r0
                  |L3.58|
;;;530    	}
;;;531    	if ((y + h) >= ST7789_HEIGHT) {
00003a  19e8              ADDS     r0,r5,r7
00003c  28f0              CMP      r0,#0xf0
00003e  d302              BCC      |L3.70|
;;;532    		h = ST7789_HEIGHT - y;
000040  f1c500f0          RSB      r0,r5,#0xf0
000044  b287              UXTH     r7,r0
                  |L3.70|
;;;533    	}
;;;534    
;;;535    	/* Draw lines */
;;;536    	for (i = 0; i <= h; i++) {
000046  2400              MOVS     r4,#0
000048  44b0              ADD      r8,r8,r6              ;528
00004a  e00b              B        |L3.100|
                  |L3.76|
;;;537    		/* Draw lines */
;;;538    		ST7789_DrawLine(x, y + i, x + w, y + i, color);
00004c  1928              ADDS     r0,r5,r4
00004e  b283              UXTH     r3,r0
000050  b281              UXTH     r1,r0
000052  fa1ff288          UXTH     r2,r8
000056  4630              MOV      r0,r6
000058  f8cd9000          STR      r9,[sp,#0]
00005c  f7fffffe          BL       ST7789_DrawLine
000060  1c64              ADDS     r4,r4,#1
000062  b2e4              UXTB     r4,r4                 ;536
                  |L3.100|
000064  42bc              CMP      r4,r7                 ;536
000066  d9f1              BLS      |L3.76|
;;;539    	}
;;;540    	ST7789_UnSelect();
000068  4651              MOV      r1,r10
00006a  4658              MOV      r0,r11
00006c  e8bd4ff8          POP      {r3-r11,lr}
000070  2201              MOVS     r2,#1
000072  f7ffbffe          B.W      HAL_GPIO_WritePin
                  |L3.118|
;;;541    }
000076  e8bd8ff8          POP      {r3-r11,pc}
;;;542    
                          ENDP

00007a  0000              DCW      0x0000
                  |L3.124|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawFilledTriangle||, CODE, READONLY, ALIGN=2

                  ST7789_DrawFilledTriangle PROC
;;;564     */
;;;565    void ST7789_DrawFilledTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;566    {
000004  4691              MOV      r9,r2
000006  4688              MOV      r8,r1
000008  4604              MOV      r4,r0
00000a  469a              MOV      r10,r3
;;;567    	ST7789_Select();
00000c  2200              MOVS     r2,#0
00000e  f44f5180          MOV      r1,#0x1000
000012  4831              LDR      r0,|L4.216|
000014  f7fffffe          BL       HAL_GPIO_WritePin
;;;568    	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
;;;569    			yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
;;;570    			curpixel = 0;
000018  2700              MOVS     r7,#0
;;;571    
;;;572    	deltax = ABS(x2 - x1);
00001a  eba90004          SUB      r0,r9,r4
00001e  2800              CMP      r0,#0
000020  dc01              BGT      |L4.38|
000022  eba40009          SUB      r0,r4,r9
                  |L4.38|
000026  b201              SXTH     r1,r0
;;;573    	deltay = ABS(y2 - y1);
000028  ebaa0008          SUB      r0,r10,r8
00002c  2800              CMP      r0,#0
00002e  dc01              BGT      |L4.52|
000030  eba8000a          SUB      r0,r8,r10
                  |L4.52|
000034  b200              SXTH     r0,r0
;;;574    	x = x1;
000036  b226              SXTH     r6,r4
;;;575    	y = y1;
000038  fa0ff588          SXTH     r5,r8
;;;576    
;;;577    	if (x2 >= x1) {
;;;578    		xinc1 = 1;
;;;579    		xinc2 = 1;
;;;580    	}
;;;581    	else {
;;;582    		xinc1 = -1;
00003c  f04f32ff          MOV      r2,#0xffffffff
000040  45a1              CMP      r9,r4                 ;577
000042  d303              BCC      |L4.76|
000044  f04f0b01          MOV      r11,#1                ;578
000048  46d9              MOV      r9,r11                ;579
00004a  e001              B        |L4.80|
                  |L4.76|
00004c  4693              MOV      r11,r2
;;;583    		xinc2 = -1;
00004e  46d9              MOV      r9,r11
                  |L4.80|
;;;584    	}
;;;585    
;;;586    	if (y2 >= y1) {
000050  45c2              CMP      r10,r8
000052  d302              BCC      |L4.90|
;;;587    		yinc1 = 1;
000054  2201              MOVS     r2,#1
;;;588    		yinc2 = 1;
000056  9201              STR      r2,[sp,#4]
000058  e000              B        |L4.92|
                  |L4.90|
;;;589    	}
;;;590    	else {
;;;591    		yinc1 = -1;
00005a  9201              STR      r2,[sp,#4]
                  |L4.92|
;;;592    		yinc2 = -1;
00005c  4692              MOV      r10,r2
;;;593    	}
;;;594    
;;;595    	if (deltax >= deltay) {
00005e  4281              CMP      r1,r0
;;;596    		xinc1 = 0;
;;;597    		yinc2 = 0;
;;;598    		den = deltax;
;;;599    		num = deltax / 2;
;;;600    		numadd = deltay;
;;;601    		numpixels = deltax;
;;;602    	}
;;;603    	else {
;;;604    		xinc2 = 0;
000060  f04f0200          MOV      r2,#0
000064  db07              BLT      |L4.118|
000066  4693              MOV      r11,r2                ;596
000068  4692              MOV      r10,r2                ;597
00006a  eb0172d1          ADD      r2,r1,r1,LSR #31      ;599
00006e  1054              ASRS     r4,r2,#1              ;599
000070  4688              MOV      r8,r1                 ;601
000072  9002              STR      r0,[sp,#8]            ;601
000074  e026              B        |L4.196|
                  |L4.118|
000076  4691              MOV      r9,r2
;;;605    		yinc1 = 0;
000078  2200              MOVS     r2,#0
;;;606    		den = deltay;
;;;607    		num = deltay / 2;
00007a  9201              STR      r2,[sp,#4]
00007c  eb0072d0          ADD      r2,r0,r0,LSR #31
000080  1054              ASRS     r4,r2,#1
;;;608    		numadd = deltax;
;;;609    		numpixels = deltay;
000082  4680              MOV      r8,r0
000084  9102              STR      r1,[sp,#8]
000086  e01d              B        |L4.196|
                  |L4.136|
;;;610    	}
;;;611    
;;;612    	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
;;;613    		ST7789_DrawLine(x, y, x3, y3, color);
000088  980e              LDR      r0,[sp,#0x38]
00008a  e9dd230c          LDRD     r2,r3,[sp,#0x30]
00008e  9000              STR      r0,[sp,#0]
000090  b2a9              UXTH     r1,r5
000092  b2b0              UXTH     r0,r6
000094  f7fffffe          BL       ST7789_DrawLine
;;;614    
;;;615    		num += numadd;
000098  9802              LDR      r0,[sp,#8]
00009a  4420              ADD      r0,r0,r4
00009c  b204              SXTH     r4,r0
;;;616    		if (num >= den) {
00009e  4544              CMP      r4,r8
0000a0  db08              BLT      |L4.180|
;;;617    			num -= den;
0000a2  eba40008          SUB      r0,r4,r8
0000a6  b204              SXTH     r4,r0
;;;618    			x += xinc1;
0000a8  eb06000b          ADD      r0,r6,r11
0000ac  b206              SXTH     r6,r0
;;;619    			y += yinc1;
0000ae  9801              LDR      r0,[sp,#4]
0000b0  4428              ADD      r0,r0,r5
0000b2  b205              SXTH     r5,r0
                  |L4.180|
;;;620    		}
;;;621    		x += xinc2;
0000b4  eb060009          ADD      r0,r6,r9
0000b8  b206              SXTH     r6,r0
;;;622    		y += yinc2;
0000ba  eb05000a          ADD      r0,r5,r10
0000be  1c7f              ADDS     r7,r7,#1
0000c0  b205              SXTH     r5,r0
0000c2  b23f              SXTH     r7,r7                 ;612
                  |L4.196|
0000c4  4547              CMP      r7,r8                 ;612
0000c6  dddf              BLE      |L4.136|
;;;623    	}
;;;624    	ST7789_UnSelect();
0000c8  b003              ADD      sp,sp,#0xc
0000ca  2201              MOVS     r2,#1
0000cc  e8bd4ff0          POP      {r4-r11,lr}
0000d0  0311              LSLS     r1,r2,#12
0000d2  4801              LDR      r0,|L4.216|
0000d4  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;625    }
;;;626    
                          ENDP

                  |L4.216|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawImage||, CODE, READONLY, ALIGN=2

                  ST7789_DrawImage PROC
;;;416     */
;;;417    void ST7789_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t *data)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;418    {
000004  4698              MOV      r8,r3
000006  4691              MOV      r9,r2
000008  460c              MOV      r4,r1
00000a  4605              MOV      r5,r0
;;;419    	if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT))
00000c  28f0              CMP      r0,#0xf0
00000e  d228              BCS      |L5.98|
000010  2cf0              CMP      r4,#0xf0
000012  d226              BCS      |L5.98|
;;;420    		return;
;;;421    	if ((x + w - 1) >= ST7789_WIDTH)
000014  eb050709          ADD      r7,r5,r9
000018  1e7f              SUBS     r7,r7,#1
00001a  2ff0              CMP      r7,#0xf0
00001c  da21              BGE      |L5.98|
;;;422    		return;
;;;423    	if ((y + h - 1) >= ST7789_HEIGHT)
00001e  eb040608          ADD      r6,r4,r8
000022  1e76              SUBS     r6,r6,#1
000024  2ef0              CMP      r6,#0xf0
000026  da1c              BGE      |L5.98|
;;;424    		return;
;;;425    
;;;426    	ST7789_Select();
000028  f8dfb03c          LDR      r11,|L5.104|
00002c  f44f5a80          MOV      r10,#0x1000
000030  2200              MOVS     r2,#0
000032  4651              MOV      r1,r10
000034  4658              MOV      r0,r11
000036  f7fffffe          BL       HAL_GPIO_WritePin
;;;427    	ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
00003a  b2b3              UXTH     r3,r6
00003c  b2ba              UXTH     r2,r7
00003e  4621              MOV      r1,r4
000040  4628              MOV      r0,r5
000042  f7fffffe          BL       ST7789_SetAddressWindow
;;;428    	ST7789_WriteData((uint8_t *)data, sizeof(uint16_t) * w * h);
000046  ea4f0149          LSL      r1,r9,#1
00004a  fb01f108          MUL      r1,r1,r8
00004e  980a              LDR      r0,[sp,#0x28]
000050  f7fffffe          BL       ST7789_WriteData
;;;429    	ST7789_UnSelect();
000054  4651              MOV      r1,r10
000056  4658              MOV      r0,r11
000058  e8bd5ff0          POP      {r4-r12,lr}
00005c  2201              MOVS     r2,#1
00005e  f7ffbffe          B.W      HAL_GPIO_WritePin
                  |L5.98|
;;;430    }
000062  e8bd9ff0          POP      {r4-r12,pc}
;;;431    
                          ENDP

000066  0000              DCW      0x0000
                  |L5.104|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawLine||, CODE, READONLY, ALIGN=2

                  ST7789_DrawLine PROC
;;;294     */
;;;295    void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;296            uint16_t color) {
000004  460c              MOV      r4,r1
000006  4606              MOV      r6,r0
;;;297    	uint16_t swap;
;;;298        uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
000008  1b18              SUBS     r0,r3,r4
00000a  4615              MOV      r5,r2                 ;296
00000c  2800              CMP      r0,#0
00000e  dc00              BGT      |L6.18|
000010  1ae0              SUBS     r0,r4,r3
                  |L6.18|
000012  1ba9              SUBS     r1,r5,r6
000014  2900              CMP      r1,#0
000016  dc00              BGT      |L6.26|
000018  1b71              SUBS     r1,r6,r5
                  |L6.26|
00001a  4288              CMP      r0,r1
00001c  dd07              BLE      |L6.46|
;;;299        if (steep) {
;;;300    		swap = x0;
00001e  4630              MOV      r0,r6
;;;301    		x0 = y0;
000020  4626              MOV      r6,r4
;;;302    		y0 = swap;
;;;303    
;;;304    		swap = x1;
;;;305    		x1 = y1;
000022  461d              MOV      r5,r3
000024  f04f0801          MOV      r8,#1                 ;298
000028  4604              MOV      r4,r0                 ;302
;;;306    		y1 = swap;
00002a  4613              MOV      r3,r2
00002c  e001              B        |L6.50|
                  |L6.46|
00002e  f04f0800          MOV      r8,#0                 ;298
                  |L6.50|
;;;307            //_swap_int16_t(x0, y0);
;;;308            //_swap_int16_t(x1, y1);
;;;309        }
;;;310    
;;;311        if (x0 > x1) {
000032  42ae              CMP      r6,r5
000034  d905              BLS      |L6.66|
;;;312    		swap = x0;
000036  4630              MOV      r0,r6
;;;313    		x0 = x1;
000038  462e              MOV      r6,r5
;;;314    		x1 = swap;
00003a  4605              MOV      r5,r0
;;;315    
;;;316    		swap = y0;
00003c  4620              MOV      r0,r4
;;;317    		y0 = y1;
00003e  461c              MOV      r4,r3
;;;318    		y1 = swap;
000040  4603              MOV      r3,r0
                  |L6.66|
;;;319            //_swap_int16_t(x0, x1);
;;;320            //_swap_int16_t(y0, y1);
;;;321        }
;;;322    
;;;323        int16_t dx, dy;
;;;324        dx = x1 - x0;
000042  1ba8              SUBS     r0,r5,r6
000044  fa0ff980          SXTH     r9,r0
;;;325        dy = ABS(y1 - y0);
000048  1b18              SUBS     r0,r3,r4
00004a  2800              CMP      r0,#0
00004c  dc00              BGT      |L6.80|
00004e  1ae0              SUBS     r0,r4,r3
                  |L6.80|
000050  fa0ffb80          SXTH     r11,r0
;;;326    
;;;327        int16_t err = dx / 2;
000054  eb0970d9          ADD      r0,r9,r9,LSR #31
000058  1047              ASRS     r7,r0,#1
;;;328        int16_t ystep;
;;;329    
;;;330        if (y0 < y1) {
00005a  429c              CMP      r4,r3
00005c  d201              BCS      |L6.98|
;;;331            ystep = 1;
00005e  2001              MOVS     r0,#1
000060  e001              B        |L6.102|
                  |L6.98|
;;;332        } else {
;;;333            ystep = -1;
000062  f04f30ff          MOV      r0,#0xffffffff
                  |L6.102|
000066  4682              MOV      r10,r0                ;331
000068  e018              B        |L6.156|
;;;334        }
;;;335    
;;;336        for (; x0<=x1; x0++) {
;;;337            if (steep) {
00006a  bf00              NOP      
                  |L6.108|
00006c  9a0a              LDR      r2,[sp,#0x28]
00006e  f1b80f00          CMP      r8,#0
000072  d002              BEQ      |L6.122|
;;;338                ST7789_DrawPixel(y0, x0, color);
000074  4631              MOV      r1,r6
000076  4620              MOV      r0,r4
000078  e001              B        |L6.126|
                  |L6.122|
;;;339            } else {
;;;340                ST7789_DrawPixel(x0, y0, color);
00007a  4621              MOV      r1,r4
00007c  4630              MOV      r0,r6
                  |L6.126|
00007e  f7fffffe          BL       ST7789_DrawPixel
;;;341            }
;;;342            err -= dy;
000082  eba7000b          SUB      r0,r7,r11
000086  b207              SXTH     r7,r0
;;;343            if (err < 0) {
000088  2f00              CMP      r7,#0
00008a  da05              BGE      |L6.152|
;;;344                y0 += ystep;
00008c  eb04000a          ADD      r0,r4,r10
000090  b284              UXTH     r4,r0
;;;345                err += dx;
000092  eb070009          ADD      r0,r7,r9
000096  b207              SXTH     r7,r0
                  |L6.152|
000098  1c76              ADDS     r6,r6,#1
00009a  b2b6              UXTH     r6,r6                 ;336
                  |L6.156|
00009c  42ae              CMP      r6,r5                 ;336
00009e  d9e5              BLS      |L6.108|
;;;346            }
;;;347        }
;;;348    }
0000a0  e8bd9ff0          POP      {r4-r12,pc}
;;;349    
                          ENDP


                          AREA ||i.ST7789_DrawPixel||, CODE, READONLY, ALIGN=2

                  ST7789_DrawPixel PROC
;;;238     */
;;;239    void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
000000  b538              PUSH     {r3-r5,lr}
;;;240    {
000002  4614              MOV      r4,r2
;;;241    	if ((x < 0) || (x >= ST7789_WIDTH) ||
000004  28f0              CMP      r0,#0xf0
000006  d21b              BCS      |L7.64|
;;;242    		 (y < 0) || (y >= ST7789_HEIGHT))	return;
000008  29f0              CMP      r1,#0xf0
00000a  d219              BCS      |L7.64|
;;;243    	
;;;244    	ST7789_SetAddressWindow(x, y, x, y);
00000c  460b              MOV      r3,r1
00000e  4602              MOV      r2,r0
000010  f7fffffe          BL       ST7789_SetAddressWindow
;;;245    	uint8_t data[] = {color >> 8, color & 0xFF};
000014  0a20              LSRS     r0,r4,#8
000016  f88d0000          STRB     r0,[sp,#0]
00001a  f88d4001          STRB     r4,[sp,#1]
;;;246    	ST7789_Select();
00001e  4d09              LDR      r5,|L7.68|
000020  f44f5480          MOV      r4,#0x1000
000024  2200              MOVS     r2,#0
000026  4621              MOV      r1,r4
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       HAL_GPIO_WritePin
;;;247    	ST7789_WriteData(data, sizeof(data));
00002e  2102              MOVS     r1,#2
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       ST7789_WriteData
;;;248    	ST7789_UnSelect();
000036  2201              MOVS     r2,#1
000038  4621              MOV      r1,r4
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       HAL_GPIO_WritePin
                  |L7.64|
;;;249    }
000040  bd38              POP      {r3-r5,pc}
;;;250    
                          ENDP

000042  0000              DCW      0x0000
                  |L7.68|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawPixel_4px||, CODE, READONLY, ALIGN=2

                  ST7789_DrawPixel_4px PROC
;;;278     */
;;;279    void ST7789_DrawPixel_4px(uint16_t x, uint16_t y, uint16_t color)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;280    {
000004  4690              MOV      r8,r2
000006  460c              MOV      r4,r1
000008  0005              MOVS     r5,r0
00000a  d020              BEQ      |L8.78|
;;;281    	if ((x <= 0) || (x > ST7789_WIDTH) ||
00000c  2df0              CMP      r5,#0xf0
00000e  d81e              BHI      |L8.78|
;;;282    		 (y <= 0) || (y > ST7789_HEIGHT))	return;
000010  2c00              CMP      r4,#0
000012  d01c              BEQ      |L8.78|
000014  2cf0              CMP      r4,#0xf0
000016  d81a              BHI      |L8.78|
;;;283    	ST7789_Select();
000018  4f0e              LDR      r7,|L8.84|
00001a  f44f5680          MOV      r6,#0x1000
00001e  2200              MOVS     r2,#0
000020  4631              MOV      r1,r6
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       HAL_GPIO_WritePin
;;;284    	ST7789_Fill(x - 1, y - 1, x + 1, y + 1, color);
000028  1c60              ADDS     r0,r4,#1
00002a  b283              UXTH     r3,r0
00002c  1c68              ADDS     r0,r5,#1
00002e  b282              UXTH     r2,r0
000030  1e64              SUBS     r4,r4,#1
000032  1e6d              SUBS     r5,r5,#1
000034  b2a1              UXTH     r1,r4
000036  b2a8              UXTH     r0,r5
000038  f8cd8000          STR      r8,[sp,#0]
00003c  f7fffffe          BL       ST7789_Fill
;;;285    	ST7789_UnSelect();
000040  4631              MOV      r1,r6
000042  4638              MOV      r0,r7
000044  e8bd43f8          POP      {r3-r9,lr}
000048  2201              MOVS     r2,#1
00004a  f7ffbffe          B.W      HAL_GPIO_WritePin
                  |L8.78|
;;;286    }
00004e  e8bd83f8          POP      {r3-r9,pc}
;;;287    
                          ENDP

000052  0000              DCW      0x0000
                  |L8.84|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawRectangle||, CODE, READONLY, ALIGN=2

                  ST7789_DrawRectangle PROC
;;;355     */
;;;356    void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;357    {
;;;358    	ST7789_Select();
000004  4f17              LDR      r7,|L9.100|
000006  4690              MOV      r8,r2                 ;357
000008  468a              MOV      r10,r1                ;357
00000a  4681              MOV      r9,r0                 ;357
00000c  f44f5680          MOV      r6,#0x1000
000010  461d              MOV      r5,r3                 ;357
000012  2200              MOVS     r2,#0
000014  4631              MOV      r1,r6
000016  4638              MOV      r0,r7
000018  9c0a              LDR      r4,[sp,#0x28]
00001a  f7fffffe          BL       HAL_GPIO_WritePin
;;;359    	ST7789_DrawLine(x1, y1, x2, y1, color);
00001e  4653              MOV      r3,r10
000020  4642              MOV      r2,r8
000022  4619              MOV      r1,r3
000024  4648              MOV      r0,r9
000026  9400              STR      r4,[sp,#0]
000028  f7fffffe          BL       ST7789_DrawLine
;;;360    	ST7789_DrawLine(x1, y1, x1, y2, color);
00002c  464a              MOV      r2,r9
00002e  462b              MOV      r3,r5
000030  4651              MOV      r1,r10
000032  4610              MOV      r0,r2
000034  9400              STR      r4,[sp,#0]
000036  f7fffffe          BL       ST7789_DrawLine
;;;361    	ST7789_DrawLine(x1, y2, x2, y2, color);
00003a  462b              MOV      r3,r5
00003c  4642              MOV      r2,r8
00003e  4619              MOV      r1,r3
000040  4648              MOV      r0,r9
000042  9400              STR      r4,[sp,#0]
000044  f7fffffe          BL       ST7789_DrawLine
;;;362    	ST7789_DrawLine(x2, y1, x2, y2, color);
000048  4642              MOV      r2,r8
00004a  462b              MOV      r3,r5
00004c  4651              MOV      r1,r10
00004e  4610              MOV      r0,r2
000050  9400              STR      r4,[sp,#0]
000052  f7fffffe          BL       ST7789_DrawLine
;;;363    	ST7789_UnSelect();
000056  4631              MOV      r1,r6
000058  4638              MOV      r0,r7
00005a  e8bd4ff8          POP      {r3-r11,lr}
00005e  2201              MOVS     r2,#1
000060  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;364    }
;;;365    
                          ENDP

                  |L9.100|
                          DCD      0x40010c00

                          AREA ||i.ST7789_DrawTriangle||, CODE, READONLY, ALIGN=2

                  ST7789_DrawTriangle PROC
;;;548     */
;;;549    void ST7789_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint16_t color)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;550    {
000004  b081              SUB      sp,sp,#4
;;;551    	ST7789_Select();
000006  4f16              LDR      r7,|L10.96|
000008  e9dd540f          LDRD     r5,r4,[sp,#0x3c]      ;550
00000c  4689              MOV      r9,r1                 ;550
00000e  4682              MOV      r10,r0                ;550
000010  f44f5680          MOV      r6,#0x1000
000014  469b              MOV      r11,r3                ;550
000016  2200              MOVS     r2,#0
000018  4631              MOV      r1,r6
00001a  4638              MOV      r0,r7
00001c  f8dd8038          LDR      r8,[sp,#0x38]
000020  f7fffffe          BL       HAL_GPIO_WritePin
;;;552    	/* Draw lines */
;;;553    	ST7789_DrawLine(x1, y1, x2, y2, color);
000024  465b              MOV      r3,r11
000026  9400              STR      r4,[sp,#0]
000028  4649              MOV      r1,r9
00002a  4650              MOV      r0,r10
00002c  9a03              LDR      r2,[sp,#0xc]
00002e  f7fffffe          BL       ST7789_DrawLine
;;;554    	ST7789_DrawLine(x2, y2, x3, y3, color);
000032  462b              MOV      r3,r5
000034  4642              MOV      r2,r8
000036  4659              MOV      r1,r11
000038  9400              STR      r4,[sp,#0]
00003a  9803              LDR      r0,[sp,#0xc]
00003c  f7fffffe          BL       ST7789_DrawLine
;;;555    	ST7789_DrawLine(x3, y3, x1, y1, color);
000040  464b              MOV      r3,r9
000042  4652              MOV      r2,r10
000044  4629              MOV      r1,r5
000046  4640              MOV      r0,r8
000048  9400              STR      r4,[sp,#0]
00004a  f7fffffe          BL       ST7789_DrawLine
;;;556    	ST7789_UnSelect();
00004e  b005              ADD      sp,sp,#0x14
000050  4631              MOV      r1,r6
000052  4638              MOV      r0,r7
000054  e8bd4ff0          POP      {r4-r11,lr}
000058  2201              MOVS     r2,#1
00005a  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;557    }
;;;558    
                          ENDP

00005e  0000              DCW      0x0000
                  |L10.96|
                          DCD      0x40010c00

                          AREA ||i.ST7789_Fill||, CODE, READONLY, ALIGN=2

                  ST7789_Fill PROC
;;;257     */
;;;258    void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;259    {
000004  461f              MOV      r7,r3
;;;260    	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
000006  9d0a              LDR      r5,[sp,#0x28]
000008  4616              MOV      r6,r2                 ;259
00000a  460c              MOV      r4,r1                 ;259
00000c  4682              MOV      r10,r0                ;259
00000e  2af0              CMP      r2,#0xf0
000010  d22d              BCS      |L11.110|
;;;261    		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
000012  2ff0              CMP      r7,#0xf0
000014  d22b              BCS      |L11.110|
;;;262    	ST7789_Select();
000016  f44f5b80          MOV      r11,#0x1000
00001a  2200              MOVS     r2,#0
00001c  4659              MOV      r1,r11
00001e  4815              LDR      r0,|L11.116|
000020  f7fffffe          BL       HAL_GPIO_WritePin
;;;263    	uint16_t i, j;
;;;264    	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
000024  463b              MOV      r3,r7
000026  4632              MOV      r2,r6
000028  4621              MOV      r1,r4
00002a  4650              MOV      r0,r10
00002c  f7fffffe          BL       ST7789_SetAddressWindow
;;;265    	for (i = ySta; i <= yEnd; i++)
;;;266    		for (j = xSta; j <= xEnd; j++) {
;;;267    			uint8_t data[] = {color >> 8, color & 0xFF};
000030  ea4f2915          LSR      r9,r5,#8
000034  f00508ff          AND      r8,r5,#0xff
000038  e010              B        |L11.92|
                  |L11.58|
00003a  4655              MOV      r5,r10                ;266
00003c  e00a              B        |L11.84|
00003e  bf00              NOP      
                  |L11.64|
000040  f88d9000          STRB     r9,[sp,#0]
000044  f88d8001          STRB     r8,[sp,#1]
;;;268    			ST7789_WriteData(data, sizeof(data));
000048  2102              MOVS     r1,#2
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       ST7789_WriteData
000050  1c6d              ADDS     r5,r5,#1
000052  b2ad              UXTH     r5,r5                 ;266
                  |L11.84|
000054  42b5              CMP      r5,r6                 ;266
000056  d9f3              BLS      |L11.64|
000058  1c64              ADDS     r4,r4,#1              ;266
00005a  b2a4              UXTH     r4,r4                 ;265
                  |L11.92|
00005c  42bc              CMP      r4,r7                 ;265
00005e  d9ec              BLS      |L11.58|
;;;269    		}
;;;270    	ST7789_UnSelect();
000060  4659              MOV      r1,r11
000062  e8bd4ff8          POP      {r3-r11,lr}
000066  2201              MOVS     r2,#1
000068  4802              LDR      r0,|L11.116|
00006a  f7ffbffe          B.W      HAL_GPIO_WritePin
                  |L11.110|
;;;271    }
00006e  e8bd8ff8          POP      {r3-r11,pc}
;;;272    
                          ENDP

000072  0000              DCW      0x0000
                  |L11.116|
                          DCD      0x40010c00

                          AREA ||i.ST7789_Fill_Color||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  ST7789_Fill_Color PROC
;;;205     */
;;;206    void ST7789_Fill_Color(uint16_t color)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;207    {
;;;208    	uint16_t i = 0, j = 0, z = 0;
000004  2500              MOVS     r5,#0
000006  4606              MOV      r6,r0                 ;207
;;;209    	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
000008  23ef              MOVS     r3,#0xef
00000a  462c              MOV      r4,r5                 ;208
00000c  461a              MOV      r2,r3
00000e  4629              MOV      r1,r5
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       ST7789_SetAddressWindow
;;;210    	ST7789_Select();
000016  f8dfa054          LDR      r10,|L12.108|
00001a  f44f5980          MOV      r9,#0x1000
00001e  2200              MOVS     r2,#0
000020  4649              MOV      r1,r9
000022  4650              MOV      r0,r10
000024  f7fffffe          BL       HAL_GPIO_WritePin
;;;211    
;;;212    	#ifdef USE_DMA
;;;213    		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
;;;214    		{
;;;215    			memset(disp_buf, color, sizeof(disp_buf));
;;;216    			ST7789_WriteData(disp_buf, sizeof(disp_buf));
;;;217    		}
;;;218    	#else
;;;219    			for (i = 0; i < ST7789_WIDTH; i++)
;;;220    			{
;;;221    				for (j = 0; j < ST7789_HEIGHT; j++) 
;;;222    				{
;;;223    					uint8_t data[] = {color >> 8, color & 0xFF};
000028  ea4f2816          LSR      r8,r6,#8
00002c  b2f7              UXTB     r7,r6
                  |L12.46|
00002e  2600              MOVS     r6,#0                 ;221
                  |L12.48|
000030  f88d8000          STRB     r8,[sp,#0]
000034  f88d7001          STRB     r7,[sp,#1]
;;;224    					ST7789_WriteData(data, sizeof(data));
000038  2102              MOVS     r1,#2
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       ST7789_WriteData
000040  1c64              ADDS     r4,r4,#1
;;;225    					z++;
000042  1c76              ADDS     r6,r6,#1
000044  b2b6              UXTH     r6,r6                 ;221
000046  b2a4              UXTH     r4,r4
000048  2ef0              CMP      r6,#0xf0              ;221
00004a  d3f1              BCC      |L12.48|
00004c  1c6d              ADDS     r5,r5,#1              ;221
00004e  b2ad              UXTH     r5,r5                 ;219
000050  2df0              CMP      r5,#0xf0              ;219
000052  d3ec              BCC      |L12.46|
;;;226    				}
;;;227    			}
;;;228    	#endif
;;;229    			printf("------------z = %04d\n\r", z);
000054  4621              MOV      r1,r4
000056  a006              ADR      r0,|L12.112|
000058  f7fffffe          BL       __2printf
;;;230    	ST7789_UnSelect();
00005c  4649              MOV      r1,r9
00005e  4650              MOV      r0,r10
000060  e8bd4ff8          POP      {r3-r11,lr}
000064  2201              MOVS     r2,#1
000066  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;231    }
;;;232    
                          ENDP

00006a  0000              DCW      0x0000
                  |L12.108|
                          DCD      0x40010c00
                  |L12.112|
000070  2d2d2d2d          DCB      "------------z = %04d\n\r",0
000074  2d2d2d2d
000078  2d2d2d2d
00007c  7a203d20
000080  25303464
000084  0a0d00  
000087  00                DCB      0

                          AREA ||i.ST7789_Init||, CODE, READONLY, ALIGN=2

                  ST7789_Init PROC
;;;143     */
;;;144    void ST7789_Init(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;145    {
;;;146    	#ifdef USE_DMA
;;;147    		memset(disp_buf, 0, sizeof(disp_buf));
;;;148    	#endif
;;;149    	HAL_Delay(10);
000002  200a              MOVS     r0,#0xa
000004  f7fffffe          BL       HAL_Delay
;;;150      LCD_RESET_SET();
000008  f7fffffe          BL       LCD_RESET_SET
;;;151    
;;;152    	ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
00000c  203a              MOVS     r0,#0x3a
00000e  f7fffffe          BL       ST7789_WriteCommand
;;;153        ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
000012  2055              MOVS     r0,#0x55
000014  f7fffffe          BL       ST7789_WriteSmallData
;;;154      	ST7789_WriteCommand(0xB2);				//	Porch control
000018  20b2              MOVS     r0,#0xb2
00001a  f7fffffe          BL       ST7789_WriteCommand
;;;155    	{
;;;156    		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
00001e  a135              ADR      r1,|L13.244|
000020  e9d10100          LDRD     r0,r1,[r1,#0]
000024  e9cd0100          STRD     r0,r1,[sp,#0]
;;;157    		ST7789_WriteData(data, sizeof(data));
000028  2105              MOVS     r1,#5
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       ST7789_WriteData
;;;158    	}
;;;159    	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
000030  2002              MOVS     r0,#2
000032  f7fffffe          BL       ST7789_SetRotation
;;;160    	
;;;161    	/* Internal LCD Voltage generator settings */
;;;162        ST7789_WriteCommand(0XB7);				//	Gate Control
000036  20b7              MOVS     r0,#0xb7
000038  f7fffffe          BL       ST7789_WriteCommand
;;;163        ST7789_WriteSmallData(0x35);			//	Default value
00003c  2035              MOVS     r0,#0x35
00003e  f7fffffe          BL       ST7789_WriteSmallData
;;;164        ST7789_WriteCommand(0xBB);				//	VCOM setting
000042  20bb              MOVS     r0,#0xbb
000044  f7fffffe          BL       ST7789_WriteCommand
;;;165        ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
000048  2019              MOVS     r0,#0x19
00004a  f7fffffe          BL       ST7789_WriteSmallData
;;;166        ST7789_WriteCommand(0xC0);				//	LCMCTRL	
00004e  20c0              MOVS     r0,#0xc0
000050  f7fffffe          BL       ST7789_WriteCommand
;;;167        ST7789_WriteSmallData (0x2C);			//	Default value
000054  202c              MOVS     r0,#0x2c
000056  f7fffffe          BL       ST7789_WriteSmallData
;;;168        ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
00005a  20c2              MOVS     r0,#0xc2
00005c  f7fffffe          BL       ST7789_WriteCommand
;;;169        ST7789_WriteSmallData (0x01);			//	Default value
000060  2001              MOVS     r0,#1
000062  f7fffffe          BL       ST7789_WriteSmallData
;;;170        ST7789_WriteCommand (0xC3);				//	VRH set
000066  20c3              MOVS     r0,#0xc3
000068  f7fffffe          BL       ST7789_WriteCommand
;;;171        ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
00006c  2012              MOVS     r0,#0x12
00006e  f7fffffe          BL       ST7789_WriteSmallData
;;;172        ST7789_WriteCommand (0xC4);				//	VDV set
000072  20c4              MOVS     r0,#0xc4
000074  f7fffffe          BL       ST7789_WriteCommand
;;;173        ST7789_WriteSmallData (0x20);			//	Default value
000078  2020              MOVS     r0,#0x20
00007a  f7fffffe          BL       ST7789_WriteSmallData
;;;174        ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
00007e  20c6              MOVS     r0,#0xc6
000080  f7fffffe          BL       ST7789_WriteCommand
;;;175        ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
000084  200f              MOVS     r0,#0xf
000086  f7fffffe          BL       ST7789_WriteSmallData
;;;176        ST7789_WriteCommand (0xD0);				//	Power control
00008a  20d0              MOVS     r0,#0xd0
00008c  f7fffffe          BL       ST7789_WriteCommand
;;;177        ST7789_WriteSmallData (0xA4);			//	Default value
000090  20a4              MOVS     r0,#0xa4
000092  f7fffffe          BL       ST7789_WriteSmallData
;;;178        ST7789_WriteSmallData (0xA1);			//	Default value
000096  20a1              MOVS     r0,#0xa1
000098  f7fffffe          BL       ST7789_WriteSmallData
;;;179    	/**************** Division line ****************/
;;;180    
;;;181    	ST7789_WriteCommand(0xE0);
00009c  20e0              MOVS     r0,#0xe0
00009e  f7fffffe          BL       ST7789_WriteCommand
;;;182    	{
;;;183    		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
0000a2  a016              ADR      r0,|L13.252|
0000a4  c80f              LDM      r0,{r0-r3}
0000a6  e88d000f          STM      sp,{r0-r3}
;;;184    		ST7789_WriteData(data, sizeof(data));
0000aa  210e              MOVS     r1,#0xe
0000ac  4668              MOV      r0,sp
0000ae  f7fffffe          BL       ST7789_WriteData
;;;185    	}
;;;186    
;;;187        ST7789_WriteCommand(0xE1);
0000b2  20e1              MOVS     r0,#0xe1
0000b4  f7fffffe          BL       ST7789_WriteCommand
;;;188    	{
;;;189    		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
0000b8  a114              ADR      r1,|L13.268|
0000ba  c90f              LDM      r1,{r0-r3}
0000bc  e88d000f          STM      sp,{r0-r3}
;;;190    		ST7789_WriteData(data, sizeof(data));
0000c0  210e              MOVS     r1,#0xe
0000c2  4668              MOV      r0,sp
0000c4  f7fffffe          BL       ST7789_WriteData
;;;191    	}
;;;192        ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
0000c8  2021              MOVS     r0,#0x21
0000ca  f7fffffe          BL       ST7789_WriteCommand
;;;193    	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
0000ce  2011              MOVS     r0,#0x11
0000d0  f7fffffe          BL       ST7789_WriteCommand
;;;194      	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
0000d4  2013              MOVS     r0,#0x13
0000d6  f7fffffe          BL       ST7789_WriteCommand
;;;195      	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
0000da  2029              MOVS     r0,#0x29
0000dc  f7fffffe          BL       ST7789_WriteCommand
;;;196    
;;;197    	HAL_Delay(50);
0000e0  2032              MOVS     r0,#0x32
0000e2  f7fffffe          BL       HAL_Delay
;;;198    	ST7789_Fill_Color(WHITE);				//	Fill with Black.
0000e6  b004              ADD      sp,sp,#0x10
0000e8  f64f70ff          MOV      r0,#0xffff
0000ec  e8bd4010          POP      {r4,lr}
0000f0  f7ffbffe          B.W      ST7789_Fill_Color
;;;199    }
;;;200    
                          ENDP

                  |L13.244|
0000f4  0c0c00            DCB      "\f\f",0
0000f7  333300            DCB      "33",0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L13.252|
0000fc  d0040d11          DCB      208,4,"\r",17,19,"+?TL",24,"\r\v",31,"#",0
000100  132b3f54
000104  4c180d0b
000108  1f2300  
00010b  00                DCB      0
                  |L13.268|
00010c  d0040c11          DCB      208,4,"\f",17,19,",?DQ/",31,31," #",0
000110  132c3f44
000114  512f1f1f
000118  202300  
00011b  00                DCB      0

                          AREA ||i.ST7789_InvertColors||, CODE, READONLY, ALIGN=2

                  ST7789_InvertColors PROC
;;;436     */
;;;437    void ST7789_InvertColors(uint8_t invert)
000000  b570              PUSH     {r4-r6,lr}
;;;438    {
;;;439    	ST7789_Select();
000002  4e0b              LDR      r6,|L14.48|
000004  4604              MOV      r4,r0                 ;438
000006  f44f5580          MOV      r5,#0x1000
00000a  2200              MOVS     r2,#0
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       HAL_GPIO_WritePin
;;;440    	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
000014  b10c              CBZ      r4,|L14.26|
000016  2021              MOVS     r0,#0x21
000018  e000              B        |L14.28|
                  |L14.26|
00001a  2020              MOVS     r0,#0x20
                  |L14.28|
00001c  f7fffffe          BL       ST7789_WriteCommand
;;;441    	ST7789_UnSelect();
000020  4629              MOV      r1,r5
000022  4630              MOV      r0,r6
000024  e8bd4070          POP      {r4-r6,lr}
000028  2201              MOVS     r2,#1
00002a  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;442    }
;;;443    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      0x40010c00

                          AREA ||i.ST7789_SetAddressWindow||, CODE, READONLY, ALIGN=2

                  ST7789_SetAddressWindow PROC
;;;114     */
;;;115    static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;116    {
;;;117    	ST7789_Select();
000004  f8df9070          LDR      r9,|L15.120|
000008  4615              MOV      r5,r2                 ;116
00000a  460e              MOV      r6,r1                 ;116
00000c  4607              MOV      r7,r0                 ;116
00000e  f44f5880          MOV      r8,#0x1000
000012  461c              MOV      r4,r3                 ;116
000014  2200              MOVS     r2,#0
000016  4641              MOV      r1,r8
000018  4648              MOV      r0,r9
00001a  f7fffffe          BL       HAL_GPIO_WritePin
;;;118    	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
;;;119    	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
;;;120    	
;;;121    	/* Column Address set */
;;;122    	ST7789_WriteCommand(ST7789_CASET); 
00001e  202a              MOVS     r0,#0x2a
000020  f7fffffe          BL       ST7789_WriteCommand
;;;123    	{
;;;124    		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
000024  0a38              LSRS     r0,r7,#8
000026  f88d0000          STRB     r0,[sp,#0]
00002a  f88d7001          STRB     r7,[sp,#1]
00002e  0a28              LSRS     r0,r5,#8
000030  f88d0002          STRB     r0,[sp,#2]
000034  f88d5003          STRB     r5,[sp,#3]
;;;125    		ST7789_WriteData(data, sizeof(data));
000038  2104              MOVS     r1,#4
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       ST7789_WriteData
;;;126    	}
;;;127    
;;;128    	/* Row Address set */
;;;129    	ST7789_WriteCommand(ST7789_RASET);
000040  202b              MOVS     r0,#0x2b
000042  f7fffffe          BL       ST7789_WriteCommand
;;;130    	{
;;;131    		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
000046  0a30              LSRS     r0,r6,#8
000048  f88d0000          STRB     r0,[sp,#0]
00004c  f88d6001          STRB     r6,[sp,#1]
000050  0a20              LSRS     r0,r4,#8
000052  f88d0002          STRB     r0,[sp,#2]
000056  f88d4003          STRB     r4,[sp,#3]
;;;132    		ST7789_WriteData(data, sizeof(data));
00005a  2104              MOVS     r1,#4
00005c  4668              MOV      r0,sp
00005e  f7fffffe          BL       ST7789_WriteData
;;;133    	}
;;;134    	/* Write to RAM */
;;;135    	ST7789_WriteCommand(ST7789_RAMWR);
000062  202c              MOVS     r0,#0x2c
000064  f7fffffe          BL       ST7789_WriteCommand
;;;136    	ST7789_UnSelect();
000068  4641              MOV      r1,r8
00006a  4648              MOV      r0,r9
00006c  e8bd43f8          POP      {r3-r9,lr}
000070  2201              MOVS     r2,#1
000072  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;137    }
;;;138    
                          ENDP

000076  0000              DCW      0x0000
                  |L15.120|
                          DCD      0x40010c00

                          AREA ||i.ST7789_SetRotation||, CODE, READONLY, ALIGN=1

                  ST7789_SetRotation PROC
;;;88      */
;;;89     void ST7789_SetRotation(uint8_t m)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
000004  2036              MOVS     r0,#0x36
000006  f7fffffe          BL       ST7789_WriteCommand
;;;92     	switch (m) {
00000a  b154              CBZ      r4,|L16.34|
00000c  2c01              CMP      r4,#1
00000e  d00a              BEQ      |L16.38|
000010  2c02              CMP      r4,#2
000012  d00a              BEQ      |L16.42|
000014  2c03              CMP      r4,#3
000016  d10a              BNE      |L16.46|
;;;93     	case 0:
;;;94     		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
;;;95     		break;
;;;96     	case 1:
;;;97     		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
;;;98     		break;
;;;99     	case 2:
;;;100    		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
;;;101    		break;
;;;102    	case 3:
;;;103    		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
000018  2060              MOVS     r0,#0x60
                  |L16.26|
00001a  e8bd4010          POP      {r4,lr}
00001e  f7ffbffe          B.W      ST7789_WriteSmallData
                  |L16.34|
000022  20c0              MOVS     r0,#0xc0              ;94
000024  e7f9              B        |L16.26|
                  |L16.38|
000026  20a0              MOVS     r0,#0xa0              ;97
000028  e7f7              B        |L16.26|
                  |L16.42|
00002a  2000              MOVS     r0,#0                 ;100
00002c  e7f5              B        |L16.26|
                  |L16.46|
;;;104    		break;
;;;105    	default:
;;;106    		break;
;;;107    	}
;;;108    }
00002e  bd10              POP      {r4,pc}
;;;109    
                          ENDP


                          AREA ||i.ST7789_TearEffect||, CODE, READONLY, ALIGN=2

                  ST7789_TearEffect PROC
;;;673     */
;;;674    void ST7789_TearEffect(uint8_t tear)
000000  b570              PUSH     {r4-r6,lr}
;;;675    {
;;;676    	ST7789_Select();
000002  4e0b              LDR      r6,|L17.48|
000004  4604              MOV      r4,r0                 ;675
000006  f44f5580          MOV      r5,#0x1000
00000a  2200              MOVS     r2,#0
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       HAL_GPIO_WritePin
;;;677    	ST7789_WriteCommand(tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */);
000014  b10c              CBZ      r4,|L17.26|
000016  2035              MOVS     r0,#0x35
000018  e000              B        |L17.28|
                  |L17.26|
00001a  2034              MOVS     r0,#0x34
                  |L17.28|
00001c  f7fffffe          BL       ST7789_WriteCommand
;;;678    	ST7789_UnSelect();
000020  4629              MOV      r1,r5
000022  4630              MOV      r0,r6
000024  e8bd4070          POP      {r4-r6,lr}
000028  2201              MOVS     r2,#1
00002a  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;679    }
;;;680    
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
                          DCD      0x40010c00

                          AREA ||i.ST7789_Test||, CODE, READONLY, ALIGN=2

                  ST7789_Test PROC
;;;686     */
;;;687    void ST7789_Test(void)
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;688    {
;;;689    	ST7789_Fill_Color(WHITE);
000004  f64f74ff          MOV      r4,#0xffff
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ST7789_Fill_Color
;;;690    	HAL_Delay(1000);
00000e  f44f707a          MOV      r0,#0x3e8
000012  f7fffffe          BL       HAL_Delay
;;;691    ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
000016  1166              ASRS     r6,r4,#5
000018  4d7e              LDR      r5,|L18.532|
00001a  e9cd6401          STRD     r6,r4,[sp,#4]
00001e  88a8              LDRH     r0,[r5,#4]  ; Font_16x26
000020  f8ad0000          STRH     r0,[sp,#0]
000024  210a              MOVS     r1,#0xa
000026  682b              LDR      r3,[r5,#0]  ; Font_16x26
000028  a27b              ADR      r2,|L18.536|
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       ST7789_WriteString
;;;692    	ST7789_Fill_Color(CYAN);
000030  1060              ASRS     r0,r4,#1
000032  f7fffffe          BL       ST7789_Fill_Color
;;;693        HAL_Delay(500);
000036  f44f77fa          MOV      r7,#0x1f4
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       HAL_Delay
;;;694    	ST7789_Fill_Color(RED);
000040  f44f4978          MOV      r9,#0xf800
000044  4648              MOV      r0,r9
000046  f7fffffe          BL       ST7789_Fill_Color
;;;695        HAL_Delay(500);
00004a  4638              MOV      r0,r7
00004c  f7fffffe          BL       HAL_Delay
;;;696    	ST7789_Fill_Color(BLUE);
000050  201f              MOVS     r0,#0x1f
000052  f7fffffe          BL       ST7789_Fill_Color
;;;697        HAL_Delay(500);
000056  4638              MOV      r0,r7
000058  f7fffffe          BL       HAL_Delay
;;;698    	ST7789_Fill_Color(GREEN);
00005c  f44f60fc          MOV      r0,#0x7e0
000060  f7fffffe          BL       ST7789_Fill_Color
;;;699        HAL_Delay(500);
000064  4638              MOV      r0,r7
000066  f7fffffe          BL       HAL_Delay
;;;700    	ST7789_Fill_Color(YELLOW);
00006a  f64f7ae0          MOV      r10,#0xffe0
00006e  4650              MOV      r0,r10
000070  f7fffffe          BL       ST7789_Fill_Color
;;;701        HAL_Delay(500);
000074  4638              MOV      r0,r7
000076  f7fffffe          BL       HAL_Delay
;;;702    	ST7789_Fill_Color(BROWN);
00007a  f64b4040          MOV      r0,#0xbc40
00007e  f7fffffe          BL       ST7789_Fill_Color
;;;703        HAL_Delay(500);
000082  4638              MOV      r0,r7
000084  f7fffffe          BL       HAL_Delay
;;;704    	ST7789_Fill_Color(DARKBLUE);
000088  f24010cf          MOV      r0,#0x1cf
00008c  f7fffffe          BL       ST7789_Fill_Color
;;;705        HAL_Delay(500);
000090  4638              MOV      r0,r7
000092  f7fffffe          BL       HAL_Delay
;;;706    	ST7789_Fill_Color(MAGENTA);
000096  f64f0b1f          MOV      r11,#0xf81f
00009a  4658              MOV      r0,r11
00009c  f7fffffe          BL       ST7789_Fill_Color
;;;707        HAL_Delay(500);
0000a0  4638              MOV      r0,r7
0000a2  f7fffffe          BL       HAL_Delay
;;;708    	ST7789_Fill_Color(LIGHTGREEN);
0000a6  f248401f          MOV      r0,#0x841f
0000aa  f7fffffe          BL       ST7789_Fill_Color
;;;709        HAL_Delay(500);
0000ae  4638              MOV      r0,r7
0000b0  f7fffffe          BL       HAL_Delay
;;;710    	ST7789_Fill_Color(LGRAY);
0000b4  f24c6018          MOV      r0,#0xc618
0000b8  f7fffffe          BL       ST7789_Fill_Color
;;;711        HAL_Delay(500);
0000bc  4638              MOV      r0,r7
0000be  f7fffffe          BL       HAL_Delay
;;;712    	ST7789_Fill_Color(LBBLUE);
0000c2  f6423012          MOV      r0,#0x2b12
0000c6  f7fffffe          BL       ST7789_Fill_Color
;;;713        HAL_Delay(500);
0000ca  4638              MOV      r0,r7
0000cc  f7fffffe          BL       HAL_Delay
;;;714    	ST7789_Fill_Color(WHITE);
0000d0  4620              MOV      r0,r4
0000d2  f7fffffe          BL       ST7789_Fill_Color
;;;715    	HAL_Delay(500);
0000d6  4638              MOV      r0,r7
0000d8  f7fffffe          BL       HAL_Delay
;;;716    
;;;717    	ST7789_Fill_Color(RED);
0000dc  4648              MOV      r0,r9
0000de  f7fffffe          BL       ST7789_Fill_Color
;;;718    	//ST7789_WriteString(10, 10, "Rect./Line.", Font_11x18, YELLOW, BLACK);
;;;719    	ST7789_DrawRectangle(30, 30, 100, 100, WHITE);
0000e2  2364              MOVS     r3,#0x64
0000e4  211e              MOVS     r1,#0x1e
0000e6  461a              MOV      r2,r3
0000e8  4608              MOV      r0,r1
0000ea  9400              STR      r4,[sp,#0]
0000ec  f7fffffe          BL       ST7789_DrawRectangle
;;;720    	HAL_Delay(1000);
0000f0  0078              LSLS     r0,r7,#1
0000f2  f7fffffe          BL       HAL_Delay
;;;721    
;;;722    	ST7789_Fill_Color(RED);
0000f6  4648              MOV      r0,r9
0000f8  f7fffffe          BL       ST7789_Fill_Color
;;;723    	//ST7789_WriteString(10, 10, "Filled Rect.", Font_11x18, YELLOW, BLACK);
;;;724    	ST7789_DrawFilledRectangle(30, 30, 50, 50, WHITE);
0000fc  2332              MOVS     r3,#0x32
0000fe  211e              MOVS     r1,#0x1e
000100  461a              MOV      r2,r3
000102  4608              MOV      r0,r1
000104  9400              STR      r4,[sp,#0]
000106  f7fffffe          BL       ST7789_DrawFilledRectangle
;;;725    	HAL_Delay(1000);
00010a  0078              LSLS     r0,r7,#1
00010c  f7fffffe          BL       HAL_Delay
;;;726    
;;;727    	ST7789_Fill_Color(RED);
000110  4648              MOV      r0,r9
000112  f7fffffe          BL       ST7789_Fill_Color
;;;728    	//ST7789_WriteString(10, 10, "Circle.", Font_11x18, YELLOW, BLACK);
;;;729    	ST7789_DrawCircle(60, 60, 25, WHITE);
000116  213c              MOVS     r1,#0x3c
000118  4623              MOV      r3,r4
00011a  2219              MOVS     r2,#0x19
00011c  4608              MOV      r0,r1
00011e  f7fffffe          BL       ST7789_DrawCircle
;;;730    	HAL_Delay(1000);
000122  0078              LSLS     r0,r7,#1
000124  f7fffffe          BL       HAL_Delay
;;;731    
;;;732    	ST7789_Fill_Color(RED);
000128  4648              MOV      r0,r9
00012a  f7fffffe          BL       ST7789_Fill_Color
;;;733    	//ST7789_WriteString(10, 10, "Filled Cir.", Font_11x18, YELLOW, BLACK);
;;;734    	ST7789_DrawFilledCircle(60, 60, 25, WHITE);
00012e  213c              MOVS     r1,#0x3c
000130  4623              MOV      r3,r4
000132  2219              MOVS     r2,#0x19
000134  4608              MOV      r0,r1
000136  f7fffffe          BL       ST7789_DrawFilledCircle
;;;735    	HAL_Delay(1000);
00013a  0078              LSLS     r0,r7,#1
00013c  f7fffffe          BL       HAL_Delay
;;;736    
;;;737    	ST7789_Fill_Color(RED);
000140  4648              MOV      r0,r9
000142  f7fffffe          BL       ST7789_Fill_Color
;;;738    	//ST7789_WriteString(10, 10, "Triangle", Font_11x18, YELLOW, BLACK);
;;;739    	ST7789_DrawTriangle(30, 30, 30, 70, 60, 40, WHITE);
000146  f04f083c          MOV      r8,#0x3c
00014a  2728              MOVS     r7,#0x28
00014c  f8cd8000          STR      r8,[sp,#0]
000150  221e              MOVS     r2,#0x1e
000152  e9cd7401          STRD     r7,r4,[sp,#4]
000156  2346              MOVS     r3,#0x46
000158  4611              MOV      r1,r2
00015a  4610              MOV      r0,r2
00015c  f7fffffe          BL       ST7789_DrawTriangle
;;;740    	HAL_Delay(1000);
000160  f44f707a          MOV      r0,#0x3e8
000164  f7fffffe          BL       HAL_Delay
;;;741    
;;;742    	ST7789_Fill_Color(RED);
000168  4648              MOV      r0,r9
00016a  f7fffffe          BL       ST7789_Fill_Color
;;;743    	//ST7789_WriteString(10, 10, "Filled Tri", Font_11x18, YELLOW, BLACK);
;;;744    	ST7789_DrawFilledTriangle(30, 30, 30, 70, 60, 40, WHITE);
00016e  f8cd8000          STR      r8,[sp,#0]
000172  221e              MOVS     r2,#0x1e
000174  e9cd7401          STRD     r7,r4,[sp,#4]
000178  2346              MOVS     r3,#0x46
00017a  4611              MOV      r1,r2
00017c  4610              MOV      r0,r2
00017e  f7fffffe          BL       ST7789_DrawFilledTriangle
;;;745    	HAL_Delay(1000);
000182  f44f707a          MOV      r0,#0x3e8
000186  f7fffffe          BL       HAL_Delay
00018a  e9cd6401          STRD     r6,r4,[sp,#4]
;;;746    
;;;747    	ST7789_WriteString(10, 10, "Font test.", Font_16x26, GBLUE, WHITE);
00018e  88a8              LDRH     r0,[r5,#4]  ; Font_16x26
000190  f8ad0000          STRH     r0,[sp,#0]
000194  210a              MOVS     r1,#0xa
000196  682b              LDR      r3,[r5,#0]  ; Font_16x26
000198  a21f              ADR      r2,|L18.536|
00019a  4608              MOV      r0,r1
00019c  f7fffffe          BL       ST7789_WriteString
;;;748    	ST7789_WriteString(10, 50, "Hello Steve!", Font_7x10, RED, WHITE);
0001a0  4820              LDR      r0,|L18.548|
0001a2  e9cd9401          STRD     r9,r4,[sp,#4]
0001a6  8881              LDRH     r1,[r0,#4]  ; Font_7x10
0001a8  f8ad1000          STRH     r1,[sp,#0]
0001ac  6803              LDR      r3,[r0,#0]  ; Font_7x10
0001ae  a21e              ADR      r2,|L18.552|
0001b0  2132              MOVS     r1,#0x32
0001b2  200a              MOVS     r0,#0xa
0001b4  f7fffffe          BL       ST7789_WriteString
;;;749    	ST7789_WriteString(10, 75, "Hello Steve!", Font_11x18, YELLOW, WHITE);
0001b8  481f              LDR      r0,|L18.568|
0001ba  e9cda401          STRD     r10,r4,[sp,#4]
0001be  8881              LDRH     r1,[r0,#4]  ; Font_11x18
0001c0  f8ad1000          STRH     r1,[sp,#0]
0001c4  6803              LDR      r3,[r0,#0]  ; Font_11x18
0001c6  a218              ADR      r2,|L18.552|
0001c8  214b              MOVS     r1,#0x4b
0001ca  200a              MOVS     r0,#0xa
0001cc  f7fffffe          BL       ST7789_WriteString
0001d0  e9cdb401          STRD     r11,r4,[sp,#4]
;;;750    	ST7789_WriteString(10, 100, "Hello Steve!", Font_16x26, MAGENTA, WHITE);
0001d4  88a8              LDRH     r0,[r5,#4]  ; Font_16x26
0001d6  f8ad0000          STRH     r0,[sp,#0]
0001da  682b              LDR      r3,[r5,#0]  ; Font_16x26
0001dc  a212              ADR      r2,|L18.552|
0001de  2164              MOVS     r1,#0x64
0001e0  200a              MOVS     r0,#0xa
0001e2  f7fffffe          BL       ST7789_WriteString
;;;751    	HAL_Delay(1000);
0001e6  f44f707a          MOV      r0,#0x3e8
0001ea  f7fffffe          BL       HAL_Delay
;;;752    
;;;753    
;;;754    	//	If FLASH cannot storage anymore datas, please delete codes below.
;;;755    	ST7789_Fill_Color(WHITE);
0001ee  4620              MOV      r0,r4
0001f0  f7fffffe          BL       ST7789_Fill_Color
;;;756    	ST7789_DrawImage(0, 0, 128, 128, (uint16_t *)saber);
0001f4  4811              LDR      r0,|L18.572|
0001f6  2380              MOVS     r3,#0x80
0001f8  2100              MOVS     r1,#0
0001fa  8800              LDRH     r0,[r0,#0]  ; saber
0001fc  9000              STR      r0,[sp,#0]
0001fe  461a              MOV      r2,r3
000200  4608              MOV      r0,r1
000202  f7fffffe          BL       ST7789_DrawImage
;;;757    	HAL_Delay(3000);
000206  e8bd4ffe          POP      {r1-r11,lr}
00020a  f64030b8          MOV      r0,#0xbb8
00020e  f7ffbffe          B.W      HAL_Delay
;;;758    }
                          ENDP

000212  0000              DCW      0x0000
                  |L18.532|
                          DCD      Font_16x26
                  |L18.536|
000218  466f6e74          DCB      "Font test.",0
00021c  20746573
000220  742e00  
000223  00                DCB      0
                  |L18.548|
                          DCD      Font_7x10
                  |L18.552|
000228  48656c6c          DCB      "Hello Steve!",0
00022c  6f205374
000230  65766521
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
                  |L18.568|
                          DCD      Font_11x18
                  |L18.572|
                          DCD      saber

                          AREA ||i.ST7789_WriteChar||, CODE, READONLY, ALIGN=2

                  ST7789_WriteChar PROC
;;;452     */
;;;453    void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
000000  b40f              PUSH     {r0-r3}
;;;454    {
000002  e92d5fff          PUSH     {r0-r12,lr}
000006  460c              MOV      r4,r1
000008  e9dda913          LDRD     r10,r9,[sp,#0x4c]
00000c  4605              MOV      r5,r0
;;;455    	uint32_t i, b, j;
;;;456    	ST7789_Select();
00000e  2200              MOVS     r2,#0
000010  f44f5180          MOV      r1,#0x1000
000014  4826              LDR      r0,|L19.176|
000016  f7fffffe          BL       HAL_GPIO_WritePin
;;;457    	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
00001a  f89d6045          LDRB     r6,[sp,#0x45]
00001e  1e60              SUBS     r0,r4,#1
000020  4430              ADD      r0,r0,r6
000022  b283              UXTH     r3,r0
000024  f89d7044          LDRB     r7,[sp,#0x44]
000028  1e68              SUBS     r0,r5,#1
00002a  4438              ADD      r0,r0,r7
00002c  b282              UXTH     r2,r0
00002e  4621              MOV      r1,r4
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       ST7789_SetAddressWindow
;;;458    	
;;;459    	for (i = 0; i < font.height; i++) {
000036  2500              MOVS     r5,#0
000038  e02e              B        |L19.152|
;;;460    		b = font.data[(ch - 32) * font.height + i];
00003a  bf00              NOP      
                  |L19.60|
00003c  9810              LDR      r0,[sp,#0x40]
00003e  f8dd1046          LDR      r1,[sp,#0x46]
000042  3820              SUBS     r0,r0,#0x20
000044  fb005006          MLA      r0,r0,r6,r5
;;;461    		for (j = 0; j < font.width; j++) {
000048  2400              MOVS     r4,#0
00004a  f8318010          LDRH     r8,[r1,r0,LSL #1]     ;460
;;;462    			if ((b << j) & 0x8000) {
;;;463    				uint8_t data[] = {color >> 8, color & 0xFF};
00004e  ea4f201a          LSR      r0,r10,#8
000052  9002              STR      r0,[sp,#8]
000054  f00a00ff          AND      r0,r10,#0xff
;;;464    				ST7789_WriteData(data, sizeof(data));
;;;465    			}
;;;466    			else {
;;;467    				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
000058  9001              STR      r0,[sp,#4]
00005a  ea4f2019          LSR      r0,r9,#8
00005e  f0090bff          AND      r11,r9,#0xff
000062  9000              STR      r0,[sp,#0]            ;461
000064  e015              B        |L19.146|
000066  bf00              NOP                            ;462
                  |L19.104|
000068  fa08f004          LSL      r0,r8,r4              ;462
00006c  0400              LSLS     r0,r0,#16             ;462
00006e  d506              BPL      |L19.126|
000070  9802              LDR      r0,[sp,#8]            ;463
000072  f88d000c          STRB     r0,[sp,#0xc]          ;463
000076  9801              LDR      r0,[sp,#4]            ;463
000078  f88d000d          STRB     r0,[sp,#0xd]          ;463
00007c  e004              B        |L19.136|
                  |L19.126|
00007e  9800              LDR      r0,[sp,#0]
000080  f88d000c          STRB     r0,[sp,#0xc]
000084  f88db00d          STRB     r11,[sp,#0xd]
                  |L19.136|
;;;468    				ST7789_WriteData(data, sizeof(data));
000088  2102              MOVS     r1,#2
00008a  a803              ADD      r0,sp,#0xc
00008c  f7fffffe          BL       ST7789_WriteData
000090  1c64              ADDS     r4,r4,#1
                  |L19.146|
000092  42a7              CMP      r7,r4                 ;461
000094  d8e8              BHI      |L19.104|
000096  1c6d              ADDS     r5,r5,#1              ;461
                  |L19.152|
000098  42ae              CMP      r6,r5                 ;459
00009a  d8cf              BHI      |L19.60|
;;;469    			}
;;;470    		}
;;;471    	}
;;;472    	ST7789_UnSelect();
00009c  b004              ADD      sp,sp,#0x10
00009e  2201              MOVS     r2,#1
0000a0  e8bd1ff0          POP      {r4-r12}
0000a4  0311              LSLS     r1,r2,#12
0000a6  4802              LDR      r0,|L19.176|
0000a8  f85deb14          LDR      lr,[sp],#0x14
0000ac  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;473    }
;;;474    
                          ENDP

                  |L19.176|
                          DCD      0x40010c00

                          AREA ||i.ST7789_WriteCommand||, CODE, READONLY, ALIGN=2

                  ST7789_WriteCommand PROC
;;;29      */
;;;30     static void ST7789_WriteCommand(uint8_t cmd)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;31     {
;;;32     	ST7789_Select();
000002  4d0d              LDR      r5,|L20.56|
000004  f44f5480          MOV      r4,#0x1000
000008  2200              MOVS     r2,#0
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       HAL_GPIO_WritePin
;;;33     	ST7789_DC_Clr();
000012  2200              MOVS     r2,#0
000014  2102              MOVS     r1,#2
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       HAL_GPIO_WritePin
;;;34     	HAL_SPI_Transmit(&SpiHandle, &cmd, sizeof(cmd), HAL_MAX_DELAY);
00001c  f04f33ff          MOV      r3,#0xffffffff
000020  2201              MOVS     r2,#1
000022  4669              MOV      r1,sp
000024  4805              LDR      r0,|L20.60|
000026  f7fffffe          BL       HAL_SPI_Transmit
;;;35     	ST7789_UnSelect();
00002a  2201              MOVS     r2,#1
00002c  4621              MOV      r1,r4
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       HAL_GPIO_WritePin
;;;36     }
000034  bd38              POP      {r3-r5,pc}
;;;37     
                          ENDP

000036  0000              DCW      0x0000
                  |L20.56|
                          DCD      0x40010c00
                  |L20.60|
                          DCD      SpiHandle

                          AREA ||i.ST7789_WriteData||, CODE, READONLY, ALIGN=2

                  ST7789_WriteData PROC
;;;43      */
;;;44     static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;45     {
;;;46     	ST7789_Select();
000004  4f16              LDR      r7,|L21.96|
000006  460c              MOV      r4,r1                 ;45
000008  4606              MOV      r6,r0                 ;45
00000a  f44f5b80          MOV      r11,#0x1000
00000e  2200              MOVS     r2,#0
000010  4659              MOV      r1,r11
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       HAL_GPIO_WritePin
;;;47     	ST7789_DC_Set();
000018  2201              MOVS     r2,#1
00001a  2102              MOVS     r1,#2
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       HAL_GPIO_WritePin
;;;48     
;;;49     	// split data in small chunks because HAL can't send more than 64K at once
;;;50     
;;;51     	while (buff_size > 0) {
;;;52     		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
000022  f44f3880          MOV      r8,#0x10000
000026  f64f79ff          MOV      r9,#0xffff
;;;53     		#ifdef USE_DMA
;;;54     			if (DMA_MIN_SIZE <= buff_size)
;;;55     			{
;;;56     				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
;;;57     				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
;;;58     				{}
;;;59     			}
;;;60     			else
;;;61     				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
;;;62     		#else
;;;63     			HAL_SPI_Transmit(&SpiHandle, buff, chunk_size, HAL_MAX_DELAY);
00002a  f04f3aff          MOV      r10,#0xffffffff
00002e  e00d              B        |L21.76|
                  |L21.48|
000030  4544              CMP      r4,r8                 ;52
000032  d301              BCC      |L21.56|
000034  4648              MOV      r0,r9                 ;52
000036  e000              B        |L21.58|
                  |L21.56|
000038  4620              MOV      r0,r4                 ;52
                  |L21.58|
00003a  b285              UXTH     r5,r0                 ;52
00003c  4653              MOV      r3,r10
00003e  462a              MOV      r2,r5
000040  4631              MOV      r1,r6
000042  4808              LDR      r0,|L21.100|
000044  f7fffffe          BL       HAL_SPI_Transmit
;;;64     		#endif
;;;65     		buff += chunk_size;
000048  442e              ADD      r6,r6,r5
;;;66     		buff_size -= chunk_size;
00004a  1b64              SUBS     r4,r4,r5
                  |L21.76|
00004c  2c00              CMP      r4,#0                 ;51
00004e  d1ef              BNE      |L21.48|
;;;67     	}
;;;68     
;;;69     	ST7789_UnSelect();
000050  4659              MOV      r1,r11
000052  4638              MOV      r0,r7
000054  e8bd5ff0          POP      {r4-r12,lr}
000058  2201              MOVS     r2,#1
00005a  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;70     }
;;;71     /**
                          ENDP

00005e  0000              DCW      0x0000
                  |L21.96|
                          DCD      0x40010c00
                  |L21.100|
                          DCD      SpiHandle

                          AREA ||i.ST7789_WriteSmallData||, CODE, READONLY, ALIGN=2

                  ST7789_WriteSmallData PROC
;;;75      */
;;;76     static void ST7789_WriteSmallData(uint8_t data)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;77     {
;;;78     	ST7789_Select();
000002  4d0d              LDR      r5,|L22.56|
000004  f44f5480          MOV      r4,#0x1000
000008  2200              MOVS     r2,#0
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       HAL_GPIO_WritePin
;;;79     	ST7789_DC_Set();
000012  2201              MOVS     r2,#1
000014  2102              MOVS     r1,#2
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       HAL_GPIO_WritePin
;;;80     	HAL_SPI_Transmit(&SpiHandle, &data, sizeof(data), HAL_MAX_DELAY);
00001c  f04f33ff          MOV      r3,#0xffffffff
000020  2201              MOVS     r2,#1
000022  4669              MOV      r1,sp
000024  4805              LDR      r0,|L22.60|
000026  f7fffffe          BL       HAL_SPI_Transmit
;;;81     	ST7789_UnSelect();
00002a  2201              MOVS     r2,#1
00002c  4621              MOV      r1,r4
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       HAL_GPIO_WritePin
;;;82     }
000034  bd38              POP      {r3-r5,pc}
;;;83     
                          ENDP

000036  0000              DCW      0x0000
                  |L22.56|
                          DCD      0x40010c00
                  |L22.60|
                          DCD      SpiHandle

                          AREA ||i.ST7789_WriteString||, CODE, READONLY, ALIGN=2

                  ST7789_WriteString PROC
;;;483     */
;;;484    void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
000000  b40f              PUSH     {r0-r3}
;;;485    {
000002  e92d4ffe          PUSH     {r1-r11,lr}
;;;486    	ST7789_Select();
000006  f8df9070          LDR      r9,|L23.120|
00000a  e9ddba11          LDRD     r11,r10,[sp,#0x44]    ;485
00000e  4614              MOV      r4,r2                 ;485
000010  460e              MOV      r6,r1                 ;485
000012  4605              MOV      r5,r0                 ;485
000014  f44f5880          MOV      r8,#0x1000
000018  2200              MOVS     r2,#0
00001a  4641              MOV      r1,r8
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       HAL_GPIO_WritePin
;;;487    	while (*str) {
;;;488    		if (x + font.width >= ST7789_WIDTH) {
000022  f89d703c          LDRB     r7,[sp,#0x3c]
000026  e01a              B        |L23.94|
                  |L23.40|
000028  1978              ADDS     r0,r7,r5
00002a  28f0              CMP      r0,#0xf0
00002c  d309              BCC      |L23.66|
;;;489    			x = 0;
;;;490    			y += font.height;
00002e  f89d003d          LDRB     r0,[sp,#0x3d]
000032  2500              MOVS     r5,#0                 ;489
000034  1981              ADDS     r1,r0,r6
000036  b28e              UXTH     r6,r1
;;;491    			if (y + font.height >= ST7789_HEIGHT) {
000038  4430              ADD      r0,r0,r6
00003a  28f0              CMP      r0,#0xf0
00003c  d212              BCS      |L23.100|
;;;492    				break;
;;;493    			}
;;;494    
;;;495    			if (*str == ' ') {
00003e  2a20              CMP      r2,#0x20
000040  d00c              BEQ      |L23.92|
                  |L23.66|
000042  e9cdba01          STRD     r11,r10,[sp,#4]
;;;496    				// skip spaces in the beginning of the new line
;;;497    				str++;
;;;498    				continue;
;;;499    			}
;;;500    		}
;;;501    		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
000046  f8bd0040          LDRH     r0,[sp,#0x40]
00004a  f8ad0000          STRH     r0,[sp,#0]
00004e  4631              MOV      r1,r6
000050  4628              MOV      r0,r5
000052  9b0f              LDR      r3,[sp,#0x3c]
000054  f7fffffe          BL       ST7789_WriteChar
;;;502    		x += font.width;
000058  1978              ADDS     r0,r7,r5
00005a  b285              UXTH     r5,r0
                  |L23.92|
00005c  1c64              ADDS     r4,r4,#1
                  |L23.94|
00005e  7822              LDRB     r2,[r4,#0]            ;487
000060  2a00              CMP      r2,#0                 ;487
000062  d1e1              BNE      |L23.40|
                  |L23.100|
;;;503    		str++;
;;;504    	}
;;;505    	ST7789_UnSelect();
000064  b003              ADD      sp,sp,#0xc
000066  4641              MOV      r1,r8
000068  4648              MOV      r0,r9
00006a  e8bd0ff0          POP      {r4-r11}
00006e  2201              MOVS     r2,#1
000070  f85deb14          LDR      lr,[sp],#0x14
000074  f7ffbffe          B.W      HAL_GPIO_WritePin
;;;506    }
;;;507    
                          ENDP

                  |L23.120|
                          DCD      0x40010c00

;*** Start embedded assembler ***

#line 1 "..\\Drivers\\BSP\\Components\\st7789\\st7789.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_st7789_c_e3924d72____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___8_st7789_c_e3924d72____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_st7789_c_e3924d72____REVSH|
#line 478
|__asm___8_st7789_c_e3924d72____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_st7789_c_e3924d72____RRX|
#line 665
|__asm___8_st7789_c_e3924d72____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
