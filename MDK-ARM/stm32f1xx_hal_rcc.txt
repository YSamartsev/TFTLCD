; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otft_lcd\stm32f1xx_hal_rcc.o --asm_dir=./ --list_dir=--list --depend=tft_lcd\stm32f1xx_hal_rcc.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I../Drivers/BSP/Components -I../Drivers/BSP\Components/Common -I..\Middlewares\Third_Party\FatFs\src -I..\Drivers\BSP\Adafruit_Shield -I..\Drivers\BSP\STM32F1xx_Nucleo -I..\Middlewares\Third_Party\FatFs\src\drivers -I..\Drivers\BSP\Components\st7789 -I.\RTE\_TFT_LCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=tft_lcd\stm32f1xx_hal_rcc.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1376     */
;;;1377   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1378   {
;;;1379     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1380       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1381       */
;;;1382   }
;;;1383   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;810      */
;;;811    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;812    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;813      uint32_t tickstart;
;;;814    
;;;815      /* Check Null pointer */
;;;816      if (RCC_ClkInitStruct == NULL)
000008  2c00              CMP      r4,#0
00000a  d017              BEQ      |L2.60|
;;;817      {
;;;818        return HAL_ERROR;
;;;819      }
;;;820    
;;;821      /* Check the parameters */
;;;822      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;823      assert_param(IS_FLASH_LATENCY(FLatency));
;;;824    
;;;825      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;826      must be correctly programmed according to the frequency of the CPU clock
;;;827        (HCLK) of the device. */
;;;828    
;;;829    #if defined(FLASH_ACR_LATENCY)
;;;830      /* Increasing the number of wait states because of higher CPU frequency */
;;;831      if (FLatency > __HAL_FLASH_GET_LATENCY())
00000c  f8df8130          LDR      r8,|L2.320|
000010  f8d80000          LDR      r0,[r8,#0]
000014  f0000007          AND      r0,r0,#7
000018  42a8              CMP      r0,r5
00001a  d211              BCS      |L2.64|
;;;832      {
;;;833        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;834        __HAL_FLASH_SET_LATENCY(FLatency);
00001c  f8d80000          LDR      r0,[r8,#0]
000020  f0200007          BIC      r0,r0,#7
000024  4328              ORRS     r0,r0,r5
000026  f8c80000          STR      r0,[r8,#0]
;;;835    
;;;836        /* Check that the new number of wait states is taken into account to access the Flash
;;;837        memory by reading the FLASH_ACR register */
;;;838        if (__HAL_FLASH_GET_LATENCY() != FLatency)
00002a  f8d80000          LDR      r0,[r8,#0]
00002e  f0000007          AND      r0,r0,#7
000032  42a8              CMP      r0,r5
000034  d004              BEQ      |L2.64|
;;;839      {
;;;840        return HAL_ERROR;
000036  2001              MOVS     r0,#1
                  |L2.56|
;;;841      }
;;;842    }
;;;843    
;;;844    #endif /* FLASH_ACR_LATENCY */
;;;845    /*-------------------------- HCLK Configuration --------------------------*/
;;;846    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;847      {
;;;848        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;849        a non-spec phase whatever we decrease or increase HCLK. */
;;;850        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;851        {
;;;852          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;853        }
;;;854    
;;;855        if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;856        {
;;;857          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
;;;858        }
;;;859    
;;;860        /* Set the new HCLK clock divider */
;;;861        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;862        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;863      }
;;;864    
;;;865      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;866      if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;867      {
;;;868        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;869    
;;;870        /* HSE is selected as System Clock Source */
;;;871        if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;872        {
;;;873          /* Check the HSE ready flag */
;;;874          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;875          {
;;;876            return HAL_ERROR;
;;;877          }
;;;878        }
;;;879        /* PLL is selected as System Clock Source */
;;;880        else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
;;;881        {
;;;882          /* Check the PLL ready flag */
;;;883          if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;884          {
;;;885            return HAL_ERROR;
;;;886          }
;;;887        }
;;;888        /* HSI is selected as System Clock Source */
;;;889        else
;;;890        {
;;;891          /* Check the HSI ready flag */
;;;892          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;893          {
;;;894            return HAL_ERROR;
;;;895          }
;;;896        }
;;;897        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;898    
;;;899        /* Get Start Tick */
;;;900        tickstart = HAL_GetTick();
;;;901    
;;;902        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;903        {
;;;904          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;905          {
;;;906            return HAL_TIMEOUT;
;;;907          }
;;;908        }
;;;909      }
;;;910    
;;;911    #if defined(FLASH_ACR_LATENCY)
;;;912      /* Decreasing the number of wait states because of lower CPU frequency */
;;;913      if (FLatency < __HAL_FLASH_GET_LATENCY())
;;;914      {
;;;915        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;916        __HAL_FLASH_SET_LATENCY(FLatency);
;;;917    
;;;918        /* Check that the new number of wait states is taken into account to access the Flash
;;;919        memory by reading the FLASH_ACR register */
;;;920        if (__HAL_FLASH_GET_LATENCY() != FLatency)
;;;921      {
;;;922        return HAL_ERROR;
;;;923      }
;;;924    }
;;;925    #endif /* FLASH_ACR_LATENCY */
;;;926    
;;;927    /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;928    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;929      {
;;;930        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;931        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;932      }
;;;933    
;;;934      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;935      if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;936      {
;;;937        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;938        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;939      }
;;;940    
;;;941      /* Update the SystemCoreClock global variable */
;;;942      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
;;;943    
;;;944      /* Configure the source of time base considering new system clocks settings*/
;;;945      HAL_InitTick(uwTickPrio);
;;;946    
;;;947      return HAL_OK;
;;;948    }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L2.60|
00003c  2001              MOVS     r0,#1                 ;818
00003e  e7fb              B        |L2.56|
                  |L2.64|
000040  6820              LDR      r0,[r4,#0]            ;846
000042  4e40              LDR      r6,|L2.324|
000044  0781              LSLS     r1,r0,#30             ;846
000046  d512              BPL      |L2.110|
000048  0740              LSLS     r0,r0,#29             ;850
00004a  d503              BPL      |L2.84|
00004c  6870              LDR      r0,[r6,#4]            ;852
00004e  f44060e0          ORR      r0,r0,#0x700          ;852
000052  6070              STR      r0,[r6,#4]            ;852
                  |L2.84|
000054  7820              LDRB     r0,[r4,#0]            ;855
000056  0700              LSLS     r0,r0,#28             ;855
000058  d503              BPL      |L2.98|
00005a  6870              LDR      r0,[r6,#4]            ;857
00005c  f4405060          ORR      r0,r0,#0x3800         ;857
000060  6070              STR      r0,[r6,#4]            ;857
                  |L2.98|
000062  6870              LDR      r0,[r6,#4]            ;862
000064  68a1              LDR      r1,[r4,#8]            ;862
000066  f02000f0          BIC      r0,r0,#0xf0           ;862
00006a  4308              ORRS     r0,r0,r1              ;862
00006c  6070              STR      r0,[r6,#4]            ;862
                  |L2.110|
00006e  7820              LDRB     r0,[r4,#0]            ;866
000070  07c0              LSLS     r0,r0,#31             ;866
000072  d02c              BEQ      |L2.206|
000074  6860              LDR      r0,[r4,#4]            ;871
000076  2801              CMP      r0,#1                 ;871
000078  d006              BEQ      |L2.136|
00007a  2802              CMP      r0,#2                 ;880
00007c  d009              BEQ      |L2.146|
00007e  6831              LDR      r1,[r6,#0]            ;892
000080  0789              LSLS     r1,r1,#30             ;892
000082  d40b              BMI      |L2.156|
000084  2001              MOVS     r0,#1                 ;894
000086  e7d7              B        |L2.56|
                  |L2.136|
000088  6831              LDR      r1,[r6,#0]            ;874
00008a  0389              LSLS     r1,r1,#14             ;874
00008c  d406              BMI      |L2.156|
00008e  2001              MOVS     r0,#1                 ;876
000090  e7d2              B        |L2.56|
                  |L2.146|
000092  6831              LDR      r1,[r6,#0]            ;883
000094  0189              LSLS     r1,r1,#6              ;883
000096  d401              BMI      |L2.156|
000098  2001              MOVS     r0,#1                 ;885
00009a  e7cd              B        |L2.56|
                  |L2.156|
00009c  6871              LDR      r1,[r6,#4]            ;897
00009e  f0210103          BIC      r1,r1,#3              ;897
0000a2  4301              ORRS     r1,r1,r0              ;897
0000a4  6071              STR      r1,[r6,#4]            ;897
0000a6  f7fffffe          BL       HAL_GetTick
0000aa  4607              MOV      r7,r0                 ;900
0000ac  f2413988          MOV      r9,#0x1388            ;904
0000b0  e006              B        |L2.192|
                  |L2.178|
0000b2  f7fffffe          BL       HAL_GetTick
0000b6  1bc0              SUBS     r0,r0,r7              ;904
0000b8  4548              CMP      r0,r9                 ;904
0000ba  d901              BLS      |L2.192|
0000bc  2003              MOVS     r0,#3                 ;906
0000be  e7bb              B        |L2.56|
                  |L2.192|
0000c0  6870              LDR      r0,[r6,#4]            ;902
0000c2  6861              LDR      r1,[r4,#4]            ;902
0000c4  f000000c          AND      r0,r0,#0xc            ;902
0000c8  ebb00f81          CMP      r0,r1,LSL #2          ;902
0000cc  d1f1              BNE      |L2.178|
                  |L2.206|
0000ce  f8d80000          LDR      r0,[r8,#0]            ;913
0000d2  f0000007          AND      r0,r0,#7              ;913
0000d6  42a8              CMP      r0,r5                 ;913
0000d8  d90e              BLS      |L2.248|
0000da  f8d80000          LDR      r0,[r8,#0]            ;916
0000de  f0200007          BIC      r0,r0,#7              ;916
0000e2  4328              ORRS     r0,r0,r5              ;916
0000e4  f8c80000          STR      r0,[r8,#0]            ;916
0000e8  f8d80000          LDR      r0,[r8,#0]            ;920
0000ec  f0000007          AND      r0,r0,#7              ;920
0000f0  42a8              CMP      r0,r5                 ;920
0000f2  d001              BEQ      |L2.248|
0000f4  2001              MOVS     r0,#1                 ;922
0000f6  e79f              B        |L2.56|
                  |L2.248|
0000f8  7820              LDRB     r0,[r4,#0]            ;928
0000fa  0740              LSLS     r0,r0,#29             ;928
0000fc  d505              BPL      |L2.266|
0000fe  6870              LDR      r0,[r6,#4]            ;931
000100  68e1              LDR      r1,[r4,#0xc]          ;931
000102  f42060e0          BIC      r0,r0,#0x700          ;931
000106  4308              ORRS     r0,r0,r1              ;931
000108  6070              STR      r0,[r6,#4]            ;931
                  |L2.266|
00010a  7820              LDRB     r0,[r4,#0]            ;935
00010c  0700              LSLS     r0,r0,#28             ;935
00010e  d506              BPL      |L2.286|
000110  6870              LDR      r0,[r6,#4]            ;938
000112  6921              LDR      r1,[r4,#0x10]         ;938
000114  f4205060          BIC      r0,r0,#0x3800         ;938
000118  ea4000c1          ORR      r0,r0,r1,LSL #3       ;938
00011c  6070              STR      r0,[r6,#4]            ;938
                  |L2.286|
00011e  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000122  6871              LDR      r1,[r6,#4]            ;942
000124  4a08              LDR      r2,|L2.328|
000126  f3c11103          UBFX     r1,r1,#4,#4           ;942
00012a  5c51              LDRB     r1,[r2,r1]            ;942
00012c  40c8              LSRS     r0,r0,r1              ;942
00012e  4907              LDR      r1,|L2.332|
000130  6008              STR      r0,[r1,#0]            ;942  ; SystemCoreClock
000132  4807              LDR      r0,|L2.336|
000134  6800              LDR      r0,[r0,#0]            ;945  ; uwTickPrio
000136  f7fffffe          BL       HAL_InitTick
00013a  2000              MOVS     r0,#0                 ;947
00013c  e77c              B        |L2.56|
;;;949    
                          ENDP

00013e  0000              DCW      0x0000
                  |L2.320|
                          DCD      0x40022000
                  |L2.324|
                          DCD      0x40021000
                  |L2.328|
                          DCD      AHBPrescTable
                  |L2.332|
                          DCD      SystemCoreClock
                  |L2.336|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;199      */
;;;200    HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;201    {
;;;202      uint32_t tickstart;
;;;203    
;;;204      /* Get Start Tick */
;;;205      tickstart = HAL_GetTick();
000004  f7fffffe          BL       HAL_GetTick
000008  4605              MOV      r5,r0
;;;206    
;;;207      /* Set HSION bit */
;;;208      SET_BIT(RCC->CR, RCC_CR_HSION);
00000a  4c32              LDR      r4,|L3.212|
00000c  6820              LDR      r0,[r4,#0]
00000e  f0400001          ORR      r0,r0,#1
000012  6020              STR      r0,[r4,#0]
;;;209    
;;;210      /* Wait till HSI is ready */
;;;211      while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e007              B        |L3.38|
                  |L3.22|
;;;212      {
;;;213        if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b40              SUBS     r0,r0,r5
00001c  2802              CMP      r0,#2
00001e  d902              BLS      |L3.38|
;;;214        {
;;;215          return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L3.34|
;;;216        }
;;;217      }
;;;218    
;;;219      /* Set HSITRIM bits to the reset value */
;;;220      MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
;;;221    
;;;222      /* Get Start Tick */
;;;223      tickstart = HAL_GetTick();
;;;224    
;;;225      /* Reset CFGR register */
;;;226      CLEAR_REG(RCC->CFGR);
;;;227    
;;;228      /* Wait till clock switch is ready */
;;;229      while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;230      {
;;;231        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;232        {
;;;233          return HAL_TIMEOUT;
;;;234        }
;;;235      }
;;;236    
;;;237      /* Update the SystemCoreClock global variable */
;;;238      SystemCoreClock = HSI_VALUE;
;;;239    
;;;240      /* Adapt Systick interrupt period */
;;;241      if (HAL_InitTick(uwTickPrio) != HAL_OK)
;;;242      {
;;;243        return HAL_ERROR;
;;;244      }
;;;245    
;;;246      /* Get Start Tick */
;;;247      tickstart = HAL_GetTick();
;;;248    
;;;249      /* Second step is to clear PLLON bit */
;;;250      CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;251    
;;;252      /* Wait till PLL is disabled */
;;;253      while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;254      {
;;;255        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;256        {
;;;257          return HAL_TIMEOUT;
;;;258        }
;;;259      }
;;;260    
;;;261      /* Ensure to reset PLLSRC and PLLMUL bits */
;;;262      CLEAR_REG(RCC->CFGR);
;;;263    
;;;264      /* Get Start Tick */
;;;265      tickstart = HAL_GetTick();
;;;266    
;;;267      /* Reset HSEON & CSSON bits */
;;;268      CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
;;;269    
;;;270      /* Wait till HSE is disabled */
;;;271      while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;272      {
;;;273        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;274        {
;;;275          return HAL_TIMEOUT;
;;;276        }
;;;277      }
;;;278    
;;;279      /* Reset HSEBYP bit */
;;;280      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
;;;281    
;;;282    #if defined(RCC_PLL2_SUPPORT)
;;;283      /* Get Start Tick */
;;;284      tickstart = HAL_GetTick();
;;;285    
;;;286      /* Clear PLL2ON bit */
;;;287      CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
;;;288    
;;;289      /* Wait till PLL2 is disabled */
;;;290      while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
;;;291      {
;;;292        if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;293        {
;;;294          return HAL_TIMEOUT;
;;;295        }
;;;296      }
;;;297    #endif /* RCC_PLL2_SUPPORT */
;;;298    
;;;299    #if defined(RCC_PLLI2S_SUPPORT)
;;;300      /* Get Start Tick */
;;;301      tickstart = HAL_GetTick();
;;;302    
;;;303      /* Clear PLL3ON bit */
;;;304      CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
;;;305    
;;;306      /* Wait till PLL3 is disabled */
;;;307      while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
;;;308      {
;;;309        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;310        {
;;;311          return HAL_TIMEOUT;
;;;312        }
;;;313      }
;;;314    #endif /* RCC_PLLI2S_SUPPORT */
;;;315    
;;;316    #if defined(RCC_CFGR2_PREDIV1)
;;;317      /* Reset CFGR2 register */
;;;318      CLEAR_REG(RCC->CFGR2);
;;;319    #endif /* RCC_CFGR2_PREDIV1 */
;;;320    
;;;321      /* Reset all CSR flags */
;;;322      SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;323    
;;;324      /* Disable all interrupts */
;;;325      CLEAR_REG(RCC->CIR);
;;;326    
;;;327      return HAL_OK;
;;;328    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L3.38|
000026  6820              LDR      r0,[r4,#0]            ;211
000028  0780              LSLS     r0,r0,#30             ;211
00002a  d5f4              BPL      |L3.22|
00002c  6820              LDR      r0,[r4,#0]            ;220
00002e  f02000f8          BIC      r0,r0,#0xf8           ;220
000032  f0400080          ORR      r0,r0,#0x80           ;220
000036  6020              STR      r0,[r4,#0]            ;220
000038  f7fffffe          BL       HAL_GetTick
00003c  4605              MOV      r5,r0                 ;223
00003e  2700              MOVS     r7,#0                 ;226
000040  6067              STR      r7,[r4,#4]            ;226
000042  f2413688          MOV      r6,#0x1388            ;231
000046  e006              B        |L3.86|
                  |L3.72|
000048  f7fffffe          BL       HAL_GetTick
00004c  1b40              SUBS     r0,r0,r5              ;231
00004e  42b0              CMP      r0,r6                 ;231
000050  d901              BLS      |L3.86|
000052  2003              MOVS     r0,#3                 ;233
000054  e7e5              B        |L3.34|
                  |L3.86|
000056  6860              LDR      r0,[r4,#4]            ;229
000058  f0100f0c          TST      r0,#0xc               ;229
00005c  d1f4              BNE      |L3.72|
00005e  491f              LDR      r1,|L3.220|
000060  481d              LDR      r0,|L3.216|
000062  6008              STR      r0,[r1,#0]            ;238  ; SystemCoreClock
000064  481e              LDR      r0,|L3.224|
000066  6800              LDR      r0,[r0,#0]            ;241  ; uwTickPrio
000068  f7fffffe          BL       HAL_InitTick
00006c  b108              CBZ      r0,|L3.114|
00006e  2001              MOVS     r0,#1                 ;243
000070  e7d7              B        |L3.34|
                  |L3.114|
000072  f7fffffe          BL       HAL_GetTick
000076  4605              MOV      r5,r0                 ;247
000078  6820              LDR      r0,[r4,#0]            ;250
00007a  f0207080          BIC      r0,r0,#0x1000000      ;250
00007e  6020              STR      r0,[r4,#0]            ;250
000080  e006              B        |L3.144|
                  |L3.130|
000082  f7fffffe          BL       HAL_GetTick
000086  1b40              SUBS     r0,r0,r5              ;255
000088  2802              CMP      r0,#2                 ;255
00008a  d901              BLS      |L3.144|
00008c  2003              MOVS     r0,#3                 ;257
00008e  e7c8              B        |L3.34|
                  |L3.144|
000090  6820              LDR      r0,[r4,#0]            ;253
000092  0180              LSLS     r0,r0,#6              ;253
000094  d4f5              BMI      |L3.130|
000096  6067              STR      r7,[r4,#4]            ;262
000098  f7fffffe          BL       HAL_GetTick
00009c  4605              MOV      r5,r0                 ;265
00009e  6820              LDR      r0,[r4,#0]            ;268
0000a0  f4202010          BIC      r0,r0,#0x90000        ;268
0000a4  6020              STR      r0,[r4,#0]            ;268
0000a6  e006              B        |L3.182|
                  |L3.168|
0000a8  f7fffffe          BL       HAL_GetTick
0000ac  1b40              SUBS     r0,r0,r5              ;273
0000ae  2864              CMP      r0,#0x64              ;273
0000b0  d901              BLS      |L3.182|
0000b2  2003              MOVS     r0,#3                 ;275
0000b4  e7b5              B        |L3.34|
                  |L3.182|
0000b6  6820              LDR      r0,[r4,#0]            ;271
0000b8  0380              LSLS     r0,r0,#14             ;271
0000ba  d4f5              BMI      |L3.168|
0000bc  6820              LDR      r0,[r4,#0]            ;280
0000be  f4202080          BIC      r0,r0,#0x40000        ;280
0000c2  6020              STR      r0,[r4,#0]            ;280
0000c4  6a60              LDR      r0,[r4,#0x24]         ;322
0000c6  f0407080          ORR      r0,r0,#0x1000000      ;322
0000ca  6260              STR      r0,[r4,#0x24]         ;322
0000cc  60a7              STR      r7,[r4,#8]            ;325
0000ce  2000              MOVS     r0,#0                 ;327
0000d0  e7a7              B        |L3.34|
;;;329    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L3.212|
                          DCD      0x40021000
                  |L3.216|
                          DCD      0x007a1200
                  |L3.220|
                          DCD      SystemCoreClock
                  |L3.224|
                          DCD      uwTickPrio

                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;1045     */
;;;1046   void HAL_RCC_DisableCSS(void)
000000  4901              LDR      r1,|L4.8|
;;;1047   {
;;;1048     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  2000              MOVS     r0,#0
000004  64c8              STR      r0,[r1,#0x4c]
;;;1049   }
000006  4770              BX       lr
;;;1050   
                          ENDP

                  |L4.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;1036     */
;;;1037   void HAL_RCC_EnableCSS(void)
000000  4901              LDR      r1,|L5.8|
;;;1038   {
;;;1039     *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  64c8              STR      r0,[r1,#0x4c]
;;;1040   }
000006  4770              BX       lr
;;;1041   
                          ENDP

                  |L5.8|
                          DCD      0x42420000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1309     */
;;;1310   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1311   {
;;;1312     /* Check the parameters */
;;;1313     assert_param(RCC_ClkInitStruct != NULL);
;;;1314     assert_param(pFLatency != NULL);
;;;1315   
;;;1316     /* Set all possible values for the Clock type parameter --------------------*/
;;;1317     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1318   
;;;1319     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1320     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0b              LDR      r2,|L6.52|
000006  6853              LDR      r3,[r2,#4]
000008  f0030303          AND      r3,r3,#3
00000c  6043              STR      r3,[r0,#4]
;;;1321   
;;;1322     /* Get the HCLK configuration ----------------------------------------------*/
;;;1323     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
00000e  6853              LDR      r3,[r2,#4]
000010  f00303f0          AND      r3,r3,#0xf0
000014  6083              STR      r3,[r0,#8]
;;;1324   
;;;1325     /* Get the APB1 configuration ----------------------------------------------*/
;;;1326     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
000016  6853              LDR      r3,[r2,#4]
000018  f40363e0          AND      r3,r3,#0x700
00001c  60c3              STR      r3,[r0,#0xc]
;;;1327   
;;;1328     /* Get the APB2 configuration ----------------------------------------------*/
;;;1329     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
00001e  6852              LDR      r2,[r2,#4]
000020  f4025260          AND      r2,r2,#0x3800
000024  08d2              LSRS     r2,r2,#3
000026  6102              STR      r2,[r0,#0x10]
;;;1330   
;;;1331   #if   defined(FLASH_ACR_LATENCY)
;;;1332     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1333     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
000028  4803              LDR      r0,|L6.56|
00002a  6800              LDR      r0,[r0,#0]
00002c  f0000007          AND      r0,r0,#7
000030  6008              STR      r0,[r1,#0]
;;;1334   #else
;;;1335     /* For VALUE lines devices, only LATENCY_0 can be set*/
;;;1336     *pFLatency = (uint32_t)FLASH_LATENCY_0;
;;;1337   #endif
;;;1338   }
000032  4770              BX       lr
;;;1339   
                          ENDP

                  |L6.52|
                          DCD      0x40021000
                  |L6.56|
                          DCD      0x40022000

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1173     */
;;;1174   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;1175   {
;;;1176     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1177   }
000004  4770              BX       lr
;;;1178   
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1209     */
;;;1210   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b510              PUSH     {r4,lr}
;;;1211   {
;;;1212     /* Check the parameters */
;;;1213     assert_param(RCC_OscInitStruct != NULL);
;;;1214   
;;;1215     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1216     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
000002  210f              MOVS     r1,#0xf
000004  6001              STR      r1,[r0,#0]
;;;1217                                         | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
;;;1218   
;;;1219   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1220     /* Get the Prediv1 source --------------------------------------------------*/
;;;1221     RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;1222   #endif /* RCC_CFGR2_PREDIV1SRC */
;;;1223   
;;;1224     /* Get the HSE configuration -----------------------------------------------*/
;;;1225     if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000006  4b22              LDR      r3,|L8.144|
000008  6819              LDR      r1,[r3,#0]
00000a  034a              LSLS     r2,r1,#13
00000c  f04f0100          MOV      r1,#0
000010  d503              BPL      |L8.26|
;;;1226     {
;;;1227       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f22a0          MOV      r2,#0x50000
000016  6042              STR      r2,[r0,#4]
000018  e007              B        |L8.42|
                  |L8.26|
;;;1228     }
;;;1229     else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  681a              LDR      r2,[r3,#0]
00001c  03d2              LSLS     r2,r2,#15
00001e  d503              BPL      |L8.40|
;;;1230     {
;;;1231       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000020  f44f3280          MOV      r2,#0x10000
000024  6042              STR      r2,[r0,#4]
000026  e000              B        |L8.42|
                  |L8.40|
;;;1232     }
;;;1233     else
;;;1234     {
;;;1235       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000028  6041              STR      r1,[r0,#4]
                  |L8.42|
;;;1236     }
;;;1237     RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
00002a  685a              LDR      r2,[r3,#4]
00002c  f4023200          AND      r2,r2,#0x20000
000030  6082              STR      r2,[r0,#8]
;;;1238   
;;;1239     /* Get the HSI configuration -----------------------------------------------*/
;;;1240     if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
000032  681a              LDR      r2,[r3,#0]
000034  07d4              LSLS     r4,r2,#31
;;;1241     {
;;;1242       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
000036  f04f0201          MOV      r2,#1
00003a  d001              BEQ      |L8.64|
00003c  6102              STR      r2,[r0,#0x10]
00003e  e000              B        |L8.66|
                  |L8.64|
;;;1243     }
;;;1244     else
;;;1245     {
;;;1246       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000040  6101              STR      r1,[r0,#0x10]
                  |L8.66|
;;;1247     }
;;;1248   
;;;1249     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000042  681c              LDR      r4,[r3,#0]
000044  f3c404c4          UBFX     r4,r4,#3,#5
000048  6144              STR      r4,[r0,#0x14]
;;;1250   
;;;1251     /* Get the LSE configuration -----------------------------------------------*/
;;;1252     if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
00004a  6a1c              LDR      r4,[r3,#0x20]
00004c  0764              LSLS     r4,r4,#29
00004e  d502              BPL      |L8.86|
;;;1253     {
;;;1254       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000050  2405              MOVS     r4,#5
000052  60c4              STR      r4,[r0,#0xc]
000054  e005              B        |L8.98|
                  |L8.86|
;;;1255     }
;;;1256     else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000056  6a1c              LDR      r4,[r3,#0x20]
000058  07e4              LSLS     r4,r4,#31
00005a  d001              BEQ      |L8.96|
;;;1257     {
;;;1258       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
00005c  60c2              STR      r2,[r0,#0xc]
00005e  e000              B        |L8.98|
                  |L8.96|
;;;1259     }
;;;1260     else
;;;1261     {
;;;1262       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000060  60c1              STR      r1,[r0,#0xc]
                  |L8.98|
;;;1263     }
;;;1264   
;;;1265     /* Get the LSI configuration -----------------------------------------------*/
;;;1266     if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
000062  6a5c              LDR      r4,[r3,#0x24]
000064  07e4              LSLS     r4,r4,#31
000066  d001              BEQ      |L8.108|
;;;1267     {
;;;1268       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000068  6182              STR      r2,[r0,#0x18]
00006a  e000              B        |L8.110|
                  |L8.108|
;;;1269     }
;;;1270     else
;;;1271     {
;;;1272       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00006c  6181              STR      r1,[r0,#0x18]
                  |L8.110|
;;;1273     }
;;;1274   
;;;1275   
;;;1276     /* Get the PLL configuration -----------------------------------------------*/
;;;1277     if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
00006e  6819              LDR      r1,[r3,#0]
000070  01c9              LSLS     r1,r1,#7
000072  d502              BPL      |L8.122|
;;;1278     {
;;;1279       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
000074  2102              MOVS     r1,#2
000076  61c1              STR      r1,[r0,#0x1c]
000078  e000              B        |L8.124|
                  |L8.122|
;;;1280     }
;;;1281     else
;;;1282     {
;;;1283       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
00007a  61c2              STR      r2,[r0,#0x1c]
                  |L8.124|
;;;1284     }
;;;1285     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
00007c  6859              LDR      r1,[r3,#4]
00007e  f4013180          AND      r1,r1,#0x10000
000082  6201              STR      r1,[r0,#0x20]
;;;1286     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
000084  6859              LDR      r1,[r3,#4]
000086  f4011170          AND      r1,r1,#0x3c0000
00008a  6241              STR      r1,[r0,#0x24]
;;;1287   #if defined(RCC_CR_PLL2ON)
;;;1288     /* Get the PLL2 configuration -----------------------------------------------*/
;;;1289     if ((RCC->CR & RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
;;;1290     {
;;;1291       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
;;;1292     }
;;;1293     else
;;;1294     {
;;;1295       RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
;;;1296     }
;;;1297     RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
;;;1298     RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
;;;1299   #endif /* RCC_CR_PLL2ON */
;;;1300   }
00008c  bd10              POP      {r4,pc}
;;;1301   
                          ENDP

00008e  0000              DCW      0x0000
                  |L8.144|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1184     */
;;;1185   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;1186   {
;;;1187     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1188     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6849              LDR      r1,[r1,#4]
00000a  4a04              LDR      r2,|L9.28|
00000c  f3c12102          UBFX     r1,r1,#8,#3
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1189   }
000014  bd00              POP      {pc}
;;;1190   
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40021000
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1196     */
;;;1197   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;1198   {
;;;1199     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1200     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6849              LDR      r1,[r1,#4]
00000a  4a04              LDR      r2,|L10.28|
00000c  f3c121c2          UBFX     r1,r1,#11,#3
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;1201   }
000014  bd00              POP      {pc}
;;;1202   
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40021000
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;1079     */
;;;1080   uint32_t HAL_RCC_GetSysClockFreq(void)
000000  4b0e              LDR      r3,|L11.60|
;;;1081   {
;;;1082   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1083     static const uint8_t aPLLMULFactorTable[14U] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
;;;1084     static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;1085   #else
;;;1086     static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
;;;1087   #if defined(RCC_CFGR2_PREDIV1)
;;;1088     static const uint8_t aPredivFactorTable[16U] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
;;;1089   #else
;;;1090     static const uint8_t aPredivFactorTable[2U] = {1, 2};
;;;1091   #endif /*RCC_CFGR2_PREDIV1*/
;;;1092   
;;;1093   #endif
;;;1094     uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
;;;1095     uint32_t sysclockfreq = 0U;
;;;1096   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1097     uint32_t prediv2 = 0U, pll2mul = 0U;
;;;1098   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1099   
;;;1100     tmpreg = RCC->CFGR;
000002  6859              LDR      r1,[r3,#4]
;;;1101   
;;;1102     /* Get SYSCLK source -------------------------------------------------------*/
;;;1103     switch (tmpreg & RCC_CFGR_SWS)
;;;1104     {
;;;1105       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;1106       {
;;;1107         sysclockfreq = HSE_VALUE;
000004  480e              LDR      r0,|L11.64|
000006  f001020c          AND      r2,r1,#0xc            ;1103
00000a  2a04              CMP      r2,#4                 ;1103
00000c  d011              BEQ      |L11.50|
00000e  2a08              CMP      r2,#8                 ;1103
000010  d10f              BNE      |L11.50|
;;;1108         break;
;;;1109       }
;;;1110       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;1111       {
;;;1112         pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
000012  480c              LDR      r0,|L11.68|
000014  f3c14283          UBFX     r2,r1,#18,#4
000018  5c80              LDRB     r0,[r0,r2]
;;;1113         if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
00001a  03c9              LSLS     r1,r1,#15
00001c  d50a              BPL      |L11.52|
;;;1114         {
;;;1115   #if defined(RCC_CFGR2_PREDIV1)
;;;1116           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
;;;1117   #else
;;;1118           prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
00001e  6859              LDR      r1,[r3,#4]
000020  4a08              LDR      r2,|L11.68|
000022  f3c14140          UBFX     r1,r1,#17,#1
000026  1e92              SUBS     r2,r2,#2
000028  5c51              LDRB     r1,[r2,r1]
;;;1119   #endif /*RCC_CFGR2_PREDIV1*/
;;;1120   #if defined(RCC_CFGR2_PREDIV1SRC)
;;;1121   
;;;1122           if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
;;;1123           {
;;;1124             /* PLL2 selected as Prediv1 source */
;;;1125             /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
;;;1126             prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
;;;1127             pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
;;;1128             pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
;;;1129           }
;;;1130           else
;;;1131           {
;;;1132             /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1133             pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
;;;1134           }
;;;1135   
;;;1136           /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
;;;1137           /* In this case need to divide pllclk by 2 */
;;;1138           if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
;;;1139           {
;;;1140             pllclk = pllclk / 2;
;;;1141           }
;;;1142   #else
;;;1143           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
;;;1144           pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
00002a  4a05              LDR      r2,|L11.64|
00002c  4350              MULS     r0,r2,r0
00002e  fbb0f0f1          UDIV     r0,r0,r1
                  |L11.50|
;;;1145   #endif /*RCC_CFGR2_PREDIV1SRC*/
;;;1146         }
;;;1147         else
;;;1148         {
;;;1149           /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
;;;1150           pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
;;;1151         }
;;;1152         sysclockfreq = pllclk;
;;;1153         break;
;;;1154       }
;;;1155       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
;;;1156       default: /* HSI used as system clock */
;;;1157       {
;;;1158         sysclockfreq = HSI_VALUE;
;;;1159         break;
;;;1160       }
;;;1161     }
;;;1162     return sysclockfreq;
;;;1163   }
000032  4770              BX       lr
                  |L11.52|
000034  4904              LDR      r1,|L11.72|
000036  4348              MULS     r0,r1,r0              ;1150
000038  4770              BX       lr
;;;1164   
                          ENDP

00003a  0000              DCW      0x0000
                  |L11.60|
                          DCD      0x40021000
                  |L11.64|
                          DCD      0x007a1200
                  |L11.68|
                          DCD      ||.constdata||+0x2
                  |L11.72|
                          DCD      0x003d0900

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;999      */
;;;1000   void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b530              PUSH     {r4,r5,lr}
;;;1001   {
000002  b085              SUB      sp,sp,#0x14
000004  460d              MOV      r5,r1
;;;1002     GPIO_InitTypeDef gpio = {0U};
000006  2000              MOVS     r0,#0
000008  9003              STR      r0,[sp,#0xc]
;;;1003   
;;;1004     /* Check the parameters */
;;;1005     assert_param(IS_RCC_MCO(RCC_MCOx));
;;;1006     assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;1007     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;1008   
;;;1009     /* Prevent unused argument(s) compilation warning */
;;;1010     UNUSED(RCC_MCOx);
;;;1011     UNUSED(RCC_MCODiv);
;;;1012   
;;;1013     /* Configure the MCO1 pin in alternate function mode */
;;;1014     gpio.Mode      = GPIO_MODE_AF_PP;
00000a  2002              MOVS     r0,#2
00000c  9002              STR      r0,[sp,#8]
;;;1015     gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
00000e  2003              MOVS     r0,#3
000010  9004              STR      r0,[sp,#0x10]
;;;1016     gpio.Pull      = GPIO_NOPULL;
;;;1017     gpio.Pin       = MCO1_PIN;
000012  f44f7080          MOV      r0,#0x100
000016  9001              STR      r0,[sp,#4]
;;;1018   
;;;1019     /* MCO1 Clock Enable */
;;;1020     MCO1_CLK_ENABLE();
000018  4c09              LDR      r4,|L12.64|
00001a  69a0              LDR      r0,[r4,#0x18]
00001c  f0400004          ORR      r0,r0,#4
000020  61a0              STR      r0,[r4,#0x18]
000022  69a0              LDR      r0,[r4,#0x18]
000024  f0000004          AND      r0,r0,#4
000028  9000              STR      r0,[sp,#0]
;;;1021   
;;;1022     HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
00002a  a901              ADD      r1,sp,#4
00002c  4805              LDR      r0,|L12.68|
00002e  f7fffffe          BL       HAL_GPIO_Init
;;;1023   
;;;1024     /* Configure the MCO clock source */
;;;1025     __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
000032  6860              LDR      r0,[r4,#4]
000034  f02060e0          BIC      r0,r0,#0x7000000
000038  4328              ORRS     r0,r0,r5
00003a  6060              STR      r0,[r4,#4]
;;;1026   }
00003c  b005              ADD      sp,sp,#0x14
00003e  bd30              POP      {r4,r5,pc}
;;;1027   
                          ENDP

                  |L12.64|
                          DCD      0x40021000
                  |L12.68|
                          DCD      0x40010800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1344     */
;;;1345   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1346   {
;;;1347     /* Check RCC CSSF flag  */
;;;1348     if (__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4c04              LDR      r4,|L13.20|
000004  68a0              LDR      r0,[r4,#8]
000006  0600              LSLS     r0,r0,#24
000008  d503              BPL      |L13.18|
;;;1349     {
;;;1350       /* RCC Clock Security System interrupt user callback */
;;;1351       HAL_RCC_CSSCallback();
00000a  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1352   
;;;1353       /* Clear RCC CSS pending bit */
;;;1354       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
00000e  2080              MOVS     r0,#0x80
000010  72a0              STRB     r0,[r4,#0xa]
                  |L13.18|
;;;1355     }
;;;1356   }
000012  bd10              POP      {r4,pc}
;;;1357   
                          ENDP

                  |L13.20|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;344      */
;;;345    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;346    {
000004  4604              MOV      r4,r0
;;;347      uint32_t tickstart;
;;;348      uint32_t pll_config;
;;;349    
;;;350      /* Check Null pointer */
;;;351      if (RCC_OscInitStruct == NULL)
000006  2c00              CMP      r4,#0
000008  d00e              BEQ      |L14.40|
;;;352      {
;;;353        return HAL_ERROR;
;;;354      }
;;;355    
;;;356      /* Check the parameters */
;;;357      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;358    
;;;359      /*------------------------------- HSE Configuration ------------------------*/
;;;360      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
00000a  7820              LDRB     r0,[r4,#0]
;;;361      {
;;;362        /* Check the parameters */
;;;363        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;364    
;;;365        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;366        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
00000c  4dd9              LDR      r5,|L14.884|
00000e  07c0              LSLS     r0,r0,#31             ;360
000010  d05e              BEQ      |L14.208|
000012  6868              LDR      r0,[r5,#4]
000014  f3c00081          UBFX     r0,r0,#2,#2
000018  2801              CMP      r0,#1
00001a  d00b              BEQ      |L14.52|
;;;367            || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
00001c  6868              LDR      r0,[r5,#4]
00001e  f3c00081          UBFX     r0,r0,#2,#2
000022  2802              CMP      r0,#2
000024  d003              BEQ      |L14.46|
000026  e00c              B        |L14.66|
                  |L14.40|
000028  2001              MOVS     r0,#1                 ;353
                  |L14.42|
;;;368        {
;;;369          if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;370          {
;;;371            return HAL_ERROR;
;;;372          }
;;;373        }
;;;374        else
;;;375        {
;;;376          /* Set the new HSE configuration ---------------------------------------*/
;;;377          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;378    
;;;379    
;;;380          /* Check the HSE State */
;;;381          if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
;;;382          {
;;;383            /* Get Start Tick */
;;;384            tickstart = HAL_GetTick();
;;;385    
;;;386            /* Wait till HSE is ready */
;;;387            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;388            {
;;;389              if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;390              {
;;;391                return HAL_TIMEOUT;
;;;392              }
;;;393            }
;;;394          }
;;;395          else
;;;396          {
;;;397            /* Get Start Tick */
;;;398            tickstart = HAL_GetTick();
;;;399    
;;;400            /* Wait till HSE is disabled */
;;;401            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;402            {
;;;403              if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;404              {
;;;405                return HAL_TIMEOUT;
;;;406              }
;;;407            }
;;;408          }
;;;409        }
;;;410      }
;;;411      /*----------------------------- HSI Configuration --------------------------*/
;;;412      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;413      {
;;;414        /* Check the parameters */
;;;415        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;416        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;417    
;;;418        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;419        if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
;;;420            || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
;;;421        {
;;;422          /* When HSI is used as system clock it will not disabled */
;;;423          if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;424          {
;;;425            return HAL_ERROR;
;;;426          }
;;;427          /* Otherwise, just the calibration is allowed */
;;;428          else
;;;429          {
;;;430            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;431            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;432          }
;;;433        }
;;;434        else
;;;435        {
;;;436          /* Check the HSI State */
;;;437          if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
;;;438          {
;;;439            /* Enable the Internal High Speed oscillator (HSI). */
;;;440            __HAL_RCC_HSI_ENABLE();
;;;441    
;;;442            /* Get Start Tick */
;;;443            tickstart = HAL_GetTick();
;;;444    
;;;445            /* Wait till HSI is ready */
;;;446            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;447            {
;;;448              if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
;;;449              {
;;;450                return HAL_TIMEOUT;
;;;451              }
;;;452            }
;;;453    
;;;454            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;455            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;456          }
;;;457          else
;;;458          {
;;;459            /* Disable the Internal High Speed oscillator (HSI). */
;;;460            __HAL_RCC_HSI_DISABLE();
;;;461    
;;;462            /* Get Start Tick */
;;;463            tickstart = HAL_GetTick();
;;;464    
;;;465            /* Wait till HSI is disabled */
;;;466            while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;467            {
;;;468              if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
;;;469              {
;;;470                return HAL_TIMEOUT;
;;;471              }
;;;472            }
;;;473          }
;;;474        }
;;;475      }
;;;476      /*------------------------------ LSI Configuration -------------------------*/
;;;477      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;478      {
;;;479        /* Check the parameters */
;;;480        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;481    
;;;482        /* Check the LSI State */
;;;483        if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;484        {
;;;485          /* Enable the Internal Low Speed oscillator (LSI). */
;;;486          __HAL_RCC_LSI_ENABLE();
;;;487    
;;;488          /* Get Start Tick */
;;;489          tickstart = HAL_GetTick();
;;;490    
;;;491          /* Wait till LSI is ready */
;;;492          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;493          {
;;;494            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
;;;495            {
;;;496              return HAL_TIMEOUT;
;;;497            }
;;;498          }
;;;499          /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
;;;500              should be added.*/
;;;501          RCC_Delay(1);
;;;502        }
;;;503        else
;;;504        {
;;;505          /* Disable the Internal Low Speed oscillator (LSI). */
;;;506          __HAL_RCC_LSI_DISABLE();
;;;507    
;;;508          /* Get Start Tick */
;;;509          tickstart = HAL_GetTick();
;;;510    
;;;511          /* Wait till LSI is disabled */
;;;512          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;513          {
;;;514            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
;;;515            {
;;;516              return HAL_TIMEOUT;
;;;517            }
;;;518          }
;;;519        }
;;;520      }
;;;521      /*------------------------------ LSE Configuration -------------------------*/
;;;522      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;523      {
;;;524        FlagStatus       pwrclkchanged = RESET;
;;;525    
;;;526        /* Check the parameters */
;;;527        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;528    
;;;529        /* Update LSE configuration in Backup Domain control register    */
;;;530        /* Requires to enable write access to Backup Domain of necessary */
;;;531        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;532        {
;;;533          __HAL_RCC_PWR_CLK_ENABLE();
;;;534          pwrclkchanged = SET;
;;;535        }
;;;536    
;;;537        if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;538        {
;;;539          /* Enable write access to Backup domain */
;;;540          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;541    
;;;542          /* Wait for Backup domain Write protection disable */
;;;543          tickstart = HAL_GetTick();
;;;544    
;;;545          while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;546          {
;;;547            if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;548            {
;;;549              return HAL_TIMEOUT;
;;;550            }
;;;551          }
;;;552        }
;;;553    
;;;554        /* Set the new LSE configuration -----------------------------------------*/
;;;555        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;556        /* Check the LSE State */
;;;557        if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;558        {
;;;559          /* Get Start Tick */
;;;560          tickstart = HAL_GetTick();
;;;561    
;;;562          /* Wait till LSE is ready */
;;;563          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;564          {
;;;565            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
;;;566            {
;;;567              return HAL_TIMEOUT;
;;;568            }
;;;569          }
;;;570        }
;;;571        else
;;;572        {
;;;573          /* Get Start Tick */
;;;574          tickstart = HAL_GetTick();
;;;575    
;;;576          /* Wait till LSE is disabled */
;;;577          while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;578          {
;;;579            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
;;;580            {
;;;581              return HAL_TIMEOUT;
;;;582            }
;;;583          }
;;;584        }
;;;585    
;;;586        /* Require to disable power clock if necessary */
;;;587        if (pwrclkchanged == SET)
;;;588        {
;;;589          __HAL_RCC_PWR_CLK_DISABLE();
;;;590        }
;;;591      }
;;;592    
;;;593    #if defined(RCC_CR_PLL2ON)
;;;594      /*-------------------------------- PLL2 Configuration -----------------------*/
;;;595      /* Check the parameters */
;;;596      assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
;;;597      if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
;;;598      {
;;;599        /* This bit can not be cleared if the PLL2 clock is used indirectly as system
;;;600          clock (i.e. it is used as PLL clock entry that is used as system clock). */
;;;601        if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
;;;602            (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
;;;603            ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
;;;604        {
;;;605          return HAL_ERROR;
;;;606        }
;;;607        else
;;;608        {
;;;609          if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
;;;610          {
;;;611            /* Check the parameters */
;;;612            assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
;;;613            assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
;;;614    
;;;615            /* Prediv2 can be written only when the PLLI2S is disabled. */
;;;616            /* Return an error only if new value is different from the programmed value */
;;;617            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
;;;618                (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
;;;619            {
;;;620              return HAL_ERROR;
;;;621            }
;;;622    
;;;623            /* Disable the main PLL2. */
;;;624            __HAL_RCC_PLL2_DISABLE();
;;;625    
;;;626            /* Get Start Tick */
;;;627            tickstart = HAL_GetTick();
;;;628    
;;;629            /* Wait till PLL2 is disabled */
;;;630            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
;;;631            {
;;;632              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;633              {
;;;634                return HAL_TIMEOUT;
;;;635              }
;;;636            }
;;;637    
;;;638            /* Configure the HSE prediv2 factor --------------------------------*/
;;;639            __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
;;;640    
;;;641            /* Configure the main PLL2 multiplication factors. */
;;;642            __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
;;;643    
;;;644            /* Enable the main PLL2. */
;;;645            __HAL_RCC_PLL2_ENABLE();
;;;646    
;;;647            /* Get Start Tick */
;;;648            tickstart = HAL_GetTick();
;;;649    
;;;650            /* Wait till PLL2 is ready */
;;;651            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
;;;652            {
;;;653              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;654              {
;;;655                return HAL_TIMEOUT;
;;;656              }
;;;657            }
;;;658          }
;;;659          else
;;;660          {
;;;661            /* Set PREDIV1 source to HSE */
;;;662            CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
;;;663    
;;;664            /* Disable the main PLL2. */
;;;665            __HAL_RCC_PLL2_DISABLE();
;;;666    
;;;667            /* Get Start Tick */
;;;668            tickstart = HAL_GetTick();
;;;669    
;;;670            /* Wait till PLL2 is disabled */
;;;671            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
;;;672            {
;;;673              if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
;;;674              {
;;;675                return HAL_TIMEOUT;
;;;676              }
;;;677            }
;;;678          }
;;;679        }
;;;680      }
;;;681    
;;;682    #endif /* RCC_CR_PLL2ON */
;;;683      /*-------------------------------- PLL Configuration -----------------------*/
;;;684      /* Check the parameters */
;;;685      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;686      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;687      {
;;;688        /* Check if the PLL is used as system clock or not */
;;;689        if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;690        {
;;;691          if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;692          {
;;;693            /* Check the parameters */
;;;694            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;695            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;696    
;;;697            /* Disable the main PLL. */
;;;698            __HAL_RCC_PLL_DISABLE();
;;;699    
;;;700            /* Get Start Tick */
;;;701            tickstart = HAL_GetTick();
;;;702    
;;;703            /* Wait till PLL is disabled */
;;;704            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;705            {
;;;706              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;707              {
;;;708                return HAL_TIMEOUT;
;;;709              }
;;;710            }
;;;711    
;;;712            /* Configure the HSE prediv factor --------------------------------*/
;;;713            /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
;;;714            if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
;;;715            {
;;;716              /* Check the parameter */
;;;717              assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
;;;718    #if defined(RCC_CFGR2_PREDIV1SRC)
;;;719              assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
;;;720    
;;;721              /* Set PREDIV1 source */
;;;722              SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
;;;723    #endif /* RCC_CFGR2_PREDIV1SRC */
;;;724    
;;;725              /* Set PREDIV1 Value */
;;;726              __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
;;;727            }
;;;728    
;;;729            /* Configure the main PLL clock source and multiplication factors. */
;;;730            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;731                                 RCC_OscInitStruct->PLL.PLLMUL);
;;;732            /* Enable the main PLL. */
;;;733            __HAL_RCC_PLL_ENABLE();
;;;734    
;;;735            /* Get Start Tick */
;;;736            tickstart = HAL_GetTick();
;;;737    
;;;738            /* Wait till PLL is ready */
;;;739            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;740            {
;;;741              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;742              {
;;;743                return HAL_TIMEOUT;
;;;744              }
;;;745            }
;;;746          }
;;;747          else
;;;748          {
;;;749            /* Disable the main PLL. */
;;;750            __HAL_RCC_PLL_DISABLE();
;;;751    
;;;752            /* Get Start Tick */
;;;753            tickstart = HAL_GetTick();
;;;754    
;;;755            /* Wait till PLL is disabled */
;;;756            while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;757            {
;;;758              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;759              {
;;;760                return HAL_TIMEOUT;
;;;761              }
;;;762            }
;;;763          }
;;;764        }
;;;765        else
;;;766        {
;;;767          /* Check if there is a request to disable the PLL used as System clock source */
;;;768          if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
;;;769          {
;;;770            return HAL_ERROR;
;;;771          }
;;;772          else
;;;773          {
;;;774            /* Do not return HAL_ERROR if request repeats the current configuration */
;;;775            pll_config = RCC->CFGR;
;;;776            if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
;;;777                (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
;;;778            {
;;;779              return HAL_ERROR;
;;;780            }
;;;781          }
;;;782        }
;;;783      }
;;;784    
;;;785      return HAL_OK;
;;;786    }
00002a  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.46|
00002e  6868              LDR      r0,[r5,#4]            ;367
000030  03c0              LSLS     r0,r0,#15             ;367
000032  d506              BPL      |L14.66|
                  |L14.52|
000034  6828              LDR      r0,[r5,#0]            ;369
000036  0380              LSLS     r0,r0,#14             ;369
000038  d54a              BPL      |L14.208|
00003a  6860              LDR      r0,[r4,#4]            ;369
00003c  bba8              CBNZ     r0,|L14.170|
00003e  2001              MOVS     r0,#1                 ;371
000040  e7f3              B        |L14.42|
                  |L14.66|
000042  6860              LDR      r0,[r4,#4]            ;377
000044  f5b03f80          CMP      r0,#0x10000           ;377
000048  d011              BEQ      |L14.110|
00004a  b1a8              CBZ      r0,|L14.120|
00004c  f5b02fa0          CMP      r0,#0x50000           ;377
000050  d01b              BEQ      |L14.138|
000052  6828              LDR      r0,[r5,#0]            ;377
000054  f4203080          BIC      r0,r0,#0x10000        ;377
000058  6028              STR      r0,[r5,#0]            ;377
00005a  6828              LDR      r0,[r5,#0]            ;377
00005c  f4202080          BIC      r0,r0,#0x40000        ;377
000060  6028              STR      r0,[r5,#0]            ;377
                  |L14.98|
000062  6860              LDR      r0,[r4,#4]            ;381
000064  b330              CBZ      r0,|L14.180|
000066  f7fffffe          BL       HAL_GetTick
00006a  4606              MOV      r6,r0                 ;384
00006c  e01e              B        |L14.172|
                  |L14.110|
00006e  6828              LDR      r0,[r5,#0]            ;377
000070  f4403080          ORR      r0,r0,#0x10000        ;377
000074  6028              STR      r0,[r5,#0]            ;377
000076  e7f4              B        |L14.98|
                  |L14.120|
000078  6828              LDR      r0,[r5,#0]            ;377
00007a  f4203080          BIC      r0,r0,#0x10000        ;377
00007e  6028              STR      r0,[r5,#0]            ;377
000080  6828              LDR      r0,[r5,#0]            ;377
000082  f4202080          BIC      r0,r0,#0x40000        ;377
000086  6028              STR      r0,[r5,#0]            ;377
000088  e7eb              B        |L14.98|
                  |L14.138|
00008a  6828              LDR      r0,[r5,#0]            ;377
00008c  f4402080          ORR      r0,r0,#0x40000        ;377
000090  6028              STR      r0,[r5,#0]            ;377
000092  6828              LDR      r0,[r5,#0]            ;377
000094  f4403080          ORR      r0,r0,#0x10000        ;377
000098  6028              STR      r0,[r5,#0]            ;377
00009a  e7e2              B        |L14.98|
                  |L14.156|
00009c  f7fffffe          BL       HAL_GetTick
0000a0  1b80              SUBS     r0,r0,r6              ;389
0000a2  2864              CMP      r0,#0x64              ;389
0000a4  d902              BLS      |L14.172|
0000a6  2003              MOVS     r0,#3                 ;391
0000a8  e7bf              B        |L14.42|
                  |L14.170|
0000aa  e011              B        |L14.208|
                  |L14.172|
0000ac  6828              LDR      r0,[r5,#0]            ;387
0000ae  0380              LSLS     r0,r0,#14             ;387
0000b0  d5f4              BPL      |L14.156|
0000b2  e00d              B        |L14.208|
                  |L14.180|
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  4606              MOV      r6,r0                 ;398
0000ba  e006              B        |L14.202|
                  |L14.188|
0000bc  f7fffffe          BL       HAL_GetTick
0000c0  1b80              SUBS     r0,r0,r6              ;403
0000c2  2864              CMP      r0,#0x64              ;403
0000c4  d901              BLS      |L14.202|
0000c6  2003              MOVS     r0,#3                 ;405
0000c8  e7af              B        |L14.42|
                  |L14.202|
0000ca  6828              LDR      r0,[r5,#0]            ;401
0000cc  0380              LSLS     r0,r0,#14             ;401
0000ce  d4f5              BMI      |L14.188|
                  |L14.208|
0000d0  7820              LDRB     r0,[r4,#0]            ;412
0000d2  f8df82a4          LDR      r8,|L14.888|
0000d6  0780              LSLS     r0,r0,#30             ;412
0000d8  f04f0a01          MOV      r10,#1                ;353
0000dc  f04f0900          MOV      r9,#0                 ;353
0000e0  d545              BPL      |L14.366|
0000e2  6868              LDR      r0,[r5,#4]            ;419
0000e4  f0100f0c          TST      r0,#0xc               ;419
0000e8  d007              BEQ      |L14.250|
0000ea  6868              LDR      r0,[r5,#4]            ;420
0000ec  f3c00081          UBFX     r0,r0,#2,#2           ;420
0000f0  2802              CMP      r0,#2                 ;420
0000f2  d112              BNE      |L14.282|
0000f4  6868              LDR      r0,[r5,#4]            ;420
0000f6  03c0              LSLS     r0,r0,#15             ;420
0000f8  d40f              BMI      |L14.282|
                  |L14.250|
0000fa  6828              LDR      r0,[r5,#0]            ;423
0000fc  0780              LSLS     r0,r0,#30             ;423
0000fe  d504              BPL      |L14.266|
000100  6920              LDR      r0,[r4,#0x10]         ;423
000102  2801              CMP      r0,#1                 ;423
000104  d001              BEQ      |L14.266|
000106  2001              MOVS     r0,#1                 ;425
000108  e78f              B        |L14.42|
                  |L14.266|
00010a  6828              LDR      r0,[r5,#0]            ;431
00010c  6961              LDR      r1,[r4,#0x14]         ;431
00010e  f02000f8          BIC      r0,r0,#0xf8           ;431
000112  ea4000c1          ORR      r0,r0,r1,LSL #3       ;431
000116  6028              STR      r0,[r5,#0]            ;431
000118  e029              B        |L14.366|
                  |L14.282|
00011a  6920              LDR      r0,[r4,#0x10]         ;437
00011c  b1b8              CBZ      r0,|L14.334|
00011e  f8c8a000          STR      r10,[r8,#0]           ;440
000122  f7fffffe          BL       HAL_GetTick
000126  4606              MOV      r6,r0                 ;443
000128  e006              B        |L14.312|
                  |L14.298|
00012a  f7fffffe          BL       HAL_GetTick
00012e  1b80              SUBS     r0,r0,r6              ;448
000130  2802              CMP      r0,#2                 ;448
000132  d901              BLS      |L14.312|
000134  2003              MOVS     r0,#3                 ;450
000136  e778              B        |L14.42|
                  |L14.312|
000138  6828              LDR      r0,[r5,#0]            ;446
00013a  0780              LSLS     r0,r0,#30             ;446
00013c  d5f5              BPL      |L14.298|
00013e  6828              LDR      r0,[r5,#0]            ;455
000140  6961              LDR      r1,[r4,#0x14]         ;455
000142  f02000f8          BIC      r0,r0,#0xf8           ;455
000146  ea4000c1          ORR      r0,r0,r1,LSL #3       ;455
00014a  6028              STR      r0,[r5,#0]            ;455
00014c  e00f              B        |L14.366|
                  |L14.334|
00014e  f8c89000          STR      r9,[r8,#0]            ;460
000152  f7fffffe          BL       HAL_GetTick
000156  4606              MOV      r6,r0                 ;463
000158  e006              B        |L14.360|
                  |L14.346|
00015a  f7fffffe          BL       HAL_GetTick
00015e  1b80              SUBS     r0,r0,r6              ;468
000160  2802              CMP      r0,#2                 ;468
000162  d901              BLS      |L14.360|
000164  2003              MOVS     r0,#3                 ;470
000166  e760              B        |L14.42|
                  |L14.360|
000168  6828              LDR      r0,[r5,#0]            ;466
00016a  0780              LSLS     r0,r0,#30             ;466
00016c  d4f5              BMI      |L14.346|
                  |L14.366|
00016e  7820              LDRB     r0,[r4,#0]            ;477
000170  0700              LSLS     r0,r0,#28             ;477
000172  d526              BPL      |L14.450|
000174  4881              LDR      r0,|L14.892|
000176  69a1              LDR      r1,[r4,#0x18]         ;483
000178  b199              CBZ      r1,|L14.418|
00017a  f8c0a000          STR      r10,[r0,#0]           ;486
00017e  f7fffffe          BL       HAL_GetTick
000182  4606              MOV      r6,r0                 ;489
000184  e006              B        |L14.404|
                  |L14.390|
000186  f7fffffe          BL       HAL_GetTick
00018a  1b80              SUBS     r0,r0,r6              ;494
00018c  2802              CMP      r0,#2                 ;494
00018e  d901              BLS      |L14.404|
000190  2003              MOVS     r0,#3                 ;496
000192  e74a              B        |L14.42|
                  |L14.404|
000194  6a68              LDR      r0,[r5,#0x24]         ;492
000196  0780              LSLS     r0,r0,#30             ;492
000198  d5f5              BPL      |L14.390|
00019a  2001              MOVS     r0,#1                 ;501
00019c  f7fffffe          BL       RCC_Delay
0001a0  e00f              B        |L14.450|
                  |L14.418|
0001a2  f8c09000          STR      r9,[r0,#0]            ;506
0001a6  f7fffffe          BL       HAL_GetTick
0001aa  4606              MOV      r6,r0                 ;509
0001ac  e006              B        |L14.444|
                  |L14.430|
0001ae  f7fffffe          BL       HAL_GetTick
0001b2  1b80              SUBS     r0,r0,r6              ;514
0001b4  2802              CMP      r0,#2                 ;514
0001b6  d901              BLS      |L14.444|
0001b8  2003              MOVS     r0,#3                 ;516
0001ba  e736              B        |L14.42|
                  |L14.444|
0001bc  6a68              LDR      r0,[r5,#0x24]         ;512
0001be  0780              LSLS     r0,r0,#30             ;512
0001c0  d4f5              BMI      |L14.430|
                  |L14.450|
0001c2  7820              LDRB     r0,[r4,#0]            ;522
0001c4  0740              LSLS     r0,r0,#29             ;522
0001c6  d573              BPL      |L14.688|
0001c8  2600              MOVS     r6,#0                 ;524
0001ca  69e8              LDR      r0,[r5,#0x1c]         ;531
0001cc  00c0              LSLS     r0,r0,#3              ;531
0001ce  d408              BMI      |L14.482|
0001d0  69e8              LDR      r0,[r5,#0x1c]         ;533
0001d2  f0405080          ORR      r0,r0,#0x10000000     ;533
0001d6  61e8              STR      r0,[r5,#0x1c]         ;533
0001d8  69e8              LDR      r0,[r5,#0x1c]         ;533
0001da  f0005080          AND      r0,r0,#0x10000000     ;533
0001de  9000              STR      r0,[sp,#0]            ;533
0001e0  2601              MOVS     r6,#1                 ;534
                  |L14.482|
0001e2  f8dfb19c          LDR      r11,|L14.896|
0001e6  f8db0000          LDR      r0,[r11,#0]           ;537
0001ea  05c0              LSLS     r0,r0,#23             ;537
0001ec  d414              BMI      |L14.536|
0001ee  f8db0000          LDR      r0,[r11,#0]           ;540
0001f2  f4407080          ORR      r0,r0,#0x100          ;540
0001f6  f8cb0000          STR      r0,[r11,#0]           ;540
0001fa  f7fffffe          BL       HAL_GetTick
0001fe  4607              MOV      r7,r0                 ;543
000200  e006              B        |L14.528|
                  |L14.514|
000202  f7fffffe          BL       HAL_GetTick
000206  1bc0              SUBS     r0,r0,r7              ;547
000208  2864              CMP      r0,#0x64              ;547
00020a  d901              BLS      |L14.528|
00020c  2003              MOVS     r0,#3                 ;549
00020e  e70c              B        |L14.42|
                  |L14.528|
000210  f8db0000          LDR      r0,[r11,#0]           ;545
000214  05c0              LSLS     r0,r0,#23             ;545
000216  d5f4              BPL      |L14.514|
                  |L14.536|
000218  68e0              LDR      r0,[r4,#0xc]          ;555
00021a  2801              CMP      r0,#1                 ;555
00021c  d012              BEQ      |L14.580|
00021e  b1b0              CBZ      r0,|L14.590|
000220  2805              CMP      r0,#5                 ;555
000222  d01d              BEQ      |L14.608|
000224  6a28              LDR      r0,[r5,#0x20]         ;555
000226  f0200001          BIC      r0,r0,#1              ;555
00022a  6228              STR      r0,[r5,#0x20]         ;555
00022c  6a28              LDR      r0,[r5,#0x20]         ;555
00022e  f0200004          BIC      r0,r0,#4              ;555
000232  6228              STR      r0,[r5,#0x20]         ;555
                  |L14.564|
000234  68e0              LDR      r0,[r4,#0xc]          ;557
000236  f2413b88          MOV      r11,#0x1388           ;565
00023a  b328              CBZ      r0,|L14.648|
00023c  f7fffffe          BL       HAL_GetTick
000240  4607              MOV      r7,r0                 ;560
000242  e01d              B        |L14.640|
                  |L14.580|
000244  6a28              LDR      r0,[r5,#0x20]         ;555
000246  f0400001          ORR      r0,r0,#1              ;555
00024a  6228              STR      r0,[r5,#0x20]         ;555
00024c  e7f2              B        |L14.564|
                  |L14.590|
00024e  6a28              LDR      r0,[r5,#0x20]         ;555
000250  f0200001          BIC      r0,r0,#1              ;555
000254  6228              STR      r0,[r5,#0x20]         ;555
000256  6a28              LDR      r0,[r5,#0x20]         ;555
000258  f0200004          BIC      r0,r0,#4              ;555
00025c  6228              STR      r0,[r5,#0x20]         ;555
00025e  e7e9              B        |L14.564|
                  |L14.608|
000260  6a28              LDR      r0,[r5,#0x20]         ;555
000262  f0400004          ORR      r0,r0,#4              ;555
000266  6228              STR      r0,[r5,#0x20]         ;555
000268  6a28              LDR      r0,[r5,#0x20]         ;555
00026a  f0400001          ORR      r0,r0,#1              ;555
00026e  6228              STR      r0,[r5,#0x20]         ;555
000270  e7e0              B        |L14.564|
                  |L14.626|
000272  f7fffffe          BL       HAL_GetTick
000276  1bc0              SUBS     r0,r0,r7              ;565
000278  4558              CMP      r0,r11                ;565
00027a  d901              BLS      |L14.640|
00027c  2003              MOVS     r0,#3                 ;567
00027e  e6d4              B        |L14.42|
                  |L14.640|
000280  6a28              LDR      r0,[r5,#0x20]         ;563
000282  0780              LSLS     r0,r0,#30             ;563
000284  d5f5              BPL      |L14.626|
000286  e00d              B        |L14.676|
                  |L14.648|
000288  f7fffffe          BL       HAL_GetTick
00028c  4607              MOV      r7,r0                 ;574
00028e  e006              B        |L14.670|
                  |L14.656|
000290  f7fffffe          BL       HAL_GetTick
000294  1bc0              SUBS     r0,r0,r7              ;579
000296  4558              CMP      r0,r11                ;579
000298  d901              BLS      |L14.670|
00029a  2003              MOVS     r0,#3                 ;581
00029c  e6c5              B        |L14.42|
                  |L14.670|
00029e  6a28              LDR      r0,[r5,#0x20]         ;577
0002a0  0780              LSLS     r0,r0,#30             ;577
0002a2  d4f5              BMI      |L14.656|
                  |L14.676|
0002a4  2e01              CMP      r6,#1                 ;587
0002a6  d103              BNE      |L14.688|
0002a8  69e8              LDR      r0,[r5,#0x1c]         ;589
0002aa  f0205080          BIC      r0,r0,#0x10000000     ;589
0002ae  61e8              STR      r0,[r5,#0x1c]         ;589
                  |L14.688|
0002b0  69e0              LDR      r0,[r4,#0x1c]         ;686
0002b2  b3a0              CBZ      r0,|L14.798|
0002b4  6869              LDR      r1,[r5,#4]            ;689
0002b6  f3c10181          UBFX     r1,r1,#2,#2           ;689
0002ba  2902              CMP      r1,#2                 ;689
0002bc  d046              BEQ      |L14.844|
0002be  2802              CMP      r0,#2                 ;691
0002c0  d005              BEQ      |L14.718|
0002c2  f8c89060          STR      r9,[r8,#0x60]         ;750
0002c6  f7fffffe          BL       HAL_GetTick
0002ca  4604              MOV      r4,r0                 ;753
0002cc  e03a              B        |L14.836|
                  |L14.718|
0002ce  f8c89060          STR      r9,[r8,#0x60]         ;698
0002d2  f7fffffe          BL       HAL_GetTick
0002d6  4606              MOV      r6,r0                 ;701
0002d8  e006              B        |L14.744|
                  |L14.730|
0002da  f7fffffe          BL       HAL_GetTick
0002de  1b80              SUBS     r0,r0,r6              ;706
0002e0  2802              CMP      r0,#2                 ;706
0002e2  d901              BLS      |L14.744|
0002e4  2003              MOVS     r0,#3                 ;708
0002e6  e6a0              B        |L14.42|
                  |L14.744|
0002e8  6828              LDR      r0,[r5,#0]            ;704
0002ea  0180              LSLS     r0,r0,#6              ;704
0002ec  d4f5              BMI      |L14.730|
0002ee  6a20              LDR      r0,[r4,#0x20]         ;714
0002f0  f5b03f80          CMP      r0,#0x10000           ;714
0002f4  d105              BNE      |L14.770|
0002f6  6868              LDR      r0,[r5,#4]            ;726
0002f8  68a1              LDR      r1,[r4,#8]            ;726
0002fa  f4203000          BIC      r0,r0,#0x20000        ;726
0002fe  4308              ORRS     r0,r0,r1              ;726
000300  6068              STR      r0,[r5,#4]            ;726
                  |L14.770|
000302  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;730
000306  4308              ORRS     r0,r0,r1              ;730
000308  6869              LDR      r1,[r5,#4]            ;730
00030a  f4211174          BIC      r1,r1,#0x3d0000       ;730
00030e  4308              ORRS     r0,r0,r1              ;730
000310  6068              STR      r0,[r5,#4]            ;730
000312  f8c8a060          STR      r10,[r8,#0x60]        ;733
000316  f7fffffe          BL       HAL_GetTick
00031a  4604              MOV      r4,r0                 ;736
00031c  e007              B        |L14.814|
                  |L14.798|
00031e  e026              B        |L14.878|
                  |L14.800|
000320  f7fffffe          BL       HAL_GetTick
000324  1b00              SUBS     r0,r0,r4              ;741
000326  2802              CMP      r0,#2                 ;741
000328  d901              BLS      |L14.814|
00032a  2003              MOVS     r0,#3                 ;743
00032c  e67d              B        |L14.42|
                  |L14.814|
00032e  6828              LDR      r0,[r5,#0]            ;739
000330  0180              LSLS     r0,r0,#6              ;739
000332  d5f5              BPL      |L14.800|
000334  e01b              B        |L14.878|
                  |L14.822|
000336  f7fffffe          BL       HAL_GetTick
00033a  1b00              SUBS     r0,r0,r4              ;758
00033c  2802              CMP      r0,#2                 ;758
00033e  d901              BLS      |L14.836|
000340  2003              MOVS     r0,#3                 ;760
000342  e672              B        |L14.42|
                  |L14.836|
000344  6828              LDR      r0,[r5,#0]            ;756
000346  0180              LSLS     r0,r0,#6              ;756
000348  d4f5              BMI      |L14.822|
00034a  e010              B        |L14.878|
                  |L14.844|
00034c  2801              CMP      r0,#1                 ;768
00034e  d00c              BEQ      |L14.874|
000350  6868              LDR      r0,[r5,#4]            ;775
000352  6a22              LDR      r2,[r4,#0x20]         ;776
000354  f4003180          AND      r1,r0,#0x10000        ;776
000358  4291              CMP      r1,r2                 ;776
00035a  d104              BNE      |L14.870|
00035c  6a61              LDR      r1,[r4,#0x24]         ;777
00035e  f4001070          AND      r0,r0,#0x3c0000       ;777
000362  4288              CMP      r0,r1                 ;777
000364  d003              BEQ      |L14.878|
                  |L14.870|
000366  2001              MOVS     r0,#1                 ;779
000368  e65f              B        |L14.42|
                  |L14.874|
00036a  2001              MOVS     r0,#1                 ;770
00036c  e65d              B        |L14.42|
                  |L14.878|
00036e  2000              MOVS     r0,#0                 ;785
000370  e65b              B        |L14.42|
;;;787    
                          ENDP

000372  0000              DCW      0x0000
                  |L14.884|
                          DCD      0x40021000
                  |L14.888|
                          DCD      0x42420000
                  |L14.892|
                          DCD      0x42420480
                  |L14.896|
                          DCD      0x40007000

                          AREA ||i.RCC_Delay||, CODE, READONLY, ALIGN=2

                  RCC_Delay PROC
;;;1362     */
;;;1363   static void RCC_Delay(uint32_t mdelay)
000000  b508              PUSH     {r3,lr}
;;;1364   {
;;;1365     __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
000002  4907              LDR      r1,|L15.32|
000004  f44f52fa          MOV      r2,#0x1f40
000008  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00000a  fbb1f1f2          UDIV     r1,r1,r2
00000e  4341              MULS     r1,r0,r1
000010  9100              STR      r1,[sp,#0]
                  |L15.18|
;;;1366     do
;;;1367     {
;;;1368       __NOP();
000012  bf00              NOP      
;;;1369     }
;;;1370     while (Delay --);
000014  9800              LDR      r0,[sp,#0]
000016  1e41              SUBS     r1,r0,#1
000018  9100              STR      r1,[sp,#0]
00001a  d2fa              BCS      |L15.18|
;;;1371   }
00001c  bd08              POP      {r3,pc}
;;;1372   
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      SystemCoreClock

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  aPredivFactorTable
000000  0102              DCB      0x01,0x02
                  aPLLMULFactorTable
000002  0203              DCB      0x02,0x03
000004  04050607          DCB      0x04,0x05,0x06,0x07
000008  08090a0b          DCB      0x08,0x09,0x0a,0x0b
00000c  0c0d0e0f          DCB      0x0c,0x0d,0x0e,0x0f
000010  1010              DCB      0x10,0x10

;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX|
#line 665
|__asm___19_stm32f1xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
