; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otft_lcd\stm32f1xx_hal_dma.o --asm_dir=./ --list_dir=--list --depend=tft_lcd\stm32f1xx_hal_dma.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I../Drivers/BSP/Components -I../Drivers/BSP\Components/Common -I..\Middlewares\Third_Party\FatFs\src -I..\Drivers\BSP\Adafruit_Shield -I..\Drivers\BSP\STM32F1xx_Nucleo -I..\Middlewares\Third_Party\FatFs\src\drivers -I..\Drivers\BSP\Components\st7789 -I.\RTE\_TFT_LCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=tft_lcd\stm32f1xx_hal_dma.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c]
                          THUMB

                          AREA ||i.DMA_SetConfig||, CODE, READONLY, ALIGN=1

                  DMA_SetConfig PROC
;;;856      */
;;;857    static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b530              PUSH     {r4,r5,lr}
;;;858    {
;;;859      /* Clear all flags */
;;;860      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000002  f8905040          LDRB     r5,[r0,#0x40]
000006  2401              MOVS     r4,#1
000008  40ac              LSLS     r4,r4,r5
00000a  6bc5              LDR      r5,[r0,#0x3c]
00000c  606c              STR      r4,[r5,#4]
;;;861    
;;;862      /* Configure DMA Channel data length */
;;;863      hdma->Instance->CNDTR = DataLength;
00000e  6804              LDR      r4,[r0,#0]
000010  6063              STR      r3,[r4,#4]
;;;864    
;;;865      /* Memory to Peripheral */
;;;866      if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
000012  6843              LDR      r3,[r0,#4]
000014  2b10              CMP      r3,#0x10
000016  d004              BEQ      |L1.34|
;;;867      {
;;;868        /* Configure DMA Channel destination address */
;;;869        hdma->Instance->CPAR = DstAddress;
;;;870    
;;;871        /* Configure DMA Channel source address */
;;;872        hdma->Instance->CMAR = SrcAddress;
;;;873      }
;;;874      /* Peripheral to Memory */
;;;875      else
;;;876      {
;;;877        /* Configure DMA Channel source address */
;;;878        hdma->Instance->CPAR = SrcAddress;
000018  6803              LDR      r3,[r0,#0]
00001a  6099              STR      r1,[r3,#8]
;;;879    
;;;880        /* Configure DMA Channel destination address */
;;;881        hdma->Instance->CMAR = DstAddress;
00001c  6800              LDR      r0,[r0,#0]
00001e  60c2              STR      r2,[r0,#0xc]
;;;882      }
;;;883    }
000020  bd30              POP      {r4,r5,pc}
                  |L1.34|
000022  6803              LDR      r3,[r0,#0]            ;869
000024  609a              STR      r2,[r3,#8]            ;869
000026  6800              LDR      r0,[r0,#0]            ;872
000028  60c1              STR      r1,[r0,#0xc]          ;872
00002a  bd30              POP      {r4,r5,pc}
;;;884    
                          ENDP


                          AREA ||i.HAL_DMA_Abort||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Abort PROC
;;;414      */
;;;415    HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;416    {
;;;417      HAL_StatusTypeDef status = HAL_OK;
;;;418      
;;;419      if(hdma->State != HAL_DMA_STATE_BUSY)
000002  f8901021          LDRB     r1,[r0,#0x21]
000006  2200              MOVS     r2,#0
000008  2902              CMP      r1,#2
00000a  d005              BEQ      |L2.24|
;;;420      {
;;;421        /* no transfer ongoing */
;;;422        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000c  2104              MOVS     r1,#4
00000e  6381              STR      r1,[r0,#0x38]
;;;423        
;;;424        /* Process Unlocked */
;;;425        __HAL_UNLOCK(hdma);
000010  f8802020          STRB     r2,[r0,#0x20]
;;;426        
;;;427        return HAL_ERROR;
000014  2001              MOVS     r0,#1
;;;428      }
;;;429      else
;;;430    
;;;431      {
;;;432        /* Disable DMA IT */
;;;433        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;434          
;;;435        /* Disable the channel */
;;;436        __HAL_DMA_DISABLE(hdma);
;;;437          
;;;438        /* Clear all flags */
;;;439        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;440      }
;;;441      /* Change the DMA state */
;;;442      hdma->State = HAL_DMA_STATE_READY;
;;;443    
;;;444      /* Process Unlocked */
;;;445      __HAL_UNLOCK(hdma);      
;;;446      
;;;447      return status; 
;;;448    }
000016  bd10              POP      {r4,pc}
                  |L2.24|
000018  6801              LDR      r1,[r0,#0]            ;433
00001a  680b              LDR      r3,[r1,#0]            ;433
00001c  f023030e          BIC      r3,r3,#0xe            ;433
000020  600b              STR      r3,[r1,#0]            ;433
000022  6801              LDR      r1,[r0,#0]            ;436
000024  680b              LDR      r3,[r1,#0]            ;436
000026  f0230301          BIC      r3,r3,#1              ;436
00002a  600b              STR      r3,[r1,#0]            ;436
00002c  f8903040          LDRB     r3,[r0,#0x40]         ;439
000030  6bc4              LDR      r4,[r0,#0x3c]         ;439
000032  2101              MOVS     r1,#1                 ;439
000034  fa01f303          LSL      r3,r1,r3              ;439
000038  6063              STR      r3,[r4,#4]            ;439
00003a  f8801021          STRB     r1,[r0,#0x21]         ;442
00003e  f8802020          STRB     r2,[r0,#0x20]         ;445
000042  4610              MOV      r0,r2                 ;447
000044  bd10              POP      {r4,pc}
;;;449    
                          ENDP


                          AREA ||i.HAL_DMA_Abort_IT||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Abort_IT PROC
;;;455      */
;;;456    HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;457    {  
;;;458      HAL_StatusTypeDef status = HAL_OK;
000002  2400              MOVS     r4,#0
;;;459      
;;;460      if(HAL_DMA_STATE_BUSY != hdma->State)
000004  f8901021          LDRB     r1,[r0,#0x21]
000008  2902              CMP      r1,#2
00000a  d003              BEQ      |L3.20|
;;;461      {
;;;462        /* no transfer ongoing */
;;;463        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
00000c  2104              MOVS     r1,#4
00000e  6381              STR      r1,[r0,#0x38]
;;;464            
;;;465        status = HAL_ERROR;
000010  2401              MOVS     r4,#1
000012  e03d              B        |L3.144|
                  |L3.20|
;;;466      }
;;;467      else
;;;468      { 
;;;469        /* Disable DMA IT */
;;;470        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000014  6801              LDR      r1,[r0,#0]
000016  680a              LDR      r2,[r1,#0]
000018  f022020e          BIC      r2,r2,#0xe
00001c  600a              STR      r2,[r1,#0]
;;;471    
;;;472        /* Disable the channel */
;;;473        __HAL_DMA_DISABLE(hdma);
00001e  6801              LDR      r1,[r0,#0]
000020  680a              LDR      r2,[r1,#0]
000022  f0220201          BIC      r2,r2,#1
000026  600a              STR      r2,[r1,#0]
;;;474    
;;;475        /* Clear all flags */
;;;476        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
000028  4a1a              LDR      r2,|L3.148|
00002a  6801              LDR      r1,[r0,#0]
00002c  4291              CMP      r1,r2
00002e  d101              BNE      |L3.52|
000030  2101              MOVS     r1,#1
000032  e021              B        |L3.120|
                  |L3.52|
000034  4a17              LDR      r2,|L3.148|
000036  3214              ADDS     r2,r2,#0x14
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L3.64|
00003c  2110              MOVS     r1,#0x10
00003e  e01b              B        |L3.120|
                  |L3.64|
000040  4a14              LDR      r2,|L3.148|
000042  3228              ADDS     r2,r2,#0x28
000044  4291              CMP      r1,r2
000046  d101              BNE      |L3.76|
000048  1589              ASRS     r1,r1,#22
00004a  e015              B        |L3.120|
                  |L3.76|
00004c  4a11              LDR      r2,|L3.148|
00004e  323c              ADDS     r2,r2,#0x3c
000050  4291              CMP      r1,r2
000052  d101              BNE      |L3.88|
000054  1489              ASRS     r1,r1,#18
000056  e00f              B        |L3.120|
                  |L3.88|
000058  4a0e              LDR      r2,|L3.148|
00005a  3250              ADDS     r2,r2,#0x50
00005c  4291              CMP      r1,r2
00005e  d102              BNE      |L3.102|
000060  f44f3180          MOV      r1,#0x10000
000064  e008              B        |L3.120|
                  |L3.102|
000066  4a0b              LDR      r2,|L3.148|
000068  3264              ADDS     r2,r2,#0x64
00006a  4291              CMP      r1,r2
00006c  d102              BNE      |L3.116|
00006e  f44f1180          MOV      r1,#0x100000
000072  e001              B        |L3.120|
                  |L3.116|
000074  f04f7180          MOV      r1,#0x1000000
                  |L3.120|
000078  4a06              LDR      r2,|L3.148|
00007a  3a08              SUBS     r2,r2,#8
00007c  6051              STR      r1,[r2,#4]
;;;477    
;;;478        /* Change the DMA state */
;;;479        hdma->State = HAL_DMA_STATE_READY;
00007e  2101              MOVS     r1,#1
000080  f8801021          STRB     r1,[r0,#0x21]
;;;480    
;;;481        /* Process Unlocked */
;;;482        __HAL_UNLOCK(hdma);
000084  2100              MOVS     r1,#0
000086  f8801020          STRB     r1,[r0,#0x20]
;;;483    
;;;484        /* Call User Abort callback */
;;;485        if(hdma->XferAbortCallback != NULL)
00008a  6b41              LDR      r1,[r0,#0x34]
00008c  b101              CBZ      r1,|L3.144|
;;;486        {
;;;487          hdma->XferAbortCallback(hdma);
00008e  4788              BLX      r1
                  |L3.144|
;;;488        } 
;;;489      }
;;;490      return status;
000090  4620              MOV      r0,r4
;;;491    }
000092  bd10              POP      {r4,pc}
;;;492    
                          ENDP

                  |L3.148|
                          DCD      0x40020008

                          AREA ||i.HAL_DMA_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_DMA_DeInit PROC
;;;218      */
;;;219    HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
000000  b510              PUSH     {r4,lr}
;;;220    {
;;;221      /* Check the DMA handle allocation */
;;;222      if(hdma == NULL)
000002  2800              CMP      r0,#0
000004  d025              BEQ      |L4.82|
;;;223      {
;;;224        return HAL_ERROR;
;;;225      }
;;;226    
;;;227      /* Check the parameters */
;;;228      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;229    
;;;230      /* Disable the selected DMA Channelx */
;;;231      __HAL_DMA_DISABLE(hdma);
000006  6801              LDR      r1,[r0,#0]
000008  680a              LDR      r2,[r1,#0]
00000a  f0220201          BIC      r2,r2,#1
00000e  600a              STR      r2,[r1,#0]
;;;232    
;;;233      /* Reset DMA Channel control register */
;;;234      hdma->Instance->CCR  = 0U;
000010  6802              LDR      r2,[r0,#0]
000012  2100              MOVS     r1,#0
000014  6011              STR      r1,[r2,#0]
;;;235    
;;;236      /* Reset DMA Channel Number of Data to Transfer register */
;;;237      hdma->Instance->CNDTR = 0U;
000016  6802              LDR      r2,[r0,#0]
000018  6051              STR      r1,[r2,#4]
;;;238    
;;;239      /* Reset DMA Channel peripheral address register */
;;;240      hdma->Instance->CPAR  = 0U;
00001a  6802              LDR      r2,[r0,#0]
00001c  6091              STR      r1,[r2,#8]
;;;241    
;;;242      /* Reset DMA Channel memory address register */
;;;243      hdma->Instance->CMAR = 0U;
00001e  6802              LDR      r2,[r0,#0]
000020  60d1              STR      r1,[r2,#0xc]
;;;244    
;;;245    #if defined (DMA2)
;;;246      /* calculation of the channel index */
;;;247      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;248      {
;;;249        /* DMA1 */
;;;250        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;251        hdma->DmaBaseAddress = DMA1;
;;;252      }
;;;253      else
;;;254      {
;;;255        /* DMA2 */
;;;256        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;257        hdma->DmaBaseAddress = DMA2;
;;;258      }
;;;259    #else
;;;260      /* DMA1 */
;;;261      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
000022  4b0d              LDR      r3,|L4.88|
000024  6802              LDR      r2,[r0,#0]
000026  441a              ADD      r2,r2,r3
000028  2314              MOVS     r3,#0x14
00002a  fbb2f2f3          UDIV     r2,r2,r3
00002e  0092              LSLS     r2,r2,#2
000030  6402              STR      r2,[r0,#0x40]
;;;262      hdma->DmaBaseAddress = DMA1;
000032  4b0a              LDR      r3,|L4.92|
000034  63c3              STR      r3,[r0,#0x3c]
;;;263    #endif /* DMA2 */
;;;264    
;;;265      /* Clear all flags */
;;;266      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
000036  2401              MOVS     r4,#1
000038  4094              LSLS     r4,r4,r2
00003a  605c              STR      r4,[r3,#4]
;;;267    
;;;268      /* Clean all callbacks */
;;;269      hdma->XferCpltCallback = NULL;
00003c  6281              STR      r1,[r0,#0x28]
;;;270      hdma->XferHalfCpltCallback = NULL;
00003e  62c1              STR      r1,[r0,#0x2c]
;;;271      hdma->XferErrorCallback = NULL;
000040  6301              STR      r1,[r0,#0x30]
;;;272      hdma->XferAbortCallback = NULL;
000042  6341              STR      r1,[r0,#0x34]
;;;273    
;;;274      /* Reset the error code */
;;;275      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
000044  6381              STR      r1,[r0,#0x38]
;;;276    
;;;277      /* Reset the DMA state */
;;;278      hdma->State = HAL_DMA_STATE_RESET;
000046  f8801021          STRB     r1,[r0,#0x21]
;;;279    
;;;280      /* Release Lock */
;;;281      __HAL_UNLOCK(hdma);
00004a  f8801020          STRB     r1,[r0,#0x20]
;;;282    
;;;283      return HAL_OK;
00004e  2000              MOVS     r0,#0
;;;284    }
000050  bd10              POP      {r4,pc}
                  |L4.82|
000052  2001              MOVS     r0,#1                 ;224
000054  bd10              POP      {r4,pc}
;;;285    
                          ENDP

000056  0000              DCW      0x0000
                  |L4.88|
                          DCD      0xbffdfff8
                  |L4.92|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_GetError||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetError PROC
;;;830      */
;;;831    uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
000000  6b80              LDR      r0,[r0,#0x38]
;;;832    {
;;;833      return hdma->ErrorCode;
;;;834    }
000002  4770              BX       lr
;;;835    
                          ENDP


                          AREA ||i.HAL_DMA_GetState||, CODE, READONLY, ALIGN=1

                  HAL_DMA_GetState PROC
;;;818      */
;;;819    HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
000000  f8900021          LDRB     r0,[r0,#0x21]
;;;820    {
;;;821      /* Return DMA handle state */
;;;822      return hdma->State;
;;;823    }
000004  4770              BX       lr
;;;824    
                          ENDP


                          AREA ||i.HAL_DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_DMA_IRQHandler PROC
;;;601      */
;;;602    void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;603    {
;;;604      uint32_t flag_it = hdma->DmaBaseAddress->ISR;
000004  6bc1              LDR      r1,[r0,#0x3c]
000006  680a              LDR      r2,[r1,#0]
;;;605      uint32_t source_it = hdma->Instance->CCR;
000008  6801              LDR      r1,[r0,#0]
00000a  680b              LDR      r3,[r1,#0]
;;;606      
;;;607      /* Half Transfer Complete Interrupt management ******************************/
;;;608      if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
00000c  6c04              LDR      r4,[r0,#0x40]
00000e  f04f0a04          MOV      r10,#4
000012  fa0afa04          LSL      r10,r10,r4
;;;609      {
;;;610        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
;;;611        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
;;;612        {
;;;613          /* Disable the half transfer interrupt */
;;;614          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;615        }
;;;616        /* Clear the half transfer complete flag */
;;;617        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
000016  4d4e              LDR      r5,|L7.336|
000018  4e4e              LDR      r6,|L7.340|
00001a  4f4f              LDR      r7,|L7.344|
00001c  f8dfc13c          LDR      r12,|L7.348|
000020  f8df813c          LDR      r8,|L7.352|
000024  f8df913c          LDR      r9,|L7.356|
000028  ea1a0f02          TST      r10,r2                ;608
00002c  d031              BEQ      |L7.146|
00002e  ea5f7a43          LSLS     r10,r3,#29            ;608
000032  d52e              BPL      |L7.146|
000034  680a              LDR      r2,[r1,#0]            ;611
000036  0692              LSLS     r2,r2,#26             ;611
000038  d403              BMI      |L7.66|
00003a  680a              LDR      r2,[r1,#0]            ;614
00003c  f0220204          BIC      r2,r2,#4              ;614
000040  600a              STR      r2,[r1,#0]            ;614
                  |L7.66|
000042  6801              LDR      r1,[r0,#0]
000044  42a9              CMP      r1,r5
000046  d101              BNE      |L7.76|
000048  2104              MOVS     r1,#4
00004a  e019              B        |L7.128|
                  |L7.76|
00004c  42b1              CMP      r1,r6
00004e  d101              BNE      |L7.84|
000050  2140              MOVS     r1,#0x40
000052  e015              B        |L7.128|
                  |L7.84|
000054  42b9              CMP      r1,r7
000056  d102              BNE      |L7.94|
000058  f44f6180          MOV      r1,#0x400
00005c  e010              B        |L7.128|
                  |L7.94|
00005e  4561              CMP      r1,r12
000060  d102              BNE      |L7.104|
000062  f44f4180          MOV      r1,#0x4000
000066  e00b              B        |L7.128|
                  |L7.104|
000068  4541              CMP      r1,r8
00006a  d102              BNE      |L7.114|
00006c  f44f2180          MOV      r1,#0x40000
000070  e006              B        |L7.128|
                  |L7.114|
000072  4549              CMP      r1,r9
000074  d102              BNE      |L7.124|
000076  f44f0180          MOV      r1,#0x400000
00007a  e001              B        |L7.128|
                  |L7.124|
00007c  f04f6180          MOV      r1,#0x4000000
                  |L7.128|
000080  4a33              LDR      r2,|L7.336|
000082  3a08              SUBS     r2,r2,#8
000084  6051              STR      r1,[r2,#4]
;;;618    
;;;619        /* DMA peripheral state is not updated in Half Transfer */
;;;620        /* but in Transfer Complete case */
;;;621    
;;;622        if(hdma->XferHalfCpltCallback != NULL)
000086  6ac1              LDR      r1,[r0,#0x2c]
000088  2900              CMP      r1,#0
00008a  d05f              BEQ      |L7.332|
;;;623        {
;;;624          /* Half transfer callback */
;;;625          hdma->XferHalfCpltCallback(hdma);
00008c  e8bd5ff0          POP      {r4-r12,lr}
000090  4708              BX       r1
                  |L7.146|
;;;626        }
;;;627      }
;;;628    
;;;629      /* Transfer Complete Interrupt management ***********************************/
;;;630      else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
000092  f04f0e02          MOV      lr,#2
000096  fa0efe04          LSL      lr,lr,r4
00009a  ea1e0f02          TST      lr,r2
00009e  f04f0a00          MOV      r10,#0
;;;631      {
;;;632        if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
;;;633        {
;;;634          /* Disable the transfer complete and error interrupt */
;;;635          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
;;;636    
;;;637          /* Change the DMA state */
;;;638          hdma->State = HAL_DMA_STATE_READY;
0000a2  f04f0b01          MOV      r11,#1
0000a6  d035              BEQ      |L7.276|
0000a8  ea5f7e83          LSLS     lr,r3,#30             ;630
0000ac  d532              BPL      |L7.276|
0000ae  680a              LDR      r2,[r1,#0]            ;632
0000b0  0692              LSLS     r2,r2,#26             ;632
0000b2  d405              BMI      |L7.192|
0000b4  680a              LDR      r2,[r1,#0]            ;635
0000b6  f022020a          BIC      r2,r2,#0xa            ;635
0000ba  600a              STR      r2,[r1,#0]            ;635
0000bc  f880b021          STRB     r11,[r0,#0x21]
                  |L7.192|
;;;639        }
;;;640        /* Clear the transfer complete flag */
;;;641          __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
0000c0  6801              LDR      r1,[r0,#0]
0000c2  42a9              CMP      r1,r5
0000c4  d101              BNE      |L7.202|
0000c6  2102              MOVS     r1,#2
0000c8  e019              B        |L7.254|
                  |L7.202|
0000ca  42b1              CMP      r1,r6
0000cc  d101              BNE      |L7.210|
0000ce  2120              MOVS     r1,#0x20
0000d0  e015              B        |L7.254|
                  |L7.210|
0000d2  42b9              CMP      r1,r7
0000d4  d102              BNE      |L7.220|
0000d6  f44f7100          MOV      r1,#0x200
0000da  e010              B        |L7.254|
                  |L7.220|
0000dc  4561              CMP      r1,r12
0000de  d102              BNE      |L7.230|
0000e0  f44f5100          MOV      r1,#0x2000
0000e4  e00b              B        |L7.254|
                  |L7.230|
0000e6  4541              CMP      r1,r8
0000e8  d102              BNE      |L7.240|
0000ea  f44f3100          MOV      r1,#0x20000
0000ee  e006              B        |L7.254|
                  |L7.240|
0000f0  4549              CMP      r1,r9
0000f2  d102              BNE      |L7.250|
0000f4  f44f1100          MOV      r1,#0x200000
0000f8  e001              B        |L7.254|
                  |L7.250|
0000fa  f04f7100          MOV      r1,#0x2000000
                  |L7.254|
0000fe  4a14              LDR      r2,|L7.336|
000100  3a08              SUBS     r2,r2,#8
000102  6051              STR      r1,[r2,#4]
;;;642    
;;;643        /* Process Unlocked */
;;;644        __HAL_UNLOCK(hdma);
000104  f880a020          STRB     r10,[r0,#0x20]
;;;645    
;;;646        if(hdma->XferCpltCallback != NULL)
000108  6a81              LDR      r1,[r0,#0x28]
00010a  2900              CMP      r1,#0
00010c  d01e              BEQ      |L7.332|
;;;647        {
;;;648          /* Transfer complete callback */
;;;649          hdma->XferCpltCallback(hdma);
00010e  e8bd5ff0          POP      {r4-r12,lr}
000112  4708              BX       r1
                  |L7.276|
;;;650        }
;;;651      }
;;;652    
;;;653      /* Transfer Error Interrupt management **************************************/
;;;654      else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
000114  2508              MOVS     r5,#8
000116  40a5              LSLS     r5,r5,r4
000118  4215              TST      r5,r2
00011a  d017              BEQ      |L7.332|
00011c  071a              LSLS     r2,r3,#28
00011e  d515              BPL      |L7.332|
;;;655      {
;;;656        /* When a DMA transfer error occurs */
;;;657        /* A hardware clear of its EN bits is performed */
;;;658        /* Disable ALL DMA IT */
;;;659        __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
000120  680a              LDR      r2,[r1,#0]
000122  f022020e          BIC      r2,r2,#0xe
000126  600a              STR      r2,[r1,#0]
;;;660    
;;;661        /* Clear all flags */
;;;662        hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
000128  f8901040          LDRB     r1,[r0,#0x40]
00012c  6bc2              LDR      r2,[r0,#0x3c]
00012e  fa0bf101          LSL      r1,r11,r1
000132  6051              STR      r1,[r2,#4]
;;;663    
;;;664        /* Update error code */
;;;665        hdma->ErrorCode = HAL_DMA_ERROR_TE;
000134  f8c0b038          STR      r11,[r0,#0x38]
;;;666    
;;;667        /* Change the DMA state */
;;;668        hdma->State = HAL_DMA_STATE_READY;
000138  f880b021          STRB     r11,[r0,#0x21]
;;;669    
;;;670        /* Process Unlocked */
;;;671        __HAL_UNLOCK(hdma);
00013c  f880a020          STRB     r10,[r0,#0x20]
;;;672    
;;;673        if (hdma->XferErrorCallback != NULL)
000140  6b01              LDR      r1,[r0,#0x30]
000142  2900              CMP      r1,#0
000144  d002              BEQ      |L7.332|
;;;674        {
;;;675          /* Transfer error callback */
;;;676          hdma->XferErrorCallback(hdma);
000146  e8bd5ff0          POP      {r4-r12,lr}
00014a  4708              BX       r1
                  |L7.332|
;;;677        }
;;;678      }
;;;679      return;
;;;680    }
00014c  e8bd9ff0          POP      {r4-r12,pc}
;;;681    
                          ENDP

                  |L7.336|
                          DCD      0x40020008
                  |L7.340|
                          DCD      0x4002001c
                  |L7.344|
                          DCD      0x40020030
                  |L7.348|
                          DCD      0x40020044
                  |L7.352|
                          DCD      0x40020058
                  |L7.356|
                          DCD      0x4002006c

                          AREA ||i.HAL_DMA_Init||, CODE, READONLY, ALIGN=2

                  HAL_DMA_Init PROC
;;;141      */
;;;142    HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
000000  b530              PUSH     {r4,r5,lr}
;;;143    {
;;;144      uint32_t tmp = 0U;
;;;145    
;;;146      /* Check the DMA handle allocation */
;;;147      if(hdma == NULL)
000002  2800              CMP      r0,#0
000004  d027              BEQ      |L8.86|
;;;148      {
;;;149        return HAL_ERROR;
;;;150      }
;;;151    
;;;152      /* Check the parameters */
;;;153      assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
;;;154      assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
;;;155      assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
;;;156      assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
;;;157      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
;;;158      assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
;;;159      assert_param(IS_DMA_MODE(hdma->Init.Mode));
;;;160      assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
;;;161    
;;;162    #if defined (DMA2)
;;;163      /* calculation of the channel index */
;;;164      if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
;;;165      {
;;;166        /* DMA1 */
;;;167        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
;;;168        hdma->DmaBaseAddress = DMA1;
;;;169      }
;;;170      else 
;;;171      {
;;;172        /* DMA2 */
;;;173        hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
;;;174        hdma->DmaBaseAddress = DMA2;
;;;175      }
;;;176    #else
;;;177      /* DMA1 */
;;;178      hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
000006  1d00              ADDS     r0,r0,#4
000008  4a14              LDR      r2,|L8.92|
00000a  f8501c04          LDR      r1,[r0,#-4]
00000e  2314              MOVS     r3,#0x14
000010  440a              ADD      r2,r2,r1
000012  fbb2f2f3          UDIV     r2,r2,r3
000016  0092              LSLS     r2,r2,#2
000018  63c2              STR      r2,[r0,#0x3c]
;;;179      hdma->DmaBaseAddress = DMA1;
00001a  4a11              LDR      r2,|L8.96|
00001c  6382              STR      r2,[r0,#0x38]
;;;180    #endif /* DMA2 */
;;;181    
;;;182      /* Change DMA peripheral state */
;;;183      hdma->State = HAL_DMA_STATE_BUSY;
00001e  2202              MOVS     r2,#2
000020  7742              STRB     r2,[r0,#0x1d]
;;;184    
;;;185      /* Get the CR register value */
;;;186      tmp = hdma->Instance->CCR;
000022  680a              LDR      r2,[r1,#0]
;;;187    
;;;188      /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;189      tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
000024  f64373f0          MOV      r3,#0x3ff0
000028  439a              BICS     r2,r2,r3
;;;190                          DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
;;;191                          DMA_CCR_DIR));
;;;192    
;;;193      /* Prepare the DMA Channel configuration */
;;;194      tmp |=  hdma->Init.Direction        |
00002a  e9d03400          LDRD     r3,r4,[r0,#0]
00002e  4323              ORRS     r3,r3,r4
000030  e9d04502          LDRD     r4,r5,[r0,#8]
000034  432c              ORRS     r4,r4,r5
000036  4323              ORRS     r3,r3,r4
000038  6904              LDR      r4,[r0,#0x10]
00003a  4323              ORRS     r3,r3,r4
00003c  6944              LDR      r4,[r0,#0x14]
00003e  4323              ORRS     r3,r3,r4
000040  6984              LDR      r4,[r0,#0x18]
000042  4323              ORRS     r3,r3,r4
000044  4313              ORRS     r3,r3,r2
;;;195              hdma->Init.PeriphInc           | hdma->Init.MemInc           |
;;;196              hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
;;;197              hdma->Init.Mode                | hdma->Init.Priority;
;;;198    
;;;199      /* Write to DMA Channel CR register */
;;;200      hdma->Instance->CCR = tmp;
000046  600b              STR      r3,[r1,#0]
;;;201    
;;;202      /* Initialise the error code */
;;;203      hdma->ErrorCode = HAL_DMA_ERROR_NONE;
000048  2100              MOVS     r1,#0
00004a  6341              STR      r1,[r0,#0x34]
;;;204    
;;;205      /* Initialize the DMA state*/
;;;206      hdma->State = HAL_DMA_STATE_READY;
00004c  2201              MOVS     r2,#1
00004e  7742              STRB     r2,[r0,#0x1d]
;;;207      /* Allocate lock resource and initialize it */
;;;208      hdma->Lock = HAL_UNLOCKED;
000050  7701              STRB     r1,[r0,#0x1c]
;;;209    
;;;210      return HAL_OK;
000052  2000              MOVS     r0,#0
;;;211    }
000054  bd30              POP      {r4,r5,pc}
                  |L8.86|
000056  2001              MOVS     r0,#1                 ;149
000058  bd30              POP      {r4,r5,pc}
;;;212    
                          ENDP

00005a  0000              DCW      0x0000
                  |L8.92|
                          DCD      0xbffdfff8
                  |L8.96|
                          DCD      0x40020000

                          AREA ||i.HAL_DMA_PollForTransfer||, CODE, READONLY, ALIGN=2

                  HAL_DMA_PollForTransfer PROC
;;;500      */
;;;501    HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;502    {
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
;;;503      uint32_t temp;
;;;504      uint32_t tickstart = 0U;
;;;505    
;;;506      if(HAL_DMA_STATE_BUSY != hdma->State)
00000a  f8940021          LDRB     r0,[r4,#0x21]
00000e  2802              CMP      r0,#2
000010  d008              BEQ      |L9.36|
;;;507      {
;;;508        /* no transfer ongoing */
;;;509        hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
000012  2004              MOVS     r0,#4
000014  63a0              STR      r0,[r4,#0x38]
;;;510        __HAL_UNLOCK(hdma);
000016  2000              MOVS     r0,#0
000018  f8840020          STRB     r0,[r4,#0x20]
;;;511        return HAL_ERROR;
00001c  2001              MOVS     r0,#1
                  |L9.30|
;;;512      }
;;;513    
;;;514      /* Polling mode not supported in circular mode */
;;;515      if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
;;;516      {
;;;517        hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
;;;518        return HAL_ERROR;
;;;519      }
;;;520      
;;;521      /* Get the level transfer complete flag */
;;;522      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;523      {
;;;524        /* Transfer Complete flag */
;;;525        temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
;;;526      }
;;;527      else
;;;528      {
;;;529        /* Half Transfer Complete flag */
;;;530        temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
;;;531      }
;;;532    
;;;533      /* Get tick */
;;;534      tickstart = HAL_GetTick();
;;;535    
;;;536      while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
;;;537      {
;;;538        if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
;;;539        {
;;;540          /* When a DMA transfer error occurs */
;;;541          /* A hardware clear of its EN bits is performed */
;;;542          /* Clear all flags */
;;;543          hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
;;;544    
;;;545          /* Update error code */
;;;546          SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
;;;547    
;;;548          /* Change the DMA state */
;;;549          hdma->State= HAL_DMA_STATE_READY;
;;;550    
;;;551          /* Process Unlocked */
;;;552          __HAL_UNLOCK(hdma);
;;;553    
;;;554          return HAL_ERROR;
;;;555        }
;;;556        /* Check for the Timeout */
;;;557        if(Timeout != HAL_MAX_DELAY)
;;;558        {
;;;559          if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
;;;560          {
;;;561            /* Update error code */
;;;562            SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
;;;563    
;;;564            /* Change the DMA state */
;;;565            hdma->State = HAL_DMA_STATE_READY;
;;;566    
;;;567            /* Process Unlocked */
;;;568            __HAL_UNLOCK(hdma);
;;;569    
;;;570            return HAL_ERROR;
;;;571          }
;;;572        }
;;;573      }
;;;574    
;;;575      if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
;;;576      {
;;;577        /* Clear the transfer complete flag */
;;;578        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
;;;579    
;;;580        /* The selected Channelx EN bit is cleared (DMA is disabled and
;;;581        all transfers are complete) */
;;;582        hdma->State = HAL_DMA_STATE_READY;
;;;583      }
;;;584      else
;;;585      {
;;;586        /* Clear the half transfer complete flag */
;;;587        __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
;;;588      }
;;;589      
;;;590      /* Process unlocked */
;;;591      __HAL_UNLOCK(hdma);
;;;592    
;;;593      return HAL_OK;
;;;594    }
00001e  b005              ADD      sp,sp,#0x14
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.36|
000024  6820              LDR      r0,[r4,#0]            ;515
000026  6801              LDR      r1,[r0,#0]            ;515
000028  0689              LSLS     r1,r1,#26             ;515
00002a  d504              BPL      |L9.54|
00002c  f44f7080          MOV      r0,#0x100             ;517
000030  63a0              STR      r0,[r4,#0x38]         ;517
000032  2001              MOVS     r0,#1                 ;518
000034  e7f3              B        |L9.30|
                  |L9.54|
000036  f8df81f0          LDR      r8,|L9.552|
00003a  f8df91ec          LDR      r9,|L9.552|
00003e  f8dfa1e8          LDR      r10,|L9.552|
000042  f8dfb1e4          LDR      r11,|L9.552|
000046  4f78              LDR      r7,|L9.552|
000048  9903              LDR      r1,[sp,#0xc]          ;522
00004a  f1080814          ADD      r8,r8,#0x14           ;525
00004e  f1090928          ADD      r9,r9,#0x28           ;525
000052  f10a0a3c          ADD      r10,r10,#0x3c         ;525
000056  f10b0b50          ADD      r11,r11,#0x50         ;525
00005a  b129              CBZ      r1,|L9.104|
00005c  4972              LDR      r1,|L9.552|
00005e  3914              SUBS     r1,r1,#0x14           ;530
000060  4288              CMP      r0,r1                 ;530
000062  d122              BNE      |L9.170|
000064  2604              MOVS     r6,#4                 ;530
000066  e03a              B        |L9.222|
                  |L9.104|
000068  496f              LDR      r1,|L9.552|
00006a  3914              SUBS     r1,r1,#0x14           ;525
00006c  4288              CMP      r0,r1                 ;525
00006e  d101              BNE      |L9.116|
000070  2602              MOVS     r6,#2                 ;525
000072  e034              B        |L9.222|
                  |L9.116|
000074  42b8              CMP      r0,r7                 ;525
000076  d101              BNE      |L9.124|
000078  2620              MOVS     r6,#0x20              ;525
00007a  e030              B        |L9.222|
                  |L9.124|
00007c  4540              CMP      r0,r8                 ;525
00007e  d102              BNE      |L9.134|
000080  f44f7600          MOV      r6,#0x200             ;525
000084  e02b              B        |L9.222|
                  |L9.134|
000086  4548              CMP      r0,r9                 ;525
000088  d102              BNE      |L9.144|
00008a  f44f5600          MOV      r6,#0x2000            ;525
00008e  e026              B        |L9.222|
                  |L9.144|
000090  4550              CMP      r0,r10                ;525
000092  d102              BNE      |L9.154|
000094  f44f3600          MOV      r6,#0x20000           ;525
000098  e021              B        |L9.222|
                  |L9.154|
00009a  4558              CMP      r0,r11                ;525
00009c  d102              BNE      |L9.164|
00009e  f44f1600          MOV      r6,#0x200000          ;525
0000a2  e01c              B        |L9.222|
                  |L9.164|
0000a4  f04f7600          MOV      r6,#0x2000000         ;525
0000a8  e019              B        |L9.222|
                  |L9.170|
0000aa  42b8              CMP      r0,r7                 ;530
0000ac  d101              BNE      |L9.178|
0000ae  2640              MOVS     r6,#0x40              ;530
0000b0  e015              B        |L9.222|
                  |L9.178|
0000b2  4540              CMP      r0,r8                 ;530
0000b4  d102              BNE      |L9.188|
0000b6  f44f6680          MOV      r6,#0x400             ;530
0000ba  e010              B        |L9.222|
                  |L9.188|
0000bc  4548              CMP      r0,r9                 ;530
0000be  d102              BNE      |L9.198|
0000c0  f44f4680          MOV      r6,#0x4000            ;530
0000c4  e00b              B        |L9.222|
                  |L9.198|
0000c6  4550              CMP      r0,r10                ;530
0000c8  d102              BNE      |L9.208|
0000ca  f44f2680          MOV      r6,#0x40000           ;530
0000ce  e006              B        |L9.222|
                  |L9.208|
0000d0  4558              CMP      r0,r11                ;530
0000d2  d102              BNE      |L9.218|
0000d4  f44f0680          MOV      r6,#0x400000          ;530
0000d8  e001              B        |L9.222|
                  |L9.218|
0000da  f04f6680          MOV      r6,#0x4000000         ;530
                  |L9.222|
0000de  f7fffffe          BL       HAL_GetTick
0000e2  9001              STR      r0,[sp,#4]            ;534
0000e4  e048              B        |L9.376|
                  |L9.230|
0000e6  6809              LDR      r1,[r1,#0]            ;538
0000e8  4a4f              LDR      r2,|L9.552|
0000ea  6820              LDR      r0,[r4,#0]            ;538
0000ec  3a14              SUBS     r2,r2,#0x14           ;538
0000ee  4290              CMP      r0,r2                 ;538
0000f0  d101              BNE      |L9.246|
0000f2  2008              MOVS     r0,#8                 ;538
0000f4  e019              B        |L9.298|
                  |L9.246|
0000f6  42b8              CMP      r0,r7                 ;538
0000f8  d101              BNE      |L9.254|
0000fa  2080              MOVS     r0,#0x80              ;538
0000fc  e015              B        |L9.298|
                  |L9.254|
0000fe  4540              CMP      r0,r8                 ;538
000100  d102              BNE      |L9.264|
000102  f44f6000          MOV      r0,#0x800             ;538
000106  e010              B        |L9.298|
                  |L9.264|
000108  4548              CMP      r0,r9                 ;538
00010a  d102              BNE      |L9.274|
00010c  f44f4000          MOV      r0,#0x8000            ;538
000110  e00b              B        |L9.298|
                  |L9.274|
000112  4550              CMP      r0,r10                ;538
000114  d102              BNE      |L9.284|
000116  f44f2000          MOV      r0,#0x80000           ;538
00011a  e006              B        |L9.298|
                  |L9.284|
00011c  4558              CMP      r0,r11                ;538
00011e  d102              BNE      |L9.294|
000120  f44f0000          MOV      r0,#0x800000          ;538
000124  e001              B        |L9.298|
                  |L9.294|
000126  f04f6000          MOV      r0,#0x8000000         ;538
                  |L9.298|
00012a  4201              TST      r1,r0                 ;538
00012c  d010              BEQ      |L9.336|
00012e  3420              ADDS     r4,r4,#0x20           ;543
000130  2201              MOVS     r2,#1                 ;543
000132  f8941020          LDRB     r1,[r4,#0x20]         ;543
000136  fa02f001          LSL      r0,r2,r1              ;543
00013a  69e1              LDR      r1,[r4,#0x1c]         ;543
00013c  6048              STR      r0,[r1,#4]            ;543
00013e  69a1              LDR      r1,[r4,#0x18]         ;546
000140  f0410101          ORR      r1,r1,#1              ;546
000144  61a1              STR      r1,[r4,#0x18]         ;546
000146  7062              STRB     r2,[r4,#1]            ;549
000148  2000              MOVS     r0,#0                 ;552
00014a  7020              STRB     r0,[r4,#0]            ;552
00014c  2001              MOVS     r0,#1                 ;554
00014e  e766              B        |L9.30|
                  |L9.336|
000150  1c68              ADDS     r0,r5,#1              ;557
000152  d011              BEQ      |L9.376|
000154  b12d              CBZ      r5,|L9.354|
000156  f7fffffe          BL       HAL_GetTick
00015a  9901              LDR      r1,[sp,#4]            ;559
00015c  1a40              SUBS     r0,r0,r1              ;559
00015e  42a8              CMP      r0,r5                 ;559
000160  d90a              BLS      |L9.376|
                  |L9.354|
000162  3420              ADDS     r4,r4,#0x20           ;562
000164  69a0              LDR      r0,[r4,#0x18]         ;562
000166  f0400020          ORR      r0,r0,#0x20           ;562
00016a  61a0              STR      r0,[r4,#0x18]         ;562
00016c  2001              MOVS     r0,#1                 ;565
00016e  7060              STRB     r0,[r4,#1]            ;565
000170  2000              MOVS     r0,#0                 ;568
000172  7020              STRB     r0,[r4,#0]            ;568
000174  2001              MOVS     r0,#1                 ;570
000176  e752              B        |L9.30|
                  |L9.376|
000178  492b              LDR      r1,|L9.552|
00017a  391c              SUBS     r1,r1,#0x1c           ;536
00017c  6808              LDR      r0,[r1,#0]            ;536
00017e  4230              TST      r0,r6                 ;536
000180  d0b1              BEQ      |L9.230|
000182  9803              LDR      r0,[sp,#0xc]          ;575
000184  b130              CBZ      r0,|L9.404|
000186  4928              LDR      r1,|L9.552|
000188  6820              LDR      r0,[r4,#0]            ;587
00018a  3914              SUBS     r1,r1,#0x14           ;587
00018c  4288              CMP      r0,r1                 ;587
00018e  d129              BNE      |L9.484|
000190  2004              MOVS     r0,#4                 ;587
000192  e041              B        |L9.536|
                  |L9.404|
000194  4924              LDR      r1,|L9.552|
000196  6820              LDR      r0,[r4,#0]            ;578
000198  3914              SUBS     r1,r1,#0x14           ;578
00019a  4288              CMP      r0,r1                 ;578
00019c  d101              BNE      |L9.418|
00019e  2002              MOVS     r0,#2                 ;578
0001a0  e019              B        |L9.470|
                  |L9.418|
0001a2  42b8              CMP      r0,r7                 ;578
0001a4  d101              BNE      |L9.426|
0001a6  2020              MOVS     r0,#0x20              ;578
0001a8  e015              B        |L9.470|
                  |L9.426|
0001aa  4540              CMP      r0,r8                 ;578
0001ac  d102              BNE      |L9.436|
0001ae  f44f7000          MOV      r0,#0x200             ;578
0001b2  e010              B        |L9.470|
                  |L9.436|
0001b4  4548              CMP      r0,r9                 ;578
0001b6  d102              BNE      |L9.446|
0001b8  f44f5000          MOV      r0,#0x2000            ;578
0001bc  e00b              B        |L9.470|
                  |L9.446|
0001be  4550              CMP      r0,r10                ;578
0001c0  d102              BNE      |L9.456|
0001c2  f44f3000          MOV      r0,#0x20000           ;578
0001c6  e006              B        |L9.470|
                  |L9.456|
0001c8  4558              CMP      r0,r11                ;578
0001ca  d102              BNE      |L9.466|
0001cc  f44f1000          MOV      r0,#0x200000          ;578
0001d0  e001              B        |L9.470|
                  |L9.466|
0001d2  f04f7000          MOV      r0,#0x2000000         ;578
                  |L9.470|
0001d6  4914              LDR      r1,|L9.552|
0001d8  391c              SUBS     r1,r1,#0x1c           ;578
0001da  6048              STR      r0,[r1,#4]            ;578
0001dc  2001              MOVS     r0,#1                 ;582
0001de  f8840021          STRB     r0,[r4,#0x21]         ;582
0001e2  e01c              B        |L9.542|
                  |L9.484|
0001e4  42b8              CMP      r0,r7                 ;587
0001e6  d101              BNE      |L9.492|
0001e8  2040              MOVS     r0,#0x40              ;587
0001ea  e015              B        |L9.536|
                  |L9.492|
0001ec  4540              CMP      r0,r8                 ;587
0001ee  d102              BNE      |L9.502|
0001f0  f44f6080          MOV      r0,#0x400             ;587
0001f4  e010              B        |L9.536|
                  |L9.502|
0001f6  4548              CMP      r0,r9                 ;587
0001f8  d102              BNE      |L9.512|
0001fa  f44f4080          MOV      r0,#0x4000            ;587
0001fe  e00b              B        |L9.536|
                  |L9.512|
000200  4550              CMP      r0,r10                ;587
000202  d102              BNE      |L9.522|
000204  f44f2080          MOV      r0,#0x40000           ;587
000208  e006              B        |L9.536|
                  |L9.522|
00020a  4558              CMP      r0,r11                ;587
00020c  d102              BNE      |L9.532|
00020e  f44f0080          MOV      r0,#0x400000          ;587
000212  e001              B        |L9.536|
                  |L9.532|
000214  f04f6080          MOV      r0,#0x4000000         ;587
                  |L9.536|
000218  4903              LDR      r1,|L9.552|
00021a  391c              SUBS     r1,r1,#0x1c           ;587
00021c  6048              STR      r0,[r1,#4]            ;587
                  |L9.542|
00021e  2000              MOVS     r0,#0                 ;591
000220  f8840020          STRB     r0,[r4,#0x20]         ;591
000224  e6fb              B        |L9.30|
;;;595    
                          ENDP

000226  0000              DCW      0x0000
                  |L9.552|
                          DCD      0x4002001c

                          AREA ||i.HAL_DMA_RegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_RegisterCallback PROC
;;;691      */                          
;;;692    HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
000000  b510              PUSH     {r4,lr}
;;;693    {
;;;694      HAL_StatusTypeDef status = HAL_OK;
000002  2300              MOVS     r3,#0
;;;695      
;;;696      /* Process locked */
;;;697      __HAL_LOCK(hdma);
000004  f8904020          LDRB     r4,[r0,#0x20]
000008  2c01              CMP      r4,#1
00000a  d00c              BEQ      |L10.38|
00000c  2401              MOVS     r4,#1
00000e  f8804020          STRB     r4,[r0,#0x20]
;;;698      
;;;699      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2c01              CMP      r4,#1
000018  d007              BEQ      |L10.42|
;;;700      {
;;;701        switch (CallbackID)
;;;702        {
;;;703        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;704          hdma->XferCpltCallback = pCallback;
;;;705          break;
;;;706          
;;;707        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;708          hdma->XferHalfCpltCallback = pCallback;
;;;709          break;         
;;;710    
;;;711        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;712          hdma->XferErrorCallback = pCallback;
;;;713          break;         
;;;714          
;;;715        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;716          hdma->XferAbortCallback = pCallback;
;;;717          break; 
;;;718          
;;;719        default:
;;;720          status = HAL_ERROR;
;;;721          break;                                                            
;;;722        }
;;;723      }
;;;724      else
;;;725      {
;;;726        status = HAL_ERROR;
00001a  2301              MOVS     r3,#1
                  |L10.28|
;;;727      } 
;;;728      
;;;729      /* Release Lock */
;;;730      __HAL_UNLOCK(hdma);
00001c  2100              MOVS     r1,#0
00001e  f8801020          STRB     r1,[r0,#0x20]
;;;731      
;;;732      return status;
000022  4618              MOV      r0,r3
;;;733    }
000024  bd10              POP      {r4,pc}
                  |L10.38|
000026  2002              MOVS     r0,#2                 ;697
000028  bd10              POP      {r4,pc}
                  |L10.42|
00002a  b139              CBZ      r1,|L10.60|
00002c  2901              CMP      r1,#1                 ;701
00002e  d007              BEQ      |L10.64|
000030  2902              CMP      r1,#2                 ;701
000032  d007              BEQ      |L10.68|
000034  2903              CMP      r1,#3                 ;701
000036  d007              BEQ      |L10.72|
000038  2301              MOVS     r3,#1                 ;720
00003a  e7ef              B        |L10.28|
                  |L10.60|
00003c  6282              STR      r2,[r0,#0x28]         ;704
00003e  e7ed              B        |L10.28|
                  |L10.64|
000040  62c2              STR      r2,[r0,#0x2c]         ;708
000042  e7eb              B        |L10.28|
                  |L10.68|
000044  6302              STR      r2,[r0,#0x30]         ;712
000046  e7e9              B        |L10.28|
                  |L10.72|
000048  6342              STR      r2,[r0,#0x34]         ;716
00004a  e7e7              B        |L10.28|
;;;734    
                          ENDP


                          AREA ||i.HAL_DMA_Start||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start PROC
;;;317      */
;;;318    HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;319    {
000002  4604              MOV      r4,r0
;;;320      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;321    
;;;322      /* Check the parameters */
;;;323      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;324    
;;;325      /* Process locked */
;;;326      __HAL_LOCK(hdma);
000006  f8940020          LDRB     r0,[r4,#0x20]
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L11.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;327    
;;;328      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L11.44|
;;;329      {
;;;330        /* Change DMA peripheral state */
;;;331        hdma->State = HAL_DMA_STATE_BUSY;
;;;332        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;333                
;;;334        /* Disable the peripheral */
;;;335        __HAL_DMA_DISABLE(hdma);
;;;336        
;;;337        /* Configure the source, destination address and the data length & clear flags*/
;;;338        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;339        
;;;340        /* Enable the Peripheral */
;;;341        __HAL_DMA_ENABLE(hdma);
;;;342      }
;;;343      else
;;;344      {
;;;345       /* Process Unlocked */
;;;346       __HAL_UNLOCK(hdma);  
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;347       status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L11.36|
;;;348      }  
;;;349      return status;
000024  4628              MOV      r0,r5
;;;350    }
000026  bd70              POP      {r4-r6,pc}
                  |L11.40|
000028  2002              MOVS     r0,#2                 ;326
00002a  bd70              POP      {r4-r6,pc}
                  |L11.44|
00002c  2602              MOVS     r6,#2                 ;331
00002e  f8846021          STRB     r6,[r4,#0x21]         ;331
000032  63a0              STR      r0,[r4,#0x38]         ;332
000034  6820              LDR      r0,[r4,#0]            ;335
000036  6806              LDR      r6,[r0,#0]            ;335
000038  f0260601          BIC      r6,r6,#1              ;335
00003c  6006              STR      r6,[r0,#0]            ;335
00003e  4620              MOV      r0,r4                 ;338
000040  f7fffffe          BL       DMA_SetConfig
000044  6820              LDR      r0,[r4,#0]            ;341
000046  6801              LDR      r1,[r0,#0]            ;341
000048  f0410101          ORR      r1,r1,#1              ;341
00004c  6001              STR      r1,[r0,#0]            ;341
00004e  e7e9              B        |L11.36|
;;;351    
                          ENDP


                          AREA ||i.HAL_DMA_Start_IT||, CODE, READONLY, ALIGN=1

                  HAL_DMA_Start_IT PROC
;;;360      */
;;;361    HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
000000  b570              PUSH     {r4-r6,lr}
;;;362    {
000002  4604              MOV      r4,r0
;;;363      HAL_StatusTypeDef status = HAL_OK;
000004  2500              MOVS     r5,#0
;;;364    
;;;365      /* Check the parameters */
;;;366      assert_param(IS_DMA_BUFFER_SIZE(DataLength));
;;;367    
;;;368      /* Process locked */
;;;369      __HAL_LOCK(hdma);
000006  f8940020          LDRB     r0,[r4,#0x20]
00000a  2801              CMP      r0,#1
00000c  d00c              BEQ      |L12.40|
00000e  2001              MOVS     r0,#1
000010  f8840020          STRB     r0,[r4,#0x20]
;;;370      
;;;371      if(HAL_DMA_STATE_READY == hdma->State)
000014  f8946021          LDRB     r6,[r4,#0x21]
000018  2000              MOVS     r0,#0
00001a  2e01              CMP      r6,#1
00001c  d006              BEQ      |L12.44|
;;;372      {
;;;373        /* Change DMA peripheral state */
;;;374        hdma->State = HAL_DMA_STATE_BUSY;
;;;375        hdma->ErrorCode = HAL_DMA_ERROR_NONE;
;;;376        
;;;377        /* Disable the peripheral */
;;;378        __HAL_DMA_DISABLE(hdma);
;;;379        
;;;380        /* Configure the source, destination address and the data length & clear flags*/
;;;381        DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
;;;382        
;;;383        /* Enable the transfer complete interrupt */
;;;384        /* Enable the transfer Error interrupt */
;;;385        if(NULL != hdma->XferHalfCpltCallback)
;;;386        {
;;;387          /* Enable the Half transfer complete interrupt as well */
;;;388          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
;;;389        }
;;;390        else
;;;391        {
;;;392          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
;;;393          __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
;;;394        }
;;;395        /* Enable the Peripheral */
;;;396        __HAL_DMA_ENABLE(hdma);
;;;397      }
;;;398      else
;;;399      {      
;;;400        /* Process Unlocked */
;;;401        __HAL_UNLOCK(hdma); 
00001e  f8840020          STRB     r0,[r4,#0x20]
;;;402    
;;;403        /* Remain BUSY */
;;;404        status = HAL_BUSY;
000022  2502              MOVS     r5,#2
                  |L12.36|
;;;405      }    
;;;406      return status;
000024  4628              MOV      r0,r5
;;;407    }
000026  bd70              POP      {r4-r6,pc}
                  |L12.40|
000028  2002              MOVS     r0,#2                 ;369
00002a  bd70              POP      {r4-r6,pc}
                  |L12.44|
00002c  2602              MOVS     r6,#2                 ;374
00002e  f8846021          STRB     r6,[r4,#0x21]         ;374
000032  63a0              STR      r0,[r4,#0x38]         ;375
000034  6820              LDR      r0,[r4,#0]            ;378
000036  6806              LDR      r6,[r0,#0]            ;378
000038  f0260601          BIC      r6,r6,#1              ;378
00003c  6006              STR      r6,[r0,#0]            ;378
00003e  4620              MOV      r0,r4                 ;381
000040  f7fffffe          BL       DMA_SetConfig
000044  6ae0              LDR      r0,[r4,#0x2c]         ;385
000046  b128              CBZ      r0,|L12.84|
000048  6820              LDR      r0,[r4,#0]            ;388
00004a  6801              LDR      r1,[r0,#0]            ;388
00004c  f041010e          ORR      r1,r1,#0xe            ;388
000050  6001              STR      r1,[r0,#0]            ;388
000052  e009              B        |L12.104|
                  |L12.84|
000054  6820              LDR      r0,[r4,#0]            ;392
000056  6801              LDR      r1,[r0,#0]            ;392
000058  f0210104          BIC      r1,r1,#4              ;392
00005c  6001              STR      r1,[r0,#0]            ;392
00005e  6820              LDR      r0,[r4,#0]            ;393
000060  6801              LDR      r1,[r0,#0]            ;393
000062  f041010a          ORR      r1,r1,#0xa            ;393
000066  6001              STR      r1,[r0,#0]            ;393
                  |L12.104|
000068  6820              LDR      r0,[r4,#0]            ;396
00006a  6801              LDR      r1,[r0,#0]            ;396
00006c  f0410101          ORR      r1,r1,#1              ;396
000070  6001              STR      r1,[r0,#0]            ;396
000072  e7d7              B        |L12.36|
;;;408    
                          ENDP


                          AREA ||i.HAL_DMA_UnRegisterCallback||, CODE, READONLY, ALIGN=1

                  HAL_DMA_UnRegisterCallback PROC
;;;742      */              
;;;743    HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
000000  b510              PUSH     {r4,lr}
;;;744    {
;;;745      HAL_StatusTypeDef status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;746    
;;;747      /* Process locked */
;;;748      __HAL_LOCK(hdma);
000004  f8903020          LDRB     r3,[r0,#0x20]
000008  2b01              CMP      r3,#1
00000a  d00c              BEQ      |L13.38|
00000c  2301              MOVS     r3,#1
00000e  f8803020          STRB     r3,[r0,#0x20]
;;;749      
;;;750      if(HAL_DMA_STATE_READY == hdma->State)
000012  f8904021          LDRB     r4,[r0,#0x21]
000016  2300              MOVS     r3,#0
000018  2c01              CMP      r4,#1
00001a  d006              BEQ      |L13.42|
;;;751      {
;;;752        switch (CallbackID)
;;;753        {
;;;754        case  HAL_DMA_XFER_CPLT_CB_ID:
;;;755          hdma->XferCpltCallback = NULL;
;;;756          break;
;;;757    
;;;758        case  HAL_DMA_XFER_HALFCPLT_CB_ID:
;;;759          hdma->XferHalfCpltCallback = NULL;
;;;760          break;         
;;;761    
;;;762        case  HAL_DMA_XFER_ERROR_CB_ID:
;;;763          hdma->XferErrorCallback = NULL;
;;;764          break;         
;;;765    
;;;766        case  HAL_DMA_XFER_ABORT_CB_ID:
;;;767          hdma->XferAbortCallback = NULL;
;;;768          break; 
;;;769    
;;;770        case   HAL_DMA_XFER_ALL_CB_ID:
;;;771          hdma->XferCpltCallback = NULL;
;;;772          hdma->XferHalfCpltCallback = NULL;
;;;773          hdma->XferErrorCallback = NULL;
;;;774          hdma->XferAbortCallback = NULL;
;;;775          break; 
;;;776    
;;;777        default:
;;;778          status = HAL_ERROR;
;;;779          break;
;;;780        }
;;;781      }
;;;782      else
;;;783      {
;;;784        status = HAL_ERROR;
00001c  2201              MOVS     r2,#1
                  |L13.30|
;;;785      } 
;;;786      
;;;787      /* Release Lock */
;;;788      __HAL_UNLOCK(hdma);
00001e  f8803020          STRB     r3,[r0,#0x20]
;;;789      
;;;790      return status;
000022  4610              MOV      r0,r2
;;;791    }
000024  bd10              POP      {r4,pc}
                  |L13.38|
000026  2002              MOVS     r0,#2                 ;748
000028  bd10              POP      {r4,pc}
                  |L13.42|
00002a  2905              CMP      r1,#5                 ;752
00002c  d211              BCS      |L13.82|
00002e  e8dff001          TBB      [pc,r1]               ;752
000032  0305              DCB      0x03,0x05
000034  07090b00          DCB      0x07,0x09,0x0b,0x00
000038  6283              STR      r3,[r0,#0x28]         ;755
00003a  e7f0              B        |L13.30|
00003c  62c3              STR      r3,[r0,#0x2c]         ;759
00003e  e7ee              B        |L13.30|
000040  6303              STR      r3,[r0,#0x30]         ;763
000042  e7ec              B        |L13.30|
000044  6343              STR      r3,[r0,#0x34]         ;767
000046  e7ea              B        |L13.30|
000048  6283              STR      r3,[r0,#0x28]         ;771
00004a  62c3              STR      r3,[r0,#0x2c]         ;772
00004c  6303              STR      r3,[r0,#0x30]         ;773
00004e  6343              STR      r3,[r0,#0x34]         ;774
000050  e7e5              B        |L13.30|
                  |L13.82|
000052  2201              MOVS     r2,#1                 ;778
000054  e7e3              B        |L13.30|
;;;792      
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_dma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX|
#line 665
|__asm___19_stm32f1xx_hal_dma_c_c25f65ec____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
