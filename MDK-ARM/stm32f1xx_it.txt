; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otft_lcd\stm32f1xx_it.o --asm_dir=./ --list_dir=--list --depend=tft_lcd\stm32f1xx_it.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I../Drivers/BSP/Components -I../Drivers/BSP\Components/Common -I..\Middlewares\Third_Party\FatFs\src -I..\Drivers\BSP\Adafruit_Shield -I..\Drivers\BSP\STM32F1xx_Nucleo -I..\Middlewares\Third_Party\FatFs\src\drivers -I..\Drivers\BSP\Components\st7789 -I.\RTE\_TFT_LCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=tft_lcd\stm32f1xx_it.crf ..\Src\stm32f1xx_it.c]
                          THUMB

                          AREA ||i.BusFault_Handler||, CODE, READONLY, ALIGN=1

                  BusFault_Handler PROC
                  |L1.0|
;;;80       */
;;;81     void BusFault_Handler(void)
000000  e7fe              B        |L1.0|
;;;82     {
;;;83       /* Go to infinite loop when Bus Fault exception occurs */
;;;84       while (1)
;;;85       {
;;;86       }
;;;87     }
;;;88     
                          ENDP


                          AREA ||i.DebugMon_Handler||, CODE, READONLY, ALIGN=1

                  DebugMon_Handler PROC
;;;115      */
;;;116    void DebugMon_Handler(void)
000000  4770              BX       lr
;;;117    {
;;;118    }
;;;119    
                          ENDP


                          AREA ||i.EXTI0_IRQHandler||, CODE, READONLY, ALIGN=1

                  EXTI0_IRQHandler PROC
;;;177      */
;;;178    void EXTI0_IRQHandler(void)
000000  2001              MOVS     r0,#1
;;;179    {
;;;180    //EXTI0 означает нулевой пин порта, т.е. PA0 или PB0 PC0 и т.д.	
;;;181    // Есть только 7 обработчиков прерываний 	EXTI0, EXTI1, EXTI2, EXTI3, EXTI4, EXTI9_5, EXTI15_10
;;;182    //EXTI0 - обрабатывает прерывание, возникшее на пине 0 какого либо порта, например PD0
;;;183    //EXTI3 - обрабатывает прерывание, возникшее на пине 3 какого либо порта, например PD3
;;;184    //EXTI9_5 - обрабатывает прерывание, возникшее на одном из пинов 5 - 9 какого либо порта, например PD5 или 	PD6, PD7, PD8, PD9
;;;185    //EXTI15_10 - обрабатывает прерывание, возникшее на одном из пинов 10 - 15 какого либо порта, например PD10 или 	PD11, PD12, PD13, PD14, PD15	
;;;186    //Для прерываний на пинах 5-9 и 10-15 необходимо читать регистр HAL_GPIO_EXTI_IRQHandler, чтобы понять, на каком пине возникло прерывание
;;;187      HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
000002  f7ffbffe          B.W      HAL_GPIO_EXTI_IRQHandler
;;;188    }
;;;189    
                          ENDP


                          AREA ||i.HardFault_Handler||, CODE, READONLY, ALIGN=1

                  HardFault_Handler PROC
                  |L4.0|
;;;54       */
;;;55     void HardFault_Handler(void)
000000  e7fe              B        |L4.0|
;;;56     {
;;;57       /* Go to infinite loop when Hard Fault exception occurs */
;;;58       while (1)
;;;59       {
;;;60       }
;;;61     }
;;;62     
                          ENDP


                          AREA ||i.MemManage_Handler||, CODE, READONLY, ALIGN=1

                  MemManage_Handler PROC
                  |L5.0|
;;;67       */
;;;68     void MemManage_Handler(void)
000000  e7fe              B        |L5.0|
;;;69     {
;;;70       /* Go to infinite loop when Memory Manage exception occurs */
;;;71       while (1)
;;;72       {
;;;73       }
;;;74     }
;;;75     
                          ENDP


                          AREA ||i.NMI_Handler||, CODE, READONLY, ALIGN=1

                  NMI_Handler PROC
;;;45       */
;;;46     void NMI_Handler(void)
000000  4770              BX       lr
;;;47     {
;;;48     }
;;;49     
                          ENDP


                          AREA ||i.PendSV_Handler||, CODE, READONLY, ALIGN=1

                  PendSV_Handler PROC
;;;124      */
;;;125    void PendSV_Handler(void)
000000  4770              BX       lr
;;;126    {
;;;127    }
;;;128    
                          ENDP


                          AREA ||i.RTC_Alarm_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_Alarm_IRQHandler PROC
;;;166      */
;;;167    void RTC_Alarm_IRQHandler(void)
000000  4801              LDR      r0,|L8.8|
;;;168    {
;;;169      HAL_RTC_AlarmIRQHandler(&RtcHandle);
000002  f7ffbffe          B.W      HAL_RTC_AlarmIRQHandler
;;;170    }
;;;171    
                          ENDP

000006  0000              DCW      0x0000
                  |L8.8|
                          DCD      RtcHandle

                          AREA ||i.RTC_IRQHandler||, CODE, READONLY, ALIGN=2

                  RTC_IRQHandler PROC
;;;149      */
;;;150    void RTC_IRQHandler(void)
000000  4801              LDR      r0,|L9.8|
;;;151    {
;;;152      /* USER CODE BEGIN RTC_IRQn 0 */
;;;153    
;;;154      /* USER CODE END RTC_IRQn 0 */
;;;155      HAL_RTCEx_RTCIRQHandler(&RtcHandle);
000002  f7ffbffe          B.W      HAL_RTCEx_RTCIRQHandler
;;;156      /* USER CODE BEGIN RTC_IRQn 1 */
;;;157    
;;;158      /* USER CODE END RTC_IRQn 1 */
;;;159    }
;;;160    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      RtcHandle

                          AREA ||i.SVC_Handler||, CODE, READONLY, ALIGN=1

                  SVC_Handler PROC
;;;106      */
;;;107    void SVC_Handler(void)
000000  4770              BX       lr
;;;108    {
;;;109    }
;;;110    
                          ENDP


                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=1

                  SysTick_Handler PROC
;;;133      */
;;;134    void SysTick_Handler(void)
000000  f7ffbffe          B.W      HAL_IncTick
;;;135    {
;;;136      HAL_IncTick();
;;;137    }
;;;138    
                          ENDP


                          AREA ||i.UsageFault_Handler||, CODE, READONLY, ALIGN=1

                  UsageFault_Handler PROC
                  |L12.0|
;;;93       */
;;;94     void UsageFault_Handler(void)
000000  e7fe              B        |L12.0|
;;;95     {
;;;96       /* Go to infinite loop when Usage Fault exception occurs */
;;;97       while (1)
;;;98       {
;;;99       }
;;;100    }
;;;101    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Src\\stm32f1xx_it.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f1xx_it_c_bb8ca80c____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___14_stm32f1xx_it_c_bb8ca80c____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f1xx_it_c_bb8ca80c____REVSH|
#line 478
|__asm___14_stm32f1xx_it_c_bb8ca80c____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_stm32f1xx_it_c_bb8ca80c____RRX|
#line 665
|__asm___14_stm32f1xx_it_c_bb8ca80c____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
