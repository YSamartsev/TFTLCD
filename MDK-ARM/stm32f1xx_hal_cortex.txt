; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otft_lcd\stm32f1xx_hal_cortex.o --asm_dir=./ --list_dir=--list --depend=tft_lcd\stm32f1xx_hal_cortex.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I../Drivers/BSP/Components -I../Drivers/BSP\Components/Common -I..\Middlewares\Third_Party\FatFs\src -I..\Drivers\BSP\Adafruit_Shield -I..\Drivers\BSP\STM32F1xx_Nucleo -I..\Middlewares\Third_Party\FatFs\src\drivers -I..\Drivers\BSP\Components\st7789 -I.\RTE\_TFT_LCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=tft_lcd\stm32f1xx_hal_cortex.crf ..\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cortex.c]
                          THUMB

                          AREA ||i.HAL_NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_ClearPendingIRQ PROC
;;;444      */
;;;445    void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;446    {
000002  db09              BLT      |L1.24|
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8c01280          STR      r1,[r0,#0x280]
                  |L1.24|
;;;447      /* Check the parameters */
;;;448      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;449    
;;;450      /* Clear pending interrupt */
;;;451      NVIC_ClearPendingIRQ(IRQn);
;;;452    }
000018  4770              BX       lr
;;;453    
                          ENDP


                          AREA ||i.HAL_NVIC_DisableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_DisableIRQ PROC
;;;201      */
;;;202    void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;203    {
000002  db0d              BLT      |L2.32|
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8c01180          STR      r1,[r0,#0x180]
000018  f3bf8f4f          DSB      
00001c  f3bf8f6f          ISB      
                  |L2.32|
;;;204      /* Check the parameters */
;;;205      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;206    
;;;207      /* Disable interrupt */
;;;208      NVIC_DisableIRQ(IRQn);
;;;209    }
000020  4770              BX       lr
;;;210    
                          ENDP


                          AREA ||i.HAL_NVIC_EnableIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_EnableIRQ PROC
;;;185      */
;;;186    void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;187    {
000002  db09              BLT      |L3.24|
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8c01100          STR      r1,[r0,#0x100]
                  |L3.24|
;;;188      /* Check the parameters */
;;;189      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;190    
;;;191      /* Enable interrupt */
;;;192      NVIC_EnableIRQ(IRQn);
;;;193    }
000018  4770              BX       lr
;;;194    
                          ENDP


                          AREA ||i.HAL_NVIC_GetActive||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetActive PROC
;;;461      */
;;;462    uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;463    {
000002  db0f              BLT      |L4.36|
000004  0941              LSRS     r1,r0,#5
000006  0089              LSLS     r1,r1,#2
000008  f10121e0          ADD      r1,r1,#0xe000e000
00000c  f8d11300          LDR      r1,[r1,#0x300]
000010  f000021f          AND      r2,r0,#0x1f
000014  2001              MOVS     r0,#1
000016  4090              LSLS     r0,r0,r2
000018  4201              TST      r1,r0
00001a  d001              BEQ      |L4.32|
00001c  2001              MOVS     r0,#1
;;;464      /* Check the parameters */
;;;465      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;466    
;;;467      /* Return 1 if active else 0 */
;;;468      return NVIC_GetActive(IRQn);
;;;469    }
00001e  4770              BX       lr
                  |L4.32|
000020  2000              MOVS     r0,#0
000022  4770              BX       lr
                  |L4.36|
000024  2000              MOVS     r0,#0
000026  4770              BX       lr
;;;470    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPendingIRQ PROC
;;;428      */
;;;429    uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;430    {
000002  db0f              BLT      |L5.36|
000004  0941              LSRS     r1,r0,#5
000006  0089              LSLS     r1,r1,#2
000008  f10121e0          ADD      r1,r1,#0xe000e000
00000c  f8d11200          LDR      r1,[r1,#0x200]
000010  f000021f          AND      r2,r0,#0x1f
000014  2001              MOVS     r0,#1
000016  4090              LSLS     r0,r0,r2
000018  4201              TST      r1,r0
00001a  d001              BEQ      |L5.32|
00001c  2001              MOVS     r0,#1
;;;431      /* Check the parameters */
;;;432      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;433    
;;;434      /* Return 1 if pending else 0 */
;;;435      return NVIC_GetPendingIRQ(IRQn);
;;;436    }
00001e  4770              BX       lr
                  |L5.32|
000020  2000              MOVS     r0,#0
000022  4770              BX       lr
                  |L5.36|
000024  2000              MOVS     r0,#0
000026  4770              BX       lr
;;;437    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriority||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_GetPriority PROC
;;;395      */
;;;396    void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
000000  b5f0              PUSH     {r4-r7,lr}
000002  2800              CMP      r0,#0
;;;397    {
000004  db05              BLT      |L6.18|
000006  f10020e0          ADD      r0,r0,#0xe000e000
00000a  f8900400          LDRB     r0,[r0,#0x400]
00000e  0904              LSRS     r4,r0,#4
000010  e006              B        |L6.32|
                  |L6.18|
000012  f000000f          AND      r0,r0,#0xf
000016  f10020e0          ADD      r0,r0,#0xe000e000
00001a  f8900d14          LDRB     r0,[r0,#0xd14]
00001e  0904              LSRS     r4,r0,#4
                  |L6.32|
000020  f0010007          AND      r0,r1,#7
000024  f1c00107          RSB      r1,r0,#7
000028  2904              CMP      r1,#4
00002a  d900              BLS      |L6.46|
00002c  2104              MOVS     r1,#4
                  |L6.46|
00002e  1d05              ADDS     r5,r0,#4
000030  2d07              CMP      r5,#7
000032  d201              BCS      |L6.56|
000034  2000              MOVS     r0,#0
000036  e000              B        |L6.58|
                  |L6.56|
000038  1ec0              SUBS     r0,r0,#3
                  |L6.58|
00003a  2701              MOVS     r7,#1
00003c  fa24f600          LSR      r6,r4,r0
000040  fa07f501          LSL      r5,r7,r1
000044  1e6d              SUBS     r5,r5,#1
000046  402e              ANDS     r6,r6,r5
000048  6016              STR      r6,[r2,#0]
00004a  fa07f500          LSL      r5,r7,r0
00004e  1e6d              SUBS     r5,r5,#1
000050  4025              ANDS     r5,r5,r4
000052  601d              STR      r5,[r3,#0]
;;;398      /* Check the parameters */
;;;399      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;400     /* Get priority for Cortex-M system or device specific interrupts */
;;;401      NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
;;;402    }
000054  bdf0              POP      {r4-r7,pc}
;;;403    
                          ENDP


                          AREA ||i.HAL_NVIC_GetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_GetPriorityGrouping PROC
;;;368      */
;;;369    uint32_t HAL_NVIC_GetPriorityGrouping(void)
000000  4802              LDR      r0,|L7.12|
000002  6800              LDR      r0,[r0,#0]
000004  f3c02002          UBFX     r0,r0,#8,#3
;;;370    {
;;;371      /* Get the PRIGROUP[10:8] field value */
;;;372      return NVIC_GetPriorityGrouping();
;;;373    }
000008  4770              BX       lr
;;;374    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPendingIRQ||, CODE, READONLY, ALIGN=1

                  HAL_NVIC_SetPendingIRQ PROC
;;;410      */
;;;411    void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;412    {
000002  db09              BLT      |L8.24|
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  0940              LSRS     r0,r0,#5
00000e  0080              LSLS     r0,r0,#2
000010  f10020e0          ADD      r0,r0,#0xe000e000
000014  f8c01200          STR      r1,[r0,#0x200]
                  |L8.24|
;;;413      /* Check the parameters */
;;;414      assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
;;;415      
;;;416      /* Set interrupt pending */
;;;417      NVIC_SetPendingIRQ(IRQn);
;;;418    }
000018  4770              BX       lr
;;;419    
                          ENDP


                          AREA ||i.HAL_NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriority PROC
;;;163      */
;;;164    void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
000000  b4f0              PUSH     {r4-r7}
;;;165    { 
000002  460d              MOV      r5,r1
000004  4b0d              LDR      r3,|L9.60|
000006  681b              LDR      r3,[r3,#0]
000008  f3c32302          UBFX     r3,r3,#8,#3
00000c  f1c30407          RSB      r4,r3,#7
000010  2c04              CMP      r4,#4
000012  d900              BLS      |L9.22|
000014  2404              MOVS     r4,#4
                  |L9.22|
000016  1d19              ADDS     r1,r3,#4
000018  2907              CMP      r1,#7
00001a  d201              BCS      |L9.32|
00001c  2300              MOVS     r3,#0
00001e  e000              B        |L9.34|
                  |L9.32|
000020  1edb              SUBS     r3,r3,#3
                  |L9.34|
000022  2601              MOVS     r6,#1
000024  fa06f104          LSL      r1,r6,r4
000028  1e49              SUBS     r1,r1,#1
00002a  4029              ANDS     r1,r1,r5
00002c  4099              LSLS     r1,r1,r3
00002e  409e              LSLS     r6,r6,r3
000030  1e76              SUBS     r6,r6,#1
000032  4016              ANDS     r6,r6,r2
000034  4331              ORRS     r1,r1,r6
;;;166      uint32_t prioritygroup = 0x00U;
;;;167      
;;;168      /* Check the parameters */
;;;169      assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
;;;170      assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
;;;171      
;;;172      prioritygroup = NVIC_GetPriorityGrouping();
;;;173      
;;;174      NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
000036  bcf0              POP      {r4-r7}
000038  f7ffbffe          B.W      __NVIC_SetPriority
;;;175    }
;;;176    
                          ENDP

                  |L9.60|
                          DCD      0xe000ed0c

                          AREA ||i.HAL_NVIC_SetPriorityGrouping||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SetPriorityGrouping PROC
;;;141      */
;;;142    void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
000000  f0000107          AND      r1,r0,#7
000004  4a05              LDR      r2,|L10.28|
000006  6810              LDR      r0,[r2,#0]
000008  f64f03ff          MOV      r3,#0xf8ff
00000c  4018              ANDS     r0,r0,r3
00000e  ea402001          ORR      r0,r0,r1,LSL #8
000012  4903              LDR      r1,|L10.32|
000014  4308              ORRS     r0,r0,r1
000016  6010              STR      r0,[r2,#0]
;;;143    {
;;;144      /* Check the parameters */
;;;145      assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
;;;146      
;;;147      /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
;;;148      NVIC_SetPriorityGrouping(PriorityGroup);
;;;149    }
000018  4770              BX       lr
;;;150    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0xe000ed0c
                  |L10.32|
                          DCD      0x05fa0000

                          AREA ||i.HAL_NVIC_SystemReset||, CODE, READONLY, ALIGN=2

                  HAL_NVIC_SystemReset PROC
;;;214      */
;;;215    void HAL_NVIC_SystemReset(void)
000000  f3bf8f4f          DSB      
000004  4805              LDR      r0,|L11.28|
000006  6801              LDR      r1,[r0,#0]
000008  4a05              LDR      r2,|L11.32|
00000a  f40161e0          AND      r1,r1,#0x700
00000e  4311              ORRS     r1,r1,r2
000010  6001              STR      r1,[r0,#0]
000012  f3bf8f4f          DSB      
                  |L11.22|
000016  bf00              NOP      
000018  e7fd              B        |L11.22|
;;;216    {
;;;217      /* System Reset */
;;;218      NVIC_SystemReset();
;;;219    }
;;;220    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
                          DCD      0xe000ed0c
                  |L11.32|
                          DCD      0x05fa0004

                          AREA ||i.HAL_SYSTICK_CLKSourceConfig||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_CLKSourceConfig PROC
;;;478      */
;;;479    void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
000000  f04f21e0          MOV      r1,#0xe000e000
;;;480    {
;;;481      /* Check the parameters */
;;;482      assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
;;;483      if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
000004  2804              CMP      r0,#4
000006  d004              BEQ      |L12.18|
;;;484      {
;;;485        SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
;;;486      }
;;;487      else
;;;488      {
;;;489        SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
000008  6908              LDR      r0,[r1,#0x10]
00000a  f0200004          BIC      r0,r0,#4
00000e  6108              STR      r0,[r1,#0x10]
;;;490      }
;;;491    }
000010  4770              BX       lr
                  |L12.18|
000012  6908              LDR      r0,[r1,#0x10]         ;485
000014  f0400004          ORR      r0,r0,#4              ;485
000018  6108              STR      r0,[r1,#0x10]         ;485
00001a  4770              BX       lr
;;;492    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Callback||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Callback PROC
;;;505      */
;;;506    __weak void HAL_SYSTICK_Callback(void)
000000  4770              BX       lr
;;;507    {
;;;508      /* NOTE : This function Should not be modified, when the callback is needed,
;;;509                the HAL_SYSTICK_Callback could be implemented in the user file
;;;510       */
;;;511    }
;;;512    
                          ENDP


                          AREA ||i.HAL_SYSTICK_Config||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_Config PROC
;;;227      */
;;;228    uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
000000  b510              PUSH     {r4,lr}
000002  1e40              SUBS     r0,r0,#1
000004  f1b07f80          CMP      r0,#0x1000000
;;;229    {
000008  d301              BCC      |L14.14|
00000a  2001              MOVS     r0,#1
;;;230       return SysTick_Config(TicksNumb);
;;;231    }
00000c  bd10              POP      {r4,pc}
                  |L14.14|
00000e  f04f24e0          MOV      r4,#0xe000e000
000012  6160              STR      r0,[r4,#0x14]
000014  210f              MOVS     r1,#0xf
000016  1760              ASRS     r0,r4,#29
000018  f7fffffe          BL       __NVIC_SetPriority
00001c  2000              MOVS     r0,#0
00001e  61a0              STR      r0,[r4,#0x18]
000020  2007              MOVS     r0,#7
000022  6120              STR      r0,[r4,#0x10]
000024  2000              MOVS     r0,#0
000026  bd10              POP      {r4,pc}
;;;232    /**
                          ENDP


                          AREA ||i.HAL_SYSTICK_IRQHandler||, CODE, READONLY, ALIGN=1

                  HAL_SYSTICK_IRQHandler PROC
;;;496      */
;;;497    void HAL_SYSTICK_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;498    {
;;;499      HAL_SYSTICK_Callback();
000002  f7fffffe          BL       HAL_SYSTICK_Callback
;;;500    }
000006  bd10              POP      {r4,pc}
;;;501    
                          ENDP


                          AREA ||i.__NVIC_SetPriority||, CODE, READONLY, ALIGN=1

                  __NVIC_SetPriority PROC
;;;1638    */
;;;1639   __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  0709              LSLS     r1,r1,#28
;;;1640   {
;;;1641     if ((int32_t)(IRQn) >= 0)
;;;1642     {
;;;1643       NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000002  0e09              LSRS     r1,r1,#24
000004  2800              CMP      r0,#0                 ;1641
000006  db04              BLT      |L16.18|
000008  f10020e0          ADD      r0,r0,#0xe000e000
00000c  f8801400          STRB     r1,[r0,#0x400]
;;;1644     }
;;;1645     else
;;;1646     {
;;;1647       SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
;;;1648     }
;;;1649   }
000010  4770              BX       lr
                  |L16.18|
000012  f000000f          AND      r0,r0,#0xf            ;1647
000016  f10020e0          ADD      r0,r0,#0xe000e000     ;1647
00001a  f8801d14          STRB     r1,[r0,#0xd14]        ;1647
00001e  4770              BX       lr
;;;1650   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Drivers\\STM32F1xx_HAL_Driver\\Src\\stm32f1xx_hal_cortex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH|
#line 478
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX|
#line 665
|__asm___22_stm32f1xx_hal_cortex_c_2992dbc0____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
