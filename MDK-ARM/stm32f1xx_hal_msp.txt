; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --interleave -otft_lcd\stm32f1xx_hal_msp.o --asm_dir=./ --list_dir=--list --depend=tft_lcd\stm32f1xx_hal_msp.d --cpu=Cortex-M3 --apcs=interwork -O1 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc -I../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy -I../Drivers/CMSIS/Device/ST/STM32F1xx/Include -I../Drivers/CMSIS/Include -I../Drivers/BSP/Components -I../Drivers/BSP\Components/Common -I..\Middlewares\Third_Party\FatFs\src -I..\Drivers\BSP\Adafruit_Shield -I..\Drivers\BSP\STM32F1xx_Nucleo -I..\Middlewares\Third_Party\FatFs\src\drivers -I..\Drivers\BSP\Components\st7789 -I.\RTE\_TFT_LCD -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.4.1\Device\Include -D__MICROLIB -D__UVISION_VERSION=533 -D_RTE_ -DSTM32F10X_MD -D_RTE_ -DUSE_HAL_DRIVER -DSTM32F103xB --omf_browse=tft_lcd\stm32f1xx_hal_msp.crf ..\Src\stm32f1xx_hal_msp.c]
                          THUMB

                          AREA ||i.HAL_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_MspInit PROC
;;;64       */
;;;65     void HAL_MspInit(void)
000000  b508              PUSH     {r3,lr}
;;;66     {
;;;67       /* USER CODE BEGIN MspInit 0 */
;;;68     
;;;69       /* USER CODE END MspInit 0 */
;;;70     
;;;71       __HAL_RCC_AFIO_CLK_ENABLE();
000002  480c              LDR      r0,|L1.52|
000004  6981              LDR      r1,[r0,#0x18]
000006  f0410101          ORR      r1,r1,#1
00000a  6181              STR      r1,[r0,#0x18]
00000c  6981              LDR      r1,[r0,#0x18]
00000e  f0010101          AND      r1,r1,#1
000012  9100              STR      r1,[sp,#0]
;;;72       __HAL_RCC_PWR_CLK_ENABLE();
000014  69c1              LDR      r1,[r0,#0x1c]
000016  f0415180          ORR      r1,r1,#0x10000000
00001a  61c1              STR      r1,[r0,#0x1c]
00001c  69c0              LDR      r0,[r0,#0x1c]
00001e  f0005080          AND      r0,r0,#0x10000000
000022  9000              STR      r0,[sp,#0]
;;;73     
;;;74       /* System interrupt init*/
;;;75     
;;;76       /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
;;;77       */
;;;78       __HAL_AFIO_REMAP_SWJ_NONJTRST();
000024  4904              LDR      r1,|L1.56|
000026  6848              LDR      r0,[r1,#4]
000028  f02060e0          BIC      r0,r0,#0x7000000
00002c  f0407080          ORR      r0,r0,#0x1000000
000030  6048              STR      r0,[r1,#4]
;;;79     
;;;80       /* USER CODE BEGIN MspInit 1 */
;;;81     
;;;82       /* USER CODE END MspInit 1 */
;;;83     }
000032  bd08              POP      {r3,pc}
;;;84     
                          ENDP

                  |L1.52|
                          DCD      0x40021000
                  |L1.56|
                          DCD      0x40010000

                          AREA ||i.HAL_RTC_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_MspDeInit PROC
;;;224    */
;;;225    void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
000000  6800              LDR      r0,[r0,#0]
;;;226    {
;;;227      if(hrtc->Instance==RTC)
000002  4905              LDR      r1,|L2.24|
000004  4288              CMP      r0,r1
000006  d105              BNE      |L2.20|
;;;228      {
;;;229      /* USER CODE BEGIN RTC_MspDeInit 0 */
;;;230    
;;;231      /* USER CODE END RTC_MspDeInit 0 */
;;;232        /* Peripheral clock disable */
;;;233        __HAL_RCC_RTC_DISABLE();
000008  4904              LDR      r1,|L2.28|
00000a  2000              MOVS     r0,#0
00000c  6008              STR      r0,[r1,#0]
;;;234    
;;;235        /* RTC interrupt DeInit */
;;;236        HAL_NVIC_DisableIRQ(RTC_IRQn);
00000e  2003              MOVS     r0,#3
000010  f7ffbffe          B.W      HAL_NVIC_DisableIRQ
                  |L2.20|
;;;237      /* USER CODE BEGIN RTC_MspDeInit 1 */
;;;238    
;;;239      /* USER CODE END RTC_MspDeInit 1 */
;;;240      }
;;;241    
;;;242    }
000014  4770              BX       lr
;;;243    
                          ENDP

000016  0000              DCW      0x0000
                  |L2.24|
                          DCD      0x40002800
                  |L2.28|
                          DCD      0x4242043c

                          AREA ||i.HAL_RTC_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_MspInit PROC
;;;149    */
;;;150    void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
000000  b510              PUSH     {r4,lr}
;;;151    {
000002  b090              SUB      sp,sp,#0x40
;;;152      RCC_OscInitTypeDef        RCC_OscInitStruct;
;;;153      RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
;;;154      
;;;155      /*##-1- Enables the PWR Clock and Enables access to the backup domain ###################################*/
;;;156      /* To change the source clock of the RTC feature (LSE, LSI), You have to:
;;;157         - Enable the power clock using __HAL_RCC_PWR_CLK_ENABLE()
;;;158         - Enable write access using HAL_PWR_EnableBkUpAccess() function before to 
;;;159           configure the RTC clock source (to be done once after reset).
;;;160         - Reset the Back up Domain using __HAL_RCC_BACKUPRESET_FORCE() and 
;;;161           __HAL_RCC_BACKUPRESET_RELEASE().
;;;162         - Configure the needed RTC clock source */
;;;163      __HAL_RCC_PWR_CLK_ENABLE();
000004  4816              LDR      r0,|L3.96|
000006  69c1              LDR      r1,[r0,#0x1c]
000008  f0415180          ORR      r1,r1,#0x10000000
00000c  61c1              STR      r1,[r0,#0x1c]
00000e  69c0              LDR      r0,[r0,#0x1c]
000010  f0005080          AND      r0,r0,#0x10000000
000014  9001              STR      r0,[sp,#4]
;;;164      HAL_PWR_EnableBkUpAccess();
000016  f7fffffe          BL       HAL_PWR_EnableBkUpAccess
;;;165    
;;;166      /*##-2- Configue LSE/LSI as RTC clock soucre ###############################*/
;;;167    #ifdef RTC_CLOCK_SOURCE_LSE  
;;;168      RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
00001a  200c              MOVS     r0,#0xc
00001c  9006              STR      r0,[sp,#0x18]
;;;169      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
00001e  2000              MOVS     r0,#0
000020  900d              STR      r0,[sp,#0x34]
;;;170      RCC_OscInitStruct.LSEState = RCC_LSE_ON;
000022  2401              MOVS     r4,#1
000024  9409              STR      r4,[sp,#0x24]
;;;171      RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
000026  900c              STR      r0,[sp,#0x30]
;;;172      if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
000028  a806              ADD      r0,sp,#0x18
00002a  f7fffffe          BL       HAL_RCC_OscConfig
00002e  b108              CBZ      r0,|L3.52|
;;;173      { 
;;;174        Error_Handler();
000030  f7fffffe          BL       Error_Handler
                  |L3.52|
;;;175      }
;;;176      
;;;177      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
000034  9402              STR      r4,[sp,#8]
;;;178      PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
000036  f44f7080          MOV      r0,#0x100
00003a  9003              STR      r0,[sp,#0xc]
;;;179      if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
00003c  a802              ADD      r0,sp,#8
00003e  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
000042  b108              CBZ      r0,|L3.72|
;;;180      { 
;;;181        Error_Handler();
000044  f7fffffe          BL       Error_Handler
                  |L3.72|
;;;182      }
;;;183    #elif defined (RTC_CLOCK_SOURCE_LSI)  
;;;184      RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
;;;185      RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
;;;186      RCC_OscInitStruct.LSIState = RCC_LSI_ON;
;;;187      RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
;;;188      if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
;;;189      { 
;;;190        Error_Handler();
;;;191      }
;;;192    
;;;193      PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
;;;194      PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
;;;195      if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
;;;196      { 
;;;197        Error_Handler();
;;;198      }
;;;199    #else
;;;200    #error Please select the RTC Clock source inside the main.h file
;;;201    #endif /*RTC_CLOCK_SOURCE_LSE*/
;;;202      
;;;203      /*##-2- Enable RTC peripheral Clocks #######################################*/ 
;;;204      /* Enable RTC Clock */ 
;;;205      __HAL_RCC_RTC_ENABLE(); 
000048  4806              LDR      r0,|L3.100|
00004a  6004              STR      r4,[r0,#0]
;;;206      
;;;207      /*##-4- Configure the NVIC for RTC Alarm ###################################*/
;;;208    //  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0F, 0);
;;;209    //  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
;;;210    /*Якщо необхідно переривання 	
;;;211    RTC_IRQHandler замість RTC_Alarm_IRQHandler
;;;212    то треба 	*/
;;;213        HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
00004c  2200              MOVS     r2,#0
00004e  4611              MOV      r1,r2
000050  2003              MOVS     r0,#3
000052  f7fffffe          BL       HAL_NVIC_SetPriority
;;;214        HAL_NVIC_EnableIRQ(RTC_IRQn); 
000056  2003              MOVS     r0,#3
000058  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;215    
;;;216    
;;;217    }
00005c  b010              ADD      sp,sp,#0x40
00005e  bd10              POP      {r4,pc}
;;;218    
                          ENDP

                  |L3.96|
                          DCD      0x40021000
                  |L3.100|
                          DCD      0x4242043c

                          AREA ||i.HAL_SPI_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspDeInit PROC
;;;290    */
;;;291    void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
000000  6800              LDR      r0,[r0,#0]
;;;292    {
;;;293      if(hspi->Instance==SPI2)
000002  4907              LDR      r1,|L4.32|
000004  4288              CMP      r0,r1
000006  d109              BNE      |L4.28|
;;;294      {
;;;295      /* USER CODE BEGIN SPI2_MspDeInit 0 */
;;;296    
;;;297      /* USER CODE END SPI2_MspDeInit 0 */
;;;298        /* Peripheral clock disable */
;;;299        __HAL_RCC_SPI2_CLK_DISABLE();
000008  4806              LDR      r0,|L4.36|
00000a  69c1              LDR      r1,[r0,#0x1c]
00000c  f4214180          BIC      r1,r1,#0x4000
000010  61c1              STR      r1,[r0,#0x1c]
;;;300    
;;;301        /**SPI2 GPIO Configuration
;;;302        PB12     ------> SPI2_NSS
;;;303        PB13     ------> SPI2_SCK
;;;304        PB14     ------> SPI2_MISO
;;;305        PB15     ------> SPI2_MOSI
;;;306        */
;;;307        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
000012  f44f4170          MOV      r1,#0xf000
000016  4804              LDR      r0,|L4.40|
000018  f7ffbffe          B.W      HAL_GPIO_DeInit
                  |L4.28|
;;;308    
;;;309      /* USER CODE BEGIN SPI2_MspDeInit 1 */
;;;310    
;;;311      /* USER CODE END SPI2_MspDeInit 1 */
;;;312      }
;;;313    
;;;314    }
00001c  4770              BX       lr
;;;315    
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      0x40003800
                  |L4.36|
                          DCD      0x40021000
                  |L4.40|
                          DCD      0x40010c00

                          AREA ||i.HAL_SPI_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_SPI_MspInit PROC
;;;249    */
;;;250    void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
000000  b530              PUSH     {r4,r5,lr}
;;;251    {
000002  b085              SUB      sp,sp,#0x14
;;;252      GPIO_InitTypeDef GPIO_InitStruct = {0};
000004  2400              MOVS     r4,#0
000006  9401              STR      r4,[sp,#4]
000008  9402              STR      r4,[sp,#8]
00000a  9403              STR      r4,[sp,#0xc]
00000c  9404              STR      r4,[sp,#0x10]
;;;253      if(hspi->Instance==SPI2)
00000e  6800              LDR      r0,[r0,#0]
000010  4915              LDR      r1,|L5.104|
000012  4288              CMP      r0,r1
000014  d125              BNE      |L5.98|
;;;254      {
;;;255      /* USER CODE BEGIN SPI2_MspInit 0 */
;;;256    
;;;257      /* USER CODE END SPI2_MspInit 0 */
;;;258        /* Peripheral clock enable */
;;;259        __HAL_RCC_SPI2_CLK_ENABLE();
000016  4815              LDR      r0,|L5.108|
000018  69c1              LDR      r1,[r0,#0x1c]
00001a  f4414180          ORR      r1,r1,#0x4000
00001e  61c1              STR      r1,[r0,#0x1c]
000020  69c1              LDR      r1,[r0,#0x1c]
000022  f4014180          AND      r1,r1,#0x4000
000026  9100              STR      r1,[sp,#0]
;;;260    
;;;261        __HAL_RCC_GPIOB_CLK_ENABLE();
000028  6981              LDR      r1,[r0,#0x18]
00002a  f0410108          ORR      r1,r1,#8
00002e  6181              STR      r1,[r0,#0x18]
000030  6980              LDR      r0,[r0,#0x18]
000032  f0000008          AND      r0,r0,#8
000036  9000              STR      r0,[sp,#0]
;;;262        /**SPI2 GPIO Configuration
;;;263        PB12     ------> SPI2_NSS
;;;264        PB13     ------> SPI2_SCK
;;;265        PB14     ------> SPI2_MISO
;;;266        PB15     ------> SPI2_MOSI
;;;267        */
;;;268        GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
000038  f44f4030          MOV      r0,#0xb000
00003c  9001              STR      r0,[sp,#4]
;;;269        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
00003e  2002              MOVS     r0,#2
000040  9002              STR      r0,[sp,#8]
;;;270        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
000042  2003              MOVS     r0,#3
000044  9004              STR      r0,[sp,#0x10]
;;;271        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
000046  4d0a              LDR      r5,|L5.112|
000048  a901              ADD      r1,sp,#4
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       HAL_GPIO_Init
;;;272    
;;;273        GPIO_InitStruct.Pin = GPIO_PIN_14;
000050  f44f4180          MOV      r1,#0x4000
000054  9101              STR      r1,[sp,#4]
;;;274        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
000056  9402              STR      r4,[sp,#8]
;;;275        GPIO_InitStruct.Pull = GPIO_NOPULL;
000058  9403              STR      r4,[sp,#0xc]
;;;276        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
00005a  a901              ADD      r1,sp,#4
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       HAL_GPIO_Init
                  |L5.98|
;;;277    
;;;278      /* USER CODE BEGIN SPI2_MspInit 1 */
;;;279    
;;;280      /* USER CODE END SPI2_MspInit 1 */
;;;281      }
;;;282    
;;;283    }
000062  b005              ADD      sp,sp,#0x14
000064  bd30              POP      {r4,r5,pc}
;;;284    
                          ENDP

000066  0000              DCW      0x0000
                  |L5.104|
                          DCD      0x40003800
                  |L5.108|
                          DCD      0x40021000
                  |L5.112|
                          DCD      0x40010c00

                          AREA ||i.HAL_UART_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_UART_MspDeInit PROC
;;;129      */
;;;130    void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
000000  b510              PUSH     {r4,lr}
;;;131    {
;;;132      /*##-1- Reset peripherals ##################################################*/
;;;133      USARTx_FORCE_RESET();
000002  480a              LDR      r0,|L6.44|
000004  68c1              LDR      r1,[r0,#0xc]
000006  f4414180          ORR      r1,r1,#0x4000
00000a  60c1              STR      r1,[r0,#0xc]
;;;134      USARTx_RELEASE_RESET();
00000c  68c1              LDR      r1,[r0,#0xc]
00000e  f4214180          BIC      r1,r1,#0x4000
000012  60c1              STR      r1,[r0,#0xc]
;;;135    
;;;136      /*##-2- Disable peripherals and GPIO Clocks #################################*/
;;;137      /* Configure UART Tx as alternate function  */
;;;138      HAL_GPIO_DeInit(USARTx_TX_GPIO_PORT, USARTx_TX_PIN);
000014  4c06              LDR      r4,|L6.48|
000016  1541              ASRS     r1,r0,#21
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       HAL_GPIO_DeInit
;;;139      /* Configure UART Rx as alternate function  */
;;;140      HAL_GPIO_DeInit(USARTx_RX_GPIO_PORT, USARTx_RX_PIN);
00001e  1521              ASRS     r1,r4,#20
000020  4620              MOV      r0,r4
000022  e8bd4010          POP      {r4,lr}
000026  f7ffbffe          B.W      HAL_GPIO_DeInit
;;;141    
;;;142    }
;;;143    
                          ENDP

00002a  0000              DCW      0x0000
                  |L6.44|
                          DCD      0x40021000
                  |L6.48|
                          DCD      0x40010800

                          AREA ||i.HAL_UART_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_UART_MspInit PROC
;;;92       */
;;;93     void HAL_UART_MspInit(UART_HandleTypeDef *huart)
000000  b510              PUSH     {r4,lr}
;;;94     {
000002  b086              SUB      sp,sp,#0x18
;;;95       GPIO_InitTypeDef  GPIO_InitStruct;
;;;96     
;;;97     
;;;98       /*##-1- Enable peripherals and GPIO Clocks #################################*/
;;;99       /* Enable GPIO TX/RX clock */
;;;100      USARTx_TX_GPIO_CLK_ENABLE();
000004  4817              LDR      r0,|L7.100|
000006  6981              LDR      r1,[r0,#0x18]
000008  f0410104          ORR      r1,r1,#4
00000c  6181              STR      r1,[r0,#0x18]
00000e  6981              LDR      r1,[r0,#0x18]
000010  f0010104          AND      r1,r1,#4
000014  9101              STR      r1,[sp,#4]
;;;101      USARTx_RX_GPIO_CLK_ENABLE();
000016  6981              LDR      r1,[r0,#0x18]
000018  f0410104          ORR      r1,r1,#4
00001c  6181              STR      r1,[r0,#0x18]
00001e  6981              LDR      r1,[r0,#0x18]
000020  f0010104          AND      r1,r1,#4
000024  9101              STR      r1,[sp,#4]
;;;102    
;;;103    
;;;104      /* Enable USARTx clock */
;;;105      USARTx_CLK_ENABLE();
000026  6981              LDR      r1,[r0,#0x18]
000028  f4414180          ORR      r1,r1,#0x4000
00002c  6181              STR      r1,[r0,#0x18]
00002e  6980              LDR      r0,[r0,#0x18]
000030  f4004080          AND      r0,r0,#0x4000
000034  9001              STR      r0,[sp,#4]
;;;106    
;;;107      /*##-2- Configure peripheral GPIO ##########################################*/
;;;108      /* UART TX GPIO pin configuration  */
;;;109      GPIO_InitStruct.Pin       = USARTx_TX_PIN;
000036  f44f7000          MOV      r0,#0x200
00003a  9002              STR      r0,[sp,#8]
;;;110      GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
00003c  2002              MOVS     r0,#2
00003e  9003              STR      r0,[sp,#0xc]
;;;111      GPIO_InitStruct.Pull      = GPIO_PULLUP;
000040  2001              MOVS     r0,#1
000042  9004              STR      r0,[sp,#0x10]
;;;112      GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
000044  2003              MOVS     r0,#3
000046  9005              STR      r0,[sp,#0x14]
;;;113    
;;;114      HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
000048  4c07              LDR      r4,|L7.104|
00004a  a902              ADD      r1,sp,#8
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       HAL_GPIO_Init
;;;115    
;;;116      /* UART RX GPIO pin configuration  */
;;;117      GPIO_InitStruct.Pin = USARTx_RX_PIN;
000052  1521              ASRS     r1,r4,#20
000054  9102              STR      r1,[sp,#8]
;;;118    
;;;119      HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
000056  a902              ADD      r1,sp,#8
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       HAL_GPIO_Init
;;;120    }
00005e  b006              ADD      sp,sp,#0x18
000060  bd10              POP      {r4,pc}
;;;121    
                          ENDP

000062  0000              DCW      0x0000
                  |L7.100|
                          DCD      0x40021000
                  |L7.104|
                          DCD      0x40010800

;*** Start embedded assembler ***

#line 1 "..\\Src\\stm32f1xx_hal_msp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_msp_c_d46e2bee____REV16|
#line 463 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___19_stm32f1xx_hal_msp_c_d46e2bee____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_msp_c_d46e2bee____REVSH|
#line 478
|__asm___19_stm32f1xx_hal_msp_c_d46e2bee____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f1xx_hal_msp_c_d46e2bee____RRX|
#line 665
|__asm___19_stm32f1xx_hal_msp_c_d46e2bee____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
